<?php
/**
 * ResidentialBuilding
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResidentialBuilding Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResidentialBuilding implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResidentialBuilding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'effective_area' => '\Swagger\Client\Model\Size',
        'revenue_per_year' => 'float',
        'count_of_vacant_housing_units' => 'int',
        'building_type' => '\Swagger\Client\Model\ResidentialBuildingType',
        'has_residential_building' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'effective_area' => null,
        'revenue_per_year' => 'decimal',
        'count_of_vacant_housing_units' => 'int32',
        'building_type' => null,
        'has_residential_building' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'effective_area' => 'effectiveArea',
        'revenue_per_year' => 'revenuePerYear',
        'count_of_vacant_housing_units' => 'countOfVacantHousingUnits',
        'building_type' => 'buildingType',
        'has_residential_building' => 'hasResidentialBuilding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'effective_area' => 'setEffectiveArea',
        'revenue_per_year' => 'setRevenuePerYear',
        'count_of_vacant_housing_units' => 'setCountOfVacantHousingUnits',
        'building_type' => 'setBuildingType',
        'has_residential_building' => 'setHasResidentialBuilding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'effective_area' => 'getEffectiveArea',
        'revenue_per_year' => 'getRevenuePerYear',
        'count_of_vacant_housing_units' => 'getCountOfVacantHousingUnits',
        'building_type' => 'getBuildingType',
        'has_residential_building' => 'getHasResidentialBuilding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['effective_area'] = isset($data['effective_area']) ? $data['effective_area'] : null;
        $this->container['revenue_per_year'] = isset($data['revenue_per_year']) ? $data['revenue_per_year'] : null;
        $this->container['count_of_vacant_housing_units'] = isset($data['count_of_vacant_housing_units']) ? $data['count_of_vacant_housing_units'] : null;
        $this->container['building_type'] = isset($data['building_type']) ? $data['building_type'] : null;
        $this->container['has_residential_building'] = isset($data['has_residential_building']) ? $data['has_residential_building'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets effective_area
     *
     * @return \Swagger\Client\Model\Size
     */
    public function getEffectiveArea()
    {
        return $this->container['effective_area'];
    }

    /**
     * Sets effective_area
     *
     * @param \Swagger\Client\Model\Size $effective_area effective_area
     *
     * @return $this
     */
    public function setEffectiveArea($effective_area)
    {
        $this->container['effective_area'] = $effective_area;

        return $this;
    }

    /**
     * Gets revenue_per_year
     *
     * @return float
     */
    public function getRevenuePerYear()
    {
        return $this->container['revenue_per_year'];
    }

    /**
     * Sets revenue_per_year
     *
     * @param float $revenue_per_year revenue_per_year
     *
     * @return $this
     */
    public function setRevenuePerYear($revenue_per_year)
    {
        $this->container['revenue_per_year'] = $revenue_per_year;

        return $this;
    }

    /**
     * Gets count_of_vacant_housing_units
     *
     * @return int
     */
    public function getCountOfVacantHousingUnits()
    {
        return $this->container['count_of_vacant_housing_units'];
    }

    /**
     * Sets count_of_vacant_housing_units
     *
     * @param int $count_of_vacant_housing_units count_of_vacant_housing_units
     *
     * @return $this
     */
    public function setCountOfVacantHousingUnits($count_of_vacant_housing_units)
    {
        $this->container['count_of_vacant_housing_units'] = $count_of_vacant_housing_units;

        return $this;
    }

    /**
     * Gets building_type
     *
     * @return \Swagger\Client\Model\ResidentialBuildingType
     */
    public function getBuildingType()
    {
        return $this->container['building_type'];
    }

    /**
     * Sets building_type
     *
     * @param \Swagger\Client\Model\ResidentialBuildingType $building_type building_type
     *
     * @return $this
     */
    public function setBuildingType($building_type)
    {
        $this->container['building_type'] = $building_type;

        return $this;
    }

    /**
     * Gets has_residential_building
     *
     * @return bool
     */
    public function getHasResidentialBuilding()
    {
        return $this->container['has_residential_building'];
    }

    /**
     * Sets has_residential_building
     *
     * @param bool $has_residential_building has_residential_building
     *
     * @return $this
     */
    public function setHasResidentialBuilding($has_residential_building)
    {
        $this->container['has_residential_building'] = $has_residential_building;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


