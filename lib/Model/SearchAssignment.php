<?php
/**
 * SearchAssignment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * SearchAssignment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchAssignment extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_assignment' => '\DateTime',
        'locations' => '\Swagger\Client\Model\SearchAssignmentLocation[]',
        'send_email_start_date' => '\DateTime',
        'send_email_end_date' => '\DateTime',
        'match_mail_trigger' => '\Swagger\Client\Model\MatchMailTrigger',
        'match_mail_period' => '\Swagger\Client\Model\MatchMailPeriod',
        'assignment_phase' => '\Swagger\Client\Model\AssignmentPhase',
        'assignment_source' => '\Swagger\Client\Model\AssignmentSource',
        'assignment_source_other_description' => 'string',
        'internal_memo' => 'string',
        'linked_relations' => '\Swagger\Client\Model\LinkedRelation[]',
        'foreign_id' => 'string',
        'origin' => 'string',
        'origin_owner_id' => 'string',
        'origin_id' => 'string',
        'foreign_member_id' => 'string',
        'origin_member_id' => 'string',
        'real_estate_group' => '\Swagger\Client\Model\RealEstateGroup',
        'name' => 'string',
        'types_part' => '\Swagger\Client\Model\TypePART[]',
        'building_characteristics' => '\Swagger\Client\Model\HouseCharacteristic[]',
        'apartment_types' => '\Swagger\Client\Model\ApartmentSort[]',
        'apartment_characteristics' => '\Swagger\Client\Model\ApartmentCharacteristic[]',
        'type_parking' => '\Swagger\Client\Model\ParkingType[]',
        'types_part_other' => '\Swagger\Client\Model\TypePARTOther[]',
        'types_bog' => '\Swagger\Client\Model\TypeBOG[]',
        'types_alv' => '\Swagger\Client\Model\TypeAlv[]',
        'types_alv_other' => '\Swagger\Client\Model\TypeAlvOther[]',
        'offer_type' => '\Swagger\Client\Model\OfferType',
        'price_start' => 'float',
        'price_end' => 'float',
        'construction_type' => '\Swagger\Client\Model\BuildingType',
        'construction_year_begin' => 'int',
        'construction_year_end' => 'int',
        'location_places' => '\Swagger\Client\Model\LocationPlace[]',
        'orientation_main_garden' => '\Swagger\Client\Model\Orientation',
        'available_from' => '\DateTime',
        'min_energy_class' => '\Swagger\Client\Model\EnergyClass',
        'measurement_unit' => '\Swagger\Client\Model\MeasurementUnit',
        'iso_currency_code' => 'string',
        'must_be_recently_modified' => 'bool',
        'must_be_new_on_market' => 'bool',
        'must_be_topper' => 'bool',
        'must_be_special' => 'bool',
        'must_have_open_house' => 'bool',
        'min_livable_area' => 'int',
        'max_livable_area' => 'int',
        'min_buildable_area' => 'int',
        'max_buildable_area' => 'int',
        'min_garden_area' => 'int',
        'max_garden_area' => 'int',
        'min_nr_of_rooms' => 'int',
        'max_nr_of_rooms' => 'int',
        'min_nr_of_bathrooms' => 'int',
        'max_nr_of_bathrooms' => 'int',
        'min_nr_of_bedrooms' => 'int',
        'max_nr_of_bedrooms' => 'int',
        'min_parking_capacity' => 'int',
        'max_parking_capacity' => 'int',
        'must_be_qualified_for_seniors' => 'bool',
        'max_energy_class' => '\Swagger\Client\Model\EnergyClass',
        'min_condition_inside' => '\Swagger\Client\Model\Condition',
        'max_condition_inside' => '\Swagger\Client\Model\Condition',
        'min_condition_outside' => '\Swagger\Client\Model\Condition',
        'max_condition_outside' => '\Swagger\Client\Model\Condition',
        'must_be_on_top_floor' => 'bool',
        'must_be_on_ground_floor' => 'bool',
        'facilities' => '\Swagger\Client\Model\SearchAssignmentFacilityType[]',
        'peculiarities' => '\Swagger\Client\Model\SearchAssignmentPeculiarityType[]',
        'house_sorts' => '\Swagger\Client\Model\HouseSort[]',
        'house_types' => '\Swagger\Client\Model\HouseType[]',
        'furnishing' => '\Swagger\Client\Model\Furnishing',
        'is_paid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_assignment' => 'date-time',
        'locations' => null,
        'send_email_start_date' => 'date-time',
        'send_email_end_date' => 'date-time',
        'match_mail_trigger' => null,
        'match_mail_period' => null,
        'assignment_phase' => null,
        'assignment_source' => null,
        'assignment_source_other_description' => null,
        'internal_memo' => null,
        'linked_relations' => null,
        'foreign_id' => null,
        'origin' => null,
        'origin_owner_id' => null,
        'origin_id' => null,
        'foreign_member_id' => null,
        'origin_member_id' => null,
        'real_estate_group' => null,
        'name' => null,
        'types_part' => null,
        'building_characteristics' => null,
        'apartment_types' => null,
        'apartment_characteristics' => null,
        'type_parking' => null,
        'types_part_other' => null,
        'types_bog' => null,
        'types_alv' => null,
        'types_alv_other' => null,
        'offer_type' => null,
        'price_start' => 'decimal',
        'price_end' => 'decimal',
        'construction_type' => null,
        'construction_year_begin' => 'int32',
        'construction_year_end' => 'int32',
        'location_places' => null,
        'orientation_main_garden' => null,
        'available_from' => 'date-time',
        'min_energy_class' => null,
        'measurement_unit' => null,
        'iso_currency_code' => null,
        'must_be_recently_modified' => null,
        'must_be_new_on_market' => null,
        'must_be_topper' => null,
        'must_be_special' => null,
        'must_have_open_house' => null,
        'min_livable_area' => 'int32',
        'max_livable_area' => 'int32',
        'min_buildable_area' => 'int32',
        'max_buildable_area' => 'int32',
        'min_garden_area' => 'int32',
        'max_garden_area' => 'int32',
        'min_nr_of_rooms' => 'int32',
        'max_nr_of_rooms' => 'int32',
        'min_nr_of_bathrooms' => 'int32',
        'max_nr_of_bathrooms' => 'int32',
        'min_nr_of_bedrooms' => 'int32',
        'max_nr_of_bedrooms' => 'int32',
        'min_parking_capacity' => 'int32',
        'max_parking_capacity' => 'int32',
        'must_be_qualified_for_seniors' => null,
        'max_energy_class' => null,
        'min_condition_inside' => null,
        'max_condition_inside' => null,
        'min_condition_outside' => null,
        'max_condition_outside' => null,
        'must_be_on_top_floor' => null,
        'must_be_on_ground_floor' => null,
        'facilities' => null,
        'peculiarities' => null,
        'house_sorts' => null,
        'house_types' => null,
        'furnishing' => null,
        'is_paid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_assignment' => 'dateAssignment',
        'locations' => 'locations',
        'send_email_start_date' => 'sendEmailStartDate',
        'send_email_end_date' => 'sendEmailEndDate',
        'match_mail_trigger' => 'matchMailTrigger',
        'match_mail_period' => 'matchMailPeriod',
        'assignment_phase' => 'assignmentPhase',
        'assignment_source' => 'assignmentSource',
        'assignment_source_other_description' => 'assignmentSourceOtherDescription',
        'internal_memo' => 'internalMemo',
        'linked_relations' => 'linkedRelations',
        'foreign_id' => 'foreignId',
        'origin' => 'origin',
        'origin_owner_id' => 'originOwnerId',
        'origin_id' => 'originId',
        'foreign_member_id' => 'foreignMemberID',
        'origin_member_id' => 'originMemberId',
        'real_estate_group' => 'realEstateGroup',
        'name' => 'name',
        'types_part' => 'typesPART',
        'building_characteristics' => 'buildingCharacteristics',
        'apartment_types' => 'apartmentTypes',
        'apartment_characteristics' => 'apartmentCharacteristics',
        'type_parking' => 'typeParking',
        'types_part_other' => 'typesPARTOther',
        'types_bog' => 'typesBOG',
        'types_alv' => 'typesALV',
        'types_alv_other' => 'typesALVOther',
        'offer_type' => 'offerType',
        'price_start' => 'priceStart',
        'price_end' => 'priceEnd',
        'construction_type' => 'constructionType',
        'construction_year_begin' => 'constructionYearBegin',
        'construction_year_end' => 'constructionYearEnd',
        'location_places' => 'locationPlaces',
        'orientation_main_garden' => 'orientationMainGarden',
        'available_from' => 'availableFrom',
        'min_energy_class' => 'minEnergyClass',
        'measurement_unit' => 'measurementUnit',
        'iso_currency_code' => 'isoCurrencyCode',
        'must_be_recently_modified' => 'mustBeRecentlyModified',
        'must_be_new_on_market' => 'mustBeNewOnMarket',
        'must_be_topper' => 'mustBeTopper',
        'must_be_special' => 'mustBeSpecial',
        'must_have_open_house' => 'mustHaveOpenHouse',
        'min_livable_area' => 'minLivableArea',
        'max_livable_area' => 'maxLivableArea',
        'min_buildable_area' => 'minBuildableArea',
        'max_buildable_area' => 'maxBuildableArea',
        'min_garden_area' => 'minGardenArea',
        'max_garden_area' => 'maxGardenArea',
        'min_nr_of_rooms' => 'minNrOfRooms',
        'max_nr_of_rooms' => 'maxNrOfRooms',
        'min_nr_of_bathrooms' => 'minNrOfBathrooms',
        'max_nr_of_bathrooms' => 'maxNrOfBathrooms',
        'min_nr_of_bedrooms' => 'minNrOfBedrooms',
        'max_nr_of_bedrooms' => 'maxNrOfBedrooms',
        'min_parking_capacity' => 'minParkingCapacity',
        'max_parking_capacity' => 'maxParkingCapacity',
        'must_be_qualified_for_seniors' => 'mustBeQualifiedForSeniors',
        'max_energy_class' => 'maxEnergyClass',
        'min_condition_inside' => 'minConditionInside',
        'max_condition_inside' => 'maxConditionInside',
        'min_condition_outside' => 'minConditionOutside',
        'max_condition_outside' => 'maxConditionOutside',
        'must_be_on_top_floor' => 'mustBeOnTopFloor',
        'must_be_on_ground_floor' => 'mustBeOnGroundFloor',
        'facilities' => 'facilities',
        'peculiarities' => 'peculiarities',
        'house_sorts' => 'houseSorts',
        'house_types' => 'houseTypes',
        'furnishing' => 'furnishing',
        'is_paid' => 'isPaid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_assignment' => 'setDateAssignment',
        'locations' => 'setLocations',
        'send_email_start_date' => 'setSendEmailStartDate',
        'send_email_end_date' => 'setSendEmailEndDate',
        'match_mail_trigger' => 'setMatchMailTrigger',
        'match_mail_period' => 'setMatchMailPeriod',
        'assignment_phase' => 'setAssignmentPhase',
        'assignment_source' => 'setAssignmentSource',
        'assignment_source_other_description' => 'setAssignmentSourceOtherDescription',
        'internal_memo' => 'setInternalMemo',
        'linked_relations' => 'setLinkedRelations',
        'foreign_id' => 'setForeignId',
        'origin' => 'setOrigin',
        'origin_owner_id' => 'setOriginOwnerId',
        'origin_id' => 'setOriginId',
        'foreign_member_id' => 'setForeignMemberId',
        'origin_member_id' => 'setOriginMemberId',
        'real_estate_group' => 'setRealEstateGroup',
        'name' => 'setName',
        'types_part' => 'setTypesPart',
        'building_characteristics' => 'setBuildingCharacteristics',
        'apartment_types' => 'setApartmentTypes',
        'apartment_characteristics' => 'setApartmentCharacteristics',
        'type_parking' => 'setTypeParking',
        'types_part_other' => 'setTypesPartOther',
        'types_bog' => 'setTypesBog',
        'types_alv' => 'setTypesAlv',
        'types_alv_other' => 'setTypesAlvOther',
        'offer_type' => 'setOfferType',
        'price_start' => 'setPriceStart',
        'price_end' => 'setPriceEnd',
        'construction_type' => 'setConstructionType',
        'construction_year_begin' => 'setConstructionYearBegin',
        'construction_year_end' => 'setConstructionYearEnd',
        'location_places' => 'setLocationPlaces',
        'orientation_main_garden' => 'setOrientationMainGarden',
        'available_from' => 'setAvailableFrom',
        'min_energy_class' => 'setMinEnergyClass',
        'measurement_unit' => 'setMeasurementUnit',
        'iso_currency_code' => 'setIsoCurrencyCode',
        'must_be_recently_modified' => 'setMustBeRecentlyModified',
        'must_be_new_on_market' => 'setMustBeNewOnMarket',
        'must_be_topper' => 'setMustBeTopper',
        'must_be_special' => 'setMustBeSpecial',
        'must_have_open_house' => 'setMustHaveOpenHouse',
        'min_livable_area' => 'setMinLivableArea',
        'max_livable_area' => 'setMaxLivableArea',
        'min_buildable_area' => 'setMinBuildableArea',
        'max_buildable_area' => 'setMaxBuildableArea',
        'min_garden_area' => 'setMinGardenArea',
        'max_garden_area' => 'setMaxGardenArea',
        'min_nr_of_rooms' => 'setMinNrOfRooms',
        'max_nr_of_rooms' => 'setMaxNrOfRooms',
        'min_nr_of_bathrooms' => 'setMinNrOfBathrooms',
        'max_nr_of_bathrooms' => 'setMaxNrOfBathrooms',
        'min_nr_of_bedrooms' => 'setMinNrOfBedrooms',
        'max_nr_of_bedrooms' => 'setMaxNrOfBedrooms',
        'min_parking_capacity' => 'setMinParkingCapacity',
        'max_parking_capacity' => 'setMaxParkingCapacity',
        'must_be_qualified_for_seniors' => 'setMustBeQualifiedForSeniors',
        'max_energy_class' => 'setMaxEnergyClass',
        'min_condition_inside' => 'setMinConditionInside',
        'max_condition_inside' => 'setMaxConditionInside',
        'min_condition_outside' => 'setMinConditionOutside',
        'max_condition_outside' => 'setMaxConditionOutside',
        'must_be_on_top_floor' => 'setMustBeOnTopFloor',
        'must_be_on_ground_floor' => 'setMustBeOnGroundFloor',
        'facilities' => 'setFacilities',
        'peculiarities' => 'setPeculiarities',
        'house_sorts' => 'setHouseSorts',
        'house_types' => 'setHouseTypes',
        'furnishing' => 'setFurnishing',
        'is_paid' => 'setIsPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_assignment' => 'getDateAssignment',
        'locations' => 'getLocations',
        'send_email_start_date' => 'getSendEmailStartDate',
        'send_email_end_date' => 'getSendEmailEndDate',
        'match_mail_trigger' => 'getMatchMailTrigger',
        'match_mail_period' => 'getMatchMailPeriod',
        'assignment_phase' => 'getAssignmentPhase',
        'assignment_source' => 'getAssignmentSource',
        'assignment_source_other_description' => 'getAssignmentSourceOtherDescription',
        'internal_memo' => 'getInternalMemo',
        'linked_relations' => 'getLinkedRelations',
        'foreign_id' => 'getForeignId',
        'origin' => 'getOrigin',
        'origin_owner_id' => 'getOriginOwnerId',
        'origin_id' => 'getOriginId',
        'foreign_member_id' => 'getForeignMemberId',
        'origin_member_id' => 'getOriginMemberId',
        'real_estate_group' => 'getRealEstateGroup',
        'name' => 'getName',
        'types_part' => 'getTypesPart',
        'building_characteristics' => 'getBuildingCharacteristics',
        'apartment_types' => 'getApartmentTypes',
        'apartment_characteristics' => 'getApartmentCharacteristics',
        'type_parking' => 'getTypeParking',
        'types_part_other' => 'getTypesPartOther',
        'types_bog' => 'getTypesBog',
        'types_alv' => 'getTypesAlv',
        'types_alv_other' => 'getTypesAlvOther',
        'offer_type' => 'getOfferType',
        'price_start' => 'getPriceStart',
        'price_end' => 'getPriceEnd',
        'construction_type' => 'getConstructionType',
        'construction_year_begin' => 'getConstructionYearBegin',
        'construction_year_end' => 'getConstructionYearEnd',
        'location_places' => 'getLocationPlaces',
        'orientation_main_garden' => 'getOrientationMainGarden',
        'available_from' => 'getAvailableFrom',
        'min_energy_class' => 'getMinEnergyClass',
        'measurement_unit' => 'getMeasurementUnit',
        'iso_currency_code' => 'getIsoCurrencyCode',
        'must_be_recently_modified' => 'getMustBeRecentlyModified',
        'must_be_new_on_market' => 'getMustBeNewOnMarket',
        'must_be_topper' => 'getMustBeTopper',
        'must_be_special' => 'getMustBeSpecial',
        'must_have_open_house' => 'getMustHaveOpenHouse',
        'min_livable_area' => 'getMinLivableArea',
        'max_livable_area' => 'getMaxLivableArea',
        'min_buildable_area' => 'getMinBuildableArea',
        'max_buildable_area' => 'getMaxBuildableArea',
        'min_garden_area' => 'getMinGardenArea',
        'max_garden_area' => 'getMaxGardenArea',
        'min_nr_of_rooms' => 'getMinNrOfRooms',
        'max_nr_of_rooms' => 'getMaxNrOfRooms',
        'min_nr_of_bathrooms' => 'getMinNrOfBathrooms',
        'max_nr_of_bathrooms' => 'getMaxNrOfBathrooms',
        'min_nr_of_bedrooms' => 'getMinNrOfBedrooms',
        'max_nr_of_bedrooms' => 'getMaxNrOfBedrooms',
        'min_parking_capacity' => 'getMinParkingCapacity',
        'max_parking_capacity' => 'getMaxParkingCapacity',
        'must_be_qualified_for_seniors' => 'getMustBeQualifiedForSeniors',
        'max_energy_class' => 'getMaxEnergyClass',
        'min_condition_inside' => 'getMinConditionInside',
        'max_condition_inside' => 'getMaxConditionInside',
        'min_condition_outside' => 'getMinConditionOutside',
        'max_condition_outside' => 'getMaxConditionOutside',
        'must_be_on_top_floor' => 'getMustBeOnTopFloor',
        'must_be_on_ground_floor' => 'getMustBeOnGroundFloor',
        'facilities' => 'getFacilities',
        'peculiarities' => 'getPeculiarities',
        'house_sorts' => 'getHouseSorts',
        'house_types' => 'getHouseTypes',
        'furnishing' => 'getFurnishing',
        'is_paid' => 'getIsPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['date_assignment'] = isset($data['date_assignment']) ? $data['date_assignment'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['send_email_start_date'] = isset($data['send_email_start_date']) ? $data['send_email_start_date'] : null;
        $this->container['send_email_end_date'] = isset($data['send_email_end_date']) ? $data['send_email_end_date'] : null;
        $this->container['match_mail_trigger'] = isset($data['match_mail_trigger']) ? $data['match_mail_trigger'] : null;
        $this->container['match_mail_period'] = isset($data['match_mail_period']) ? $data['match_mail_period'] : null;
        $this->container['assignment_phase'] = isset($data['assignment_phase']) ? $data['assignment_phase'] : null;
        $this->container['assignment_source'] = isset($data['assignment_source']) ? $data['assignment_source'] : null;
        $this->container['assignment_source_other_description'] = isset($data['assignment_source_other_description']) ? $data['assignment_source_other_description'] : null;
        $this->container['internal_memo'] = isset($data['internal_memo']) ? $data['internal_memo'] : null;
        $this->container['linked_relations'] = isset($data['linked_relations']) ? $data['linked_relations'] : null;
        $this->container['foreign_id'] = isset($data['foreign_id']) ? $data['foreign_id'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['origin_owner_id'] = isset($data['origin_owner_id']) ? $data['origin_owner_id'] : null;
        $this->container['origin_id'] = isset($data['origin_id']) ? $data['origin_id'] : null;
        $this->container['foreign_member_id'] = isset($data['foreign_member_id']) ? $data['foreign_member_id'] : null;
        $this->container['origin_member_id'] = isset($data['origin_member_id']) ? $data['origin_member_id'] : null;
        $this->container['real_estate_group'] = isset($data['real_estate_group']) ? $data['real_estate_group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['types_part'] = isset($data['types_part']) ? $data['types_part'] : null;
        $this->container['building_characteristics'] = isset($data['building_characteristics']) ? $data['building_characteristics'] : null;
        $this->container['apartment_types'] = isset($data['apartment_types']) ? $data['apartment_types'] : null;
        $this->container['apartment_characteristics'] = isset($data['apartment_characteristics']) ? $data['apartment_characteristics'] : null;
        $this->container['type_parking'] = isset($data['type_parking']) ? $data['type_parking'] : null;
        $this->container['types_part_other'] = isset($data['types_part_other']) ? $data['types_part_other'] : null;
        $this->container['types_bog'] = isset($data['types_bog']) ? $data['types_bog'] : null;
        $this->container['types_alv'] = isset($data['types_alv']) ? $data['types_alv'] : null;
        $this->container['types_alv_other'] = isset($data['types_alv_other']) ? $data['types_alv_other'] : null;
        $this->container['offer_type'] = isset($data['offer_type']) ? $data['offer_type'] : null;
        $this->container['price_start'] = isset($data['price_start']) ? $data['price_start'] : null;
        $this->container['price_end'] = isset($data['price_end']) ? $data['price_end'] : null;
        $this->container['construction_type'] = isset($data['construction_type']) ? $data['construction_type'] : null;
        $this->container['construction_year_begin'] = isset($data['construction_year_begin']) ? $data['construction_year_begin'] : null;
        $this->container['construction_year_end'] = isset($data['construction_year_end']) ? $data['construction_year_end'] : null;
        $this->container['location_places'] = isset($data['location_places']) ? $data['location_places'] : null;
        $this->container['orientation_main_garden'] = isset($data['orientation_main_garden']) ? $data['orientation_main_garden'] : null;
        $this->container['available_from'] = isset($data['available_from']) ? $data['available_from'] : null;
        $this->container['min_energy_class'] = isset($data['min_energy_class']) ? $data['min_energy_class'] : null;
        $this->container['measurement_unit'] = isset($data['measurement_unit']) ? $data['measurement_unit'] : null;
        $this->container['iso_currency_code'] = isset($data['iso_currency_code']) ? $data['iso_currency_code'] : null;
        $this->container['must_be_recently_modified'] = isset($data['must_be_recently_modified']) ? $data['must_be_recently_modified'] : null;
        $this->container['must_be_new_on_market'] = isset($data['must_be_new_on_market']) ? $data['must_be_new_on_market'] : null;
        $this->container['must_be_topper'] = isset($data['must_be_topper']) ? $data['must_be_topper'] : null;
        $this->container['must_be_special'] = isset($data['must_be_special']) ? $data['must_be_special'] : null;
        $this->container['must_have_open_house'] = isset($data['must_have_open_house']) ? $data['must_have_open_house'] : null;
        $this->container['min_livable_area'] = isset($data['min_livable_area']) ? $data['min_livable_area'] : null;
        $this->container['max_livable_area'] = isset($data['max_livable_area']) ? $data['max_livable_area'] : null;
        $this->container['min_buildable_area'] = isset($data['min_buildable_area']) ? $data['min_buildable_area'] : null;
        $this->container['max_buildable_area'] = isset($data['max_buildable_area']) ? $data['max_buildable_area'] : null;
        $this->container['min_garden_area'] = isset($data['min_garden_area']) ? $data['min_garden_area'] : null;
        $this->container['max_garden_area'] = isset($data['max_garden_area']) ? $data['max_garden_area'] : null;
        $this->container['min_nr_of_rooms'] = isset($data['min_nr_of_rooms']) ? $data['min_nr_of_rooms'] : null;
        $this->container['max_nr_of_rooms'] = isset($data['max_nr_of_rooms']) ? $data['max_nr_of_rooms'] : null;
        $this->container['min_nr_of_bathrooms'] = isset($data['min_nr_of_bathrooms']) ? $data['min_nr_of_bathrooms'] : null;
        $this->container['max_nr_of_bathrooms'] = isset($data['max_nr_of_bathrooms']) ? $data['max_nr_of_bathrooms'] : null;
        $this->container['min_nr_of_bedrooms'] = isset($data['min_nr_of_bedrooms']) ? $data['min_nr_of_bedrooms'] : null;
        $this->container['max_nr_of_bedrooms'] = isset($data['max_nr_of_bedrooms']) ? $data['max_nr_of_bedrooms'] : null;
        $this->container['min_parking_capacity'] = isset($data['min_parking_capacity']) ? $data['min_parking_capacity'] : null;
        $this->container['max_parking_capacity'] = isset($data['max_parking_capacity']) ? $data['max_parking_capacity'] : null;
        $this->container['must_be_qualified_for_seniors'] = isset($data['must_be_qualified_for_seniors']) ? $data['must_be_qualified_for_seniors'] : null;
        $this->container['max_energy_class'] = isset($data['max_energy_class']) ? $data['max_energy_class'] : null;
        $this->container['min_condition_inside'] = isset($data['min_condition_inside']) ? $data['min_condition_inside'] : null;
        $this->container['max_condition_inside'] = isset($data['max_condition_inside']) ? $data['max_condition_inside'] : null;
        $this->container['min_condition_outside'] = isset($data['min_condition_outside']) ? $data['min_condition_outside'] : null;
        $this->container['max_condition_outside'] = isset($data['max_condition_outside']) ? $data['max_condition_outside'] : null;
        $this->container['must_be_on_top_floor'] = isset($data['must_be_on_top_floor']) ? $data['must_be_on_top_floor'] : null;
        $this->container['must_be_on_ground_floor'] = isset($data['must_be_on_ground_floor']) ? $data['must_be_on_ground_floor'] : null;
        $this->container['facilities'] = isset($data['facilities']) ? $data['facilities'] : null;
        $this->container['peculiarities'] = isset($data['peculiarities']) ? $data['peculiarities'] : null;
        $this->container['house_sorts'] = isset($data['house_sorts']) ? $data['house_sorts'] : null;
        $this->container['house_types'] = isset($data['house_types']) ? $data['house_types'] : null;
        $this->container['furnishing'] = isset($data['furnishing']) ? $data['furnishing'] : null;
        $this->container['is_paid'] = isset($data['is_paid']) ? $data['is_paid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_assignment
     *
     * @return \DateTime
     */
    public function getDateAssignment()
    {
        return $this->container['date_assignment'];
    }

    /**
     * Sets date_assignment
     *
     * @param \DateTime $date_assignment date_assignment
     *
     * @return $this
     */
    public function setDateAssignment($date_assignment)
    {
        $this->container['date_assignment'] = $date_assignment;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Swagger\Client\Model\SearchAssignmentLocation[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Swagger\Client\Model\SearchAssignmentLocation[] $locations locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets send_email_start_date
     *
     * @return \DateTime
     */
    public function getSendEmailStartDate()
    {
        return $this->container['send_email_start_date'];
    }

    /**
     * Sets send_email_start_date
     *
     * @param \DateTime $send_email_start_date send_email_start_date
     *
     * @return $this
     */
    public function setSendEmailStartDate($send_email_start_date)
    {
        $this->container['send_email_start_date'] = $send_email_start_date;

        return $this;
    }

    /**
     * Gets send_email_end_date
     *
     * @return \DateTime
     */
    public function getSendEmailEndDate()
    {
        return $this->container['send_email_end_date'];
    }

    /**
     * Sets send_email_end_date
     *
     * @param \DateTime $send_email_end_date send_email_end_date
     *
     * @return $this
     */
    public function setSendEmailEndDate($send_email_end_date)
    {
        $this->container['send_email_end_date'] = $send_email_end_date;

        return $this;
    }

    /**
     * Gets match_mail_trigger
     *
     * @return \Swagger\Client\Model\MatchMailTrigger
     */
    public function getMatchMailTrigger()
    {
        return $this->container['match_mail_trigger'];
    }

    /**
     * Sets match_mail_trigger
     *
     * @param \Swagger\Client\Model\MatchMailTrigger $match_mail_trigger match_mail_trigger
     *
     * @return $this
     */
    public function setMatchMailTrigger($match_mail_trigger)
    {
        $this->container['match_mail_trigger'] = $match_mail_trigger;

        return $this;
    }

    /**
     * Gets match_mail_period
     *
     * @return \Swagger\Client\Model\MatchMailPeriod
     */
    public function getMatchMailPeriod()
    {
        return $this->container['match_mail_period'];
    }

    /**
     * Sets match_mail_period
     *
     * @param \Swagger\Client\Model\MatchMailPeriod $match_mail_period match_mail_period
     *
     * @return $this
     */
    public function setMatchMailPeriod($match_mail_period)
    {
        $this->container['match_mail_period'] = $match_mail_period;

        return $this;
    }

    /**
     * Gets assignment_phase
     *
     * @return \Swagger\Client\Model\AssignmentPhase
     */
    public function getAssignmentPhase()
    {
        return $this->container['assignment_phase'];
    }

    /**
     * Sets assignment_phase
     *
     * @param \Swagger\Client\Model\AssignmentPhase $assignment_phase assignment_phase
     *
     * @return $this
     */
    public function setAssignmentPhase($assignment_phase)
    {
        $this->container['assignment_phase'] = $assignment_phase;

        return $this;
    }

    /**
     * Gets assignment_source
     *
     * @return \Swagger\Client\Model\AssignmentSource
     */
    public function getAssignmentSource()
    {
        return $this->container['assignment_source'];
    }

    /**
     * Sets assignment_source
     *
     * @param \Swagger\Client\Model\AssignmentSource $assignment_source assignment_source
     *
     * @return $this
     */
    public function setAssignmentSource($assignment_source)
    {
        $this->container['assignment_source'] = $assignment_source;

        return $this;
    }

    /**
     * Gets assignment_source_other_description
     *
     * @return string
     */
    public function getAssignmentSourceOtherDescription()
    {
        return $this->container['assignment_source_other_description'];
    }

    /**
     * Sets assignment_source_other_description
     *
     * @param string $assignment_source_other_description assignment_source_other_description
     *
     * @return $this
     */
    public function setAssignmentSourceOtherDescription($assignment_source_other_description)
    {
        $this->container['assignment_source_other_description'] = $assignment_source_other_description;

        return $this;
    }

    /**
     * Gets internal_memo
     *
     * @return string
     */
    public function getInternalMemo()
    {
        return $this->container['internal_memo'];
    }

    /**
     * Sets internal_memo
     *
     * @param string $internal_memo internal_memo
     *
     * @return $this
     */
    public function setInternalMemo($internal_memo)
    {
        $this->container['internal_memo'] = $internal_memo;

        return $this;
    }

    /**
     * Gets linked_relations
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedRelations()
    {
        return $this->container['linked_relations'];
    }

    /**
     * Sets linked_relations
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_relations linked_relations
     *
     * @return $this
     */
    public function setLinkedRelations($linked_relations)
    {
        $this->container['linked_relations'] = $linked_relations;

        return $this;
    }

    /**
     * Gets foreign_id
     *
     * @return string
     */
    public function getForeignId()
    {
        return $this->container['foreign_id'];
    }

    /**
     * Sets foreign_id
     *
     * @param string $foreign_id foreign_id
     *
     * @return $this
     */
    public function setForeignId($foreign_id)
    {
        $this->container['foreign_id'] = $foreign_id;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets origin_owner_id
     *
     * @return string
     */
    public function getOriginOwnerId()
    {
        return $this->container['origin_owner_id'];
    }

    /**
     * Sets origin_owner_id
     *
     * @param string $origin_owner_id origin_owner_id
     *
     * @return $this
     */
    public function setOriginOwnerId($origin_owner_id)
    {
        $this->container['origin_owner_id'] = $origin_owner_id;

        return $this;
    }

    /**
     * Gets origin_id
     *
     * @return string
     */
    public function getOriginId()
    {
        return $this->container['origin_id'];
    }

    /**
     * Sets origin_id
     *
     * @param string $origin_id origin_id
     *
     * @return $this
     */
    public function setOriginId($origin_id)
    {
        $this->container['origin_id'] = $origin_id;

        return $this;
    }

    /**
     * Gets foreign_member_id
     *
     * @return string
     */
    public function getForeignMemberId()
    {
        return $this->container['foreign_member_id'];
    }

    /**
     * Sets foreign_member_id
     *
     * @param string $foreign_member_id foreign_member_id
     *
     * @return $this
     */
    public function setForeignMemberId($foreign_member_id)
    {
        $this->container['foreign_member_id'] = $foreign_member_id;

        return $this;
    }

    /**
     * Gets origin_member_id
     *
     * @return string
     */
    public function getOriginMemberId()
    {
        return $this->container['origin_member_id'];
    }

    /**
     * Sets origin_member_id
     *
     * @param string $origin_member_id origin_member_id
     *
     * @return $this
     */
    public function setOriginMemberId($origin_member_id)
    {
        $this->container['origin_member_id'] = $origin_member_id;

        return $this;
    }

    /**
     * Gets real_estate_group
     *
     * @return \Swagger\Client\Model\RealEstateGroup
     */
    public function getRealEstateGroup()
    {
        return $this->container['real_estate_group'];
    }

    /**
     * Sets real_estate_group
     *
     * @param \Swagger\Client\Model\RealEstateGroup $real_estate_group real_estate_group
     *
     * @return $this
     */
    public function setRealEstateGroup($real_estate_group)
    {
        $this->container['real_estate_group'] = $real_estate_group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets types_part
     *
     * @return \Swagger\Client\Model\TypePART[]
     */
    public function getTypesPart()
    {
        return $this->container['types_part'];
    }

    /**
     * Sets types_part
     *
     * @param \Swagger\Client\Model\TypePART[] $types_part types_part
     *
     * @return $this
     */
    public function setTypesPart($types_part)
    {
        $this->container['types_part'] = $types_part;

        return $this;
    }

    /**
     * Gets building_characteristics
     *
     * @return \Swagger\Client\Model\HouseCharacteristic[]
     */
    public function getBuildingCharacteristics()
    {
        return $this->container['building_characteristics'];
    }

    /**
     * Sets building_characteristics
     *
     * @param \Swagger\Client\Model\HouseCharacteristic[] $building_characteristics building_characteristics
     *
     * @return $this
     */
    public function setBuildingCharacteristics($building_characteristics)
    {
        $this->container['building_characteristics'] = $building_characteristics;

        return $this;
    }

    /**
     * Gets apartment_types
     *
     * @return \Swagger\Client\Model\ApartmentSort[]
     */
    public function getApartmentTypes()
    {
        return $this->container['apartment_types'];
    }

    /**
     * Sets apartment_types
     *
     * @param \Swagger\Client\Model\ApartmentSort[] $apartment_types apartment_types
     *
     * @return $this
     */
    public function setApartmentTypes($apartment_types)
    {
        $this->container['apartment_types'] = $apartment_types;

        return $this;
    }

    /**
     * Gets apartment_characteristics
     *
     * @return \Swagger\Client\Model\ApartmentCharacteristic[]
     */
    public function getApartmentCharacteristics()
    {
        return $this->container['apartment_characteristics'];
    }

    /**
     * Sets apartment_characteristics
     *
     * @param \Swagger\Client\Model\ApartmentCharacteristic[] $apartment_characteristics apartment_characteristics
     *
     * @return $this
     */
    public function setApartmentCharacteristics($apartment_characteristics)
    {
        $this->container['apartment_characteristics'] = $apartment_characteristics;

        return $this;
    }

    /**
     * Gets type_parking
     *
     * @return \Swagger\Client\Model\ParkingType[]
     */
    public function getTypeParking()
    {
        return $this->container['type_parking'];
    }

    /**
     * Sets type_parking
     *
     * @param \Swagger\Client\Model\ParkingType[] $type_parking type_parking
     *
     * @return $this
     */
    public function setTypeParking($type_parking)
    {
        $this->container['type_parking'] = $type_parking;

        return $this;
    }

    /**
     * Gets types_part_other
     *
     * @return \Swagger\Client\Model\TypePARTOther[]
     */
    public function getTypesPartOther()
    {
        return $this->container['types_part_other'];
    }

    /**
     * Sets types_part_other
     *
     * @param \Swagger\Client\Model\TypePARTOther[] $types_part_other types_part_other
     *
     * @return $this
     */
    public function setTypesPartOther($types_part_other)
    {
        $this->container['types_part_other'] = $types_part_other;

        return $this;
    }

    /**
     * Gets types_bog
     *
     * @return \Swagger\Client\Model\TypeBOG[]
     */
    public function getTypesBog()
    {
        return $this->container['types_bog'];
    }

    /**
     * Sets types_bog
     *
     * @param \Swagger\Client\Model\TypeBOG[] $types_bog types_bog
     *
     * @return $this
     */
    public function setTypesBog($types_bog)
    {
        $this->container['types_bog'] = $types_bog;

        return $this;
    }

    /**
     * Gets types_alv
     *
     * @return \Swagger\Client\Model\TypeAlv[]
     */
    public function getTypesAlv()
    {
        return $this->container['types_alv'];
    }

    /**
     * Sets types_alv
     *
     * @param \Swagger\Client\Model\TypeAlv[] $types_alv types_alv
     *
     * @return $this
     */
    public function setTypesAlv($types_alv)
    {
        $this->container['types_alv'] = $types_alv;

        return $this;
    }

    /**
     * Gets types_alv_other
     *
     * @return \Swagger\Client\Model\TypeAlvOther[]
     */
    public function getTypesAlvOther()
    {
        return $this->container['types_alv_other'];
    }

    /**
     * Sets types_alv_other
     *
     * @param \Swagger\Client\Model\TypeAlvOther[] $types_alv_other types_alv_other
     *
     * @return $this
     */
    public function setTypesAlvOther($types_alv_other)
    {
        $this->container['types_alv_other'] = $types_alv_other;

        return $this;
    }

    /**
     * Gets offer_type
     *
     * @return \Swagger\Client\Model\OfferType
     */
    public function getOfferType()
    {
        return $this->container['offer_type'];
    }

    /**
     * Sets offer_type
     *
     * @param \Swagger\Client\Model\OfferType $offer_type offer_type
     *
     * @return $this
     */
    public function setOfferType($offer_type)
    {
        $this->container['offer_type'] = $offer_type;

        return $this;
    }

    /**
     * Gets price_start
     *
     * @return float
     */
    public function getPriceStart()
    {
        return $this->container['price_start'];
    }

    /**
     * Sets price_start
     *
     * @param float $price_start price_start
     *
     * @return $this
     */
    public function setPriceStart($price_start)
    {
        $this->container['price_start'] = $price_start;

        return $this;
    }

    /**
     * Gets price_end
     *
     * @return float
     */
    public function getPriceEnd()
    {
        return $this->container['price_end'];
    }

    /**
     * Sets price_end
     *
     * @param float $price_end price_end
     *
     * @return $this
     */
    public function setPriceEnd($price_end)
    {
        $this->container['price_end'] = $price_end;

        return $this;
    }

    /**
     * Gets construction_type
     *
     * @return \Swagger\Client\Model\BuildingType
     */
    public function getConstructionType()
    {
        return $this->container['construction_type'];
    }

    /**
     * Sets construction_type
     *
     * @param \Swagger\Client\Model\BuildingType $construction_type construction_type
     *
     * @return $this
     */
    public function setConstructionType($construction_type)
    {
        $this->container['construction_type'] = $construction_type;

        return $this;
    }

    /**
     * Gets construction_year_begin
     *
     * @return int
     */
    public function getConstructionYearBegin()
    {
        return $this->container['construction_year_begin'];
    }

    /**
     * Sets construction_year_begin
     *
     * @param int $construction_year_begin construction_year_begin
     *
     * @return $this
     */
    public function setConstructionYearBegin($construction_year_begin)
    {
        $this->container['construction_year_begin'] = $construction_year_begin;

        return $this;
    }

    /**
     * Gets construction_year_end
     *
     * @return int
     */
    public function getConstructionYearEnd()
    {
        return $this->container['construction_year_end'];
    }

    /**
     * Sets construction_year_end
     *
     * @param int $construction_year_end construction_year_end
     *
     * @return $this
     */
    public function setConstructionYearEnd($construction_year_end)
    {
        $this->container['construction_year_end'] = $construction_year_end;

        return $this;
    }

    /**
     * Gets location_places
     *
     * @return \Swagger\Client\Model\LocationPlace[]
     */
    public function getLocationPlaces()
    {
        return $this->container['location_places'];
    }

    /**
     * Sets location_places
     *
     * @param \Swagger\Client\Model\LocationPlace[] $location_places location_places
     *
     * @return $this
     */
    public function setLocationPlaces($location_places)
    {
        $this->container['location_places'] = $location_places;

        return $this;
    }

    /**
     * Gets orientation_main_garden
     *
     * @return \Swagger\Client\Model\Orientation
     */
    public function getOrientationMainGarden()
    {
        return $this->container['orientation_main_garden'];
    }

    /**
     * Sets orientation_main_garden
     *
     * @param \Swagger\Client\Model\Orientation $orientation_main_garden orientation_main_garden
     *
     * @return $this
     */
    public function setOrientationMainGarden($orientation_main_garden)
    {
        $this->container['orientation_main_garden'] = $orientation_main_garden;

        return $this;
    }

    /**
     * Gets available_from
     *
     * @return \DateTime
     */
    public function getAvailableFrom()
    {
        return $this->container['available_from'];
    }

    /**
     * Sets available_from
     *
     * @param \DateTime $available_from available_from
     *
     * @return $this
     */
    public function setAvailableFrom($available_from)
    {
        $this->container['available_from'] = $available_from;

        return $this;
    }

    /**
     * Gets min_energy_class
     *
     * @return \Swagger\Client\Model\EnergyClass
     */
    public function getMinEnergyClass()
    {
        return $this->container['min_energy_class'];
    }

    /**
     * Sets min_energy_class
     *
     * @param \Swagger\Client\Model\EnergyClass $min_energy_class min_energy_class
     *
     * @return $this
     */
    public function setMinEnergyClass($min_energy_class)
    {
        $this->container['min_energy_class'] = $min_energy_class;

        return $this;
    }

    /**
     * Gets measurement_unit
     *
     * @return \Swagger\Client\Model\MeasurementUnit
     */
    public function getMeasurementUnit()
    {
        return $this->container['measurement_unit'];
    }

    /**
     * Sets measurement_unit
     *
     * @param \Swagger\Client\Model\MeasurementUnit $measurement_unit measurement_unit
     *
     * @return $this
     */
    public function setMeasurementUnit($measurement_unit)
    {
        $this->container['measurement_unit'] = $measurement_unit;

        return $this;
    }

    /**
     * Gets iso_currency_code
     *
     * @return string
     */
    public function getIsoCurrencyCode()
    {
        return $this->container['iso_currency_code'];
    }

    /**
     * Sets iso_currency_code
     *
     * @param string $iso_currency_code iso_currency_code
     *
     * @return $this
     */
    public function setIsoCurrencyCode($iso_currency_code)
    {
        $this->container['iso_currency_code'] = $iso_currency_code;

        return $this;
    }

    /**
     * Gets must_be_recently_modified
     *
     * @return bool
     */
    public function getMustBeRecentlyModified()
    {
        return $this->container['must_be_recently_modified'];
    }

    /**
     * Sets must_be_recently_modified
     *
     * @param bool $must_be_recently_modified must_be_recently_modified
     *
     * @return $this
     */
    public function setMustBeRecentlyModified($must_be_recently_modified)
    {
        $this->container['must_be_recently_modified'] = $must_be_recently_modified;

        return $this;
    }

    /**
     * Gets must_be_new_on_market
     *
     * @return bool
     */
    public function getMustBeNewOnMarket()
    {
        return $this->container['must_be_new_on_market'];
    }

    /**
     * Sets must_be_new_on_market
     *
     * @param bool $must_be_new_on_market must_be_new_on_market
     *
     * @return $this
     */
    public function setMustBeNewOnMarket($must_be_new_on_market)
    {
        $this->container['must_be_new_on_market'] = $must_be_new_on_market;

        return $this;
    }

    /**
     * Gets must_be_topper
     *
     * @return bool
     */
    public function getMustBeTopper()
    {
        return $this->container['must_be_topper'];
    }

    /**
     * Sets must_be_topper
     *
     * @param bool $must_be_topper must_be_topper
     *
     * @return $this
     */
    public function setMustBeTopper($must_be_topper)
    {
        $this->container['must_be_topper'] = $must_be_topper;

        return $this;
    }

    /**
     * Gets must_be_special
     *
     * @return bool
     */
    public function getMustBeSpecial()
    {
        return $this->container['must_be_special'];
    }

    /**
     * Sets must_be_special
     *
     * @param bool $must_be_special must_be_special
     *
     * @return $this
     */
    public function setMustBeSpecial($must_be_special)
    {
        $this->container['must_be_special'] = $must_be_special;

        return $this;
    }

    /**
     * Gets must_have_open_house
     *
     * @return bool
     */
    public function getMustHaveOpenHouse()
    {
        return $this->container['must_have_open_house'];
    }

    /**
     * Sets must_have_open_house
     *
     * @param bool $must_have_open_house must_have_open_house
     *
     * @return $this
     */
    public function setMustHaveOpenHouse($must_have_open_house)
    {
        $this->container['must_have_open_house'] = $must_have_open_house;

        return $this;
    }

    /**
     * Gets min_livable_area
     *
     * @return int
     */
    public function getMinLivableArea()
    {
        return $this->container['min_livable_area'];
    }

    /**
     * Sets min_livable_area
     *
     * @param int $min_livable_area min_livable_area
     *
     * @return $this
     */
    public function setMinLivableArea($min_livable_area)
    {
        $this->container['min_livable_area'] = $min_livable_area;

        return $this;
    }

    /**
     * Gets max_livable_area
     *
     * @return int
     */
    public function getMaxLivableArea()
    {
        return $this->container['max_livable_area'];
    }

    /**
     * Sets max_livable_area
     *
     * @param int $max_livable_area max_livable_area
     *
     * @return $this
     */
    public function setMaxLivableArea($max_livable_area)
    {
        $this->container['max_livable_area'] = $max_livable_area;

        return $this;
    }

    /**
     * Gets min_buildable_area
     *
     * @return int
     */
    public function getMinBuildableArea()
    {
        return $this->container['min_buildable_area'];
    }

    /**
     * Sets min_buildable_area
     *
     * @param int $min_buildable_area min_buildable_area
     *
     * @return $this
     */
    public function setMinBuildableArea($min_buildable_area)
    {
        $this->container['min_buildable_area'] = $min_buildable_area;

        return $this;
    }

    /**
     * Gets max_buildable_area
     *
     * @return int
     */
    public function getMaxBuildableArea()
    {
        return $this->container['max_buildable_area'];
    }

    /**
     * Sets max_buildable_area
     *
     * @param int $max_buildable_area max_buildable_area
     *
     * @return $this
     */
    public function setMaxBuildableArea($max_buildable_area)
    {
        $this->container['max_buildable_area'] = $max_buildable_area;

        return $this;
    }

    /**
     * Gets min_garden_area
     *
     * @return int
     */
    public function getMinGardenArea()
    {
        return $this->container['min_garden_area'];
    }

    /**
     * Sets min_garden_area
     *
     * @param int $min_garden_area min_garden_area
     *
     * @return $this
     */
    public function setMinGardenArea($min_garden_area)
    {
        $this->container['min_garden_area'] = $min_garden_area;

        return $this;
    }

    /**
     * Gets max_garden_area
     *
     * @return int
     */
    public function getMaxGardenArea()
    {
        return $this->container['max_garden_area'];
    }

    /**
     * Sets max_garden_area
     *
     * @param int $max_garden_area max_garden_area
     *
     * @return $this
     */
    public function setMaxGardenArea($max_garden_area)
    {
        $this->container['max_garden_area'] = $max_garden_area;

        return $this;
    }

    /**
     * Gets min_nr_of_rooms
     *
     * @return int
     */
    public function getMinNrOfRooms()
    {
        return $this->container['min_nr_of_rooms'];
    }

    /**
     * Sets min_nr_of_rooms
     *
     * @param int $min_nr_of_rooms min_nr_of_rooms
     *
     * @return $this
     */
    public function setMinNrOfRooms($min_nr_of_rooms)
    {
        $this->container['min_nr_of_rooms'] = $min_nr_of_rooms;

        return $this;
    }

    /**
     * Gets max_nr_of_rooms
     *
     * @return int
     */
    public function getMaxNrOfRooms()
    {
        return $this->container['max_nr_of_rooms'];
    }

    /**
     * Sets max_nr_of_rooms
     *
     * @param int $max_nr_of_rooms max_nr_of_rooms
     *
     * @return $this
     */
    public function setMaxNrOfRooms($max_nr_of_rooms)
    {
        $this->container['max_nr_of_rooms'] = $max_nr_of_rooms;

        return $this;
    }

    /**
     * Gets min_nr_of_bathrooms
     *
     * @return int
     */
    public function getMinNrOfBathrooms()
    {
        return $this->container['min_nr_of_bathrooms'];
    }

    /**
     * Sets min_nr_of_bathrooms
     *
     * @param int $min_nr_of_bathrooms min_nr_of_bathrooms
     *
     * @return $this
     */
    public function setMinNrOfBathrooms($min_nr_of_bathrooms)
    {
        $this->container['min_nr_of_bathrooms'] = $min_nr_of_bathrooms;

        return $this;
    }

    /**
     * Gets max_nr_of_bathrooms
     *
     * @return int
     */
    public function getMaxNrOfBathrooms()
    {
        return $this->container['max_nr_of_bathrooms'];
    }

    /**
     * Sets max_nr_of_bathrooms
     *
     * @param int $max_nr_of_bathrooms max_nr_of_bathrooms
     *
     * @return $this
     */
    public function setMaxNrOfBathrooms($max_nr_of_bathrooms)
    {
        $this->container['max_nr_of_bathrooms'] = $max_nr_of_bathrooms;

        return $this;
    }

    /**
     * Gets min_nr_of_bedrooms
     *
     * @return int
     */
    public function getMinNrOfBedrooms()
    {
        return $this->container['min_nr_of_bedrooms'];
    }

    /**
     * Sets min_nr_of_bedrooms
     *
     * @param int $min_nr_of_bedrooms min_nr_of_bedrooms
     *
     * @return $this
     */
    public function setMinNrOfBedrooms($min_nr_of_bedrooms)
    {
        $this->container['min_nr_of_bedrooms'] = $min_nr_of_bedrooms;

        return $this;
    }

    /**
     * Gets max_nr_of_bedrooms
     *
     * @return int
     */
    public function getMaxNrOfBedrooms()
    {
        return $this->container['max_nr_of_bedrooms'];
    }

    /**
     * Sets max_nr_of_bedrooms
     *
     * @param int $max_nr_of_bedrooms max_nr_of_bedrooms
     *
     * @return $this
     */
    public function setMaxNrOfBedrooms($max_nr_of_bedrooms)
    {
        $this->container['max_nr_of_bedrooms'] = $max_nr_of_bedrooms;

        return $this;
    }

    /**
     * Gets min_parking_capacity
     *
     * @return int
     */
    public function getMinParkingCapacity()
    {
        return $this->container['min_parking_capacity'];
    }

    /**
     * Sets min_parking_capacity
     *
     * @param int $min_parking_capacity min_parking_capacity
     *
     * @return $this
     */
    public function setMinParkingCapacity($min_parking_capacity)
    {
        $this->container['min_parking_capacity'] = $min_parking_capacity;

        return $this;
    }

    /**
     * Gets max_parking_capacity
     *
     * @return int
     */
    public function getMaxParkingCapacity()
    {
        return $this->container['max_parking_capacity'];
    }

    /**
     * Sets max_parking_capacity
     *
     * @param int $max_parking_capacity max_parking_capacity
     *
     * @return $this
     */
    public function setMaxParkingCapacity($max_parking_capacity)
    {
        $this->container['max_parking_capacity'] = $max_parking_capacity;

        return $this;
    }

    /**
     * Gets must_be_qualified_for_seniors
     *
     * @return bool
     */
    public function getMustBeQualifiedForSeniors()
    {
        return $this->container['must_be_qualified_for_seniors'];
    }

    /**
     * Sets must_be_qualified_for_seniors
     *
     * @param bool $must_be_qualified_for_seniors must_be_qualified_for_seniors
     *
     * @return $this
     */
    public function setMustBeQualifiedForSeniors($must_be_qualified_for_seniors)
    {
        $this->container['must_be_qualified_for_seniors'] = $must_be_qualified_for_seniors;

        return $this;
    }

    /**
     * Gets max_energy_class
     *
     * @return \Swagger\Client\Model\EnergyClass
     */
    public function getMaxEnergyClass()
    {
        return $this->container['max_energy_class'];
    }

    /**
     * Sets max_energy_class
     *
     * @param \Swagger\Client\Model\EnergyClass $max_energy_class max_energy_class
     *
     * @return $this
     */
    public function setMaxEnergyClass($max_energy_class)
    {
        $this->container['max_energy_class'] = $max_energy_class;

        return $this;
    }

    /**
     * Gets min_condition_inside
     *
     * @return \Swagger\Client\Model\Condition
     */
    public function getMinConditionInside()
    {
        return $this->container['min_condition_inside'];
    }

    /**
     * Sets min_condition_inside
     *
     * @param \Swagger\Client\Model\Condition $min_condition_inside min_condition_inside
     *
     * @return $this
     */
    public function setMinConditionInside($min_condition_inside)
    {
        $this->container['min_condition_inside'] = $min_condition_inside;

        return $this;
    }

    /**
     * Gets max_condition_inside
     *
     * @return \Swagger\Client\Model\Condition
     */
    public function getMaxConditionInside()
    {
        return $this->container['max_condition_inside'];
    }

    /**
     * Sets max_condition_inside
     *
     * @param \Swagger\Client\Model\Condition $max_condition_inside max_condition_inside
     *
     * @return $this
     */
    public function setMaxConditionInside($max_condition_inside)
    {
        $this->container['max_condition_inside'] = $max_condition_inside;

        return $this;
    }

    /**
     * Gets min_condition_outside
     *
     * @return \Swagger\Client\Model\Condition
     */
    public function getMinConditionOutside()
    {
        return $this->container['min_condition_outside'];
    }

    /**
     * Sets min_condition_outside
     *
     * @param \Swagger\Client\Model\Condition $min_condition_outside min_condition_outside
     *
     * @return $this
     */
    public function setMinConditionOutside($min_condition_outside)
    {
        $this->container['min_condition_outside'] = $min_condition_outside;

        return $this;
    }

    /**
     * Gets max_condition_outside
     *
     * @return \Swagger\Client\Model\Condition
     */
    public function getMaxConditionOutside()
    {
        return $this->container['max_condition_outside'];
    }

    /**
     * Sets max_condition_outside
     *
     * @param \Swagger\Client\Model\Condition $max_condition_outside max_condition_outside
     *
     * @return $this
     */
    public function setMaxConditionOutside($max_condition_outside)
    {
        $this->container['max_condition_outside'] = $max_condition_outside;

        return $this;
    }

    /**
     * Gets must_be_on_top_floor
     *
     * @return bool
     */
    public function getMustBeOnTopFloor()
    {
        return $this->container['must_be_on_top_floor'];
    }

    /**
     * Sets must_be_on_top_floor
     *
     * @param bool $must_be_on_top_floor must_be_on_top_floor
     *
     * @return $this
     */
    public function setMustBeOnTopFloor($must_be_on_top_floor)
    {
        $this->container['must_be_on_top_floor'] = $must_be_on_top_floor;

        return $this;
    }

    /**
     * Gets must_be_on_ground_floor
     *
     * @return bool
     */
    public function getMustBeOnGroundFloor()
    {
        return $this->container['must_be_on_ground_floor'];
    }

    /**
     * Sets must_be_on_ground_floor
     *
     * @param bool $must_be_on_ground_floor must_be_on_ground_floor
     *
     * @return $this
     */
    public function setMustBeOnGroundFloor($must_be_on_ground_floor)
    {
        $this->container['must_be_on_ground_floor'] = $must_be_on_ground_floor;

        return $this;
    }

    /**
     * Gets facilities
     *
     * @return \Swagger\Client\Model\SearchAssignmentFacilityType[]
     */
    public function getFacilities()
    {
        return $this->container['facilities'];
    }

    /**
     * Sets facilities
     *
     * @param \Swagger\Client\Model\SearchAssignmentFacilityType[] $facilities facilities
     *
     * @return $this
     */
    public function setFacilities($facilities)
    {
        $this->container['facilities'] = $facilities;

        return $this;
    }

    /**
     * Gets peculiarities
     *
     * @return \Swagger\Client\Model\SearchAssignmentPeculiarityType[]
     */
    public function getPeculiarities()
    {
        return $this->container['peculiarities'];
    }

    /**
     * Sets peculiarities
     *
     * @param \Swagger\Client\Model\SearchAssignmentPeculiarityType[] $peculiarities peculiarities
     *
     * @return $this
     */
    public function setPeculiarities($peculiarities)
    {
        $this->container['peculiarities'] = $peculiarities;

        return $this;
    }

    /**
     * Gets house_sorts
     *
     * @return \Swagger\Client\Model\HouseSort[]
     */
    public function getHouseSorts()
    {
        return $this->container['house_sorts'];
    }

    /**
     * Sets house_sorts
     *
     * @param \Swagger\Client\Model\HouseSort[] $house_sorts house_sorts
     *
     * @return $this
     */
    public function setHouseSorts($house_sorts)
    {
        $this->container['house_sorts'] = $house_sorts;

        return $this;
    }

    /**
     * Gets house_types
     *
     * @return \Swagger\Client\Model\HouseType[]
     */
    public function getHouseTypes()
    {
        return $this->container['house_types'];
    }

    /**
     * Sets house_types
     *
     * @param \Swagger\Client\Model\HouseType[] $house_types house_types
     *
     * @return $this
     */
    public function setHouseTypes($house_types)
    {
        $this->container['house_types'] = $house_types;

        return $this;
    }

    /**
     * Gets furnishing
     *
     * @return \Swagger\Client\Model\Furnishing
     */
    public function getFurnishing()
    {
        return $this->container['furnishing'];
    }

    /**
     * Sets furnishing
     *
     * @param \Swagger\Client\Model\Furnishing $furnishing furnishing
     *
     * @return $this
     */
    public function setFurnishing($furnishing)
    {
        $this->container['furnishing'] = $furnishing;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool $is_paid is_paid
     *
     * @return $this
     */
    public function setIsPaid($is_paid)
    {
        $this->container['is_paid'] = $is_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


