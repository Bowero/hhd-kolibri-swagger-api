<?php
/**
 * AcquisitionObjectAssignmentsDefineNewRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AcquisitionObjectAssignmentsDefineNewRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AcquisitionObjectAssignmentsDefineNewRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AcquisitionObjectAssignmentsDefineNewRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'real_estate_group' => '\Swagger\Client\Model\AcquisitionAssignmentsDefineNewRequestRealEstateGroup',
        'for_rent' => 'bool',
        'for_sale' => 'bool',
        'listing_type' => '\Swagger\Client\Model\AcquisitionObjectAssignmentsDefineNewRequestListingType',
        'linked_acquisition_assignment' => '\Swagger\Client\Model\LinkedAssignment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'real_estate_group' => null,
        'for_rent' => null,
        'for_sale' => null,
        'listing_type' => null,
        'linked_acquisition_assignment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'real_estate_group' => 'realEstateGroup',
        'for_rent' => 'forRent',
        'for_sale' => 'forSale',
        'listing_type' => 'listingType',
        'linked_acquisition_assignment' => 'linkedAcquisitionAssignment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'real_estate_group' => 'setRealEstateGroup',
        'for_rent' => 'setForRent',
        'for_sale' => 'setForSale',
        'listing_type' => 'setListingType',
        'linked_acquisition_assignment' => 'setLinkedAcquisitionAssignment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'real_estate_group' => 'getRealEstateGroup',
        'for_rent' => 'getForRent',
        'for_sale' => 'getForSale',
        'listing_type' => 'getListingType',
        'linked_acquisition_assignment' => 'getLinkedAcquisitionAssignment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['real_estate_group'] = isset($data['real_estate_group']) ? $data['real_estate_group'] : null;
        $this->container['for_rent'] = isset($data['for_rent']) ? $data['for_rent'] : null;
        $this->container['for_sale'] = isset($data['for_sale']) ? $data['for_sale'] : null;
        $this->container['listing_type'] = isset($data['listing_type']) ? $data['listing_type'] : null;
        $this->container['linked_acquisition_assignment'] = isset($data['linked_acquisition_assignment']) ? $data['linked_acquisition_assignment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['real_estate_group'] === null) {
            $invalidProperties[] = "'real_estate_group' can't be null";
        }
        if ($this->container['for_rent'] === null) {
            $invalidProperties[] = "'for_rent' can't be null";
        }
        if ($this->container['for_sale'] === null) {
            $invalidProperties[] = "'for_sale' can't be null";
        }
        if ($this->container['listing_type'] === null) {
            $invalidProperties[] = "'listing_type' can't be null";
        }
        if ($this->container['linked_acquisition_assignment'] === null) {
            $invalidProperties[] = "'linked_acquisition_assignment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets real_estate_group
     *
     * @return \Swagger\Client\Model\AcquisitionAssignmentsDefineNewRequestRealEstateGroup
     */
    public function getRealEstateGroup()
    {
        return $this->container['real_estate_group'];
    }

    /**
     * Sets real_estate_group
     *
     * @param \Swagger\Client\Model\AcquisitionAssignmentsDefineNewRequestRealEstateGroup $real_estate_group real_estate_group
     *
     * @return $this
     */
    public function setRealEstateGroup($real_estate_group)
    {
        $this->container['real_estate_group'] = $real_estate_group;

        return $this;
    }

    /**
     * Gets for_rent
     *
     * @return bool
     */
    public function getForRent()
    {
        return $this->container['for_rent'];
    }

    /**
     * Sets for_rent
     *
     * @param bool $for_rent Is this an assignment for rent or for sale?
     *
     * @return $this
     */
    public function setForRent($for_rent)
    {
        $this->container['for_rent'] = $for_rent;

        return $this;
    }

    /**
     * Gets for_sale
     *
     * @return bool
     */
    public function getForSale()
    {
        return $this->container['for_sale'];
    }

    /**
     * Sets for_sale
     *
     * @param bool $for_sale Is this an assignment for rent or for sale?
     *
     * @return $this
     */
    public function setForSale($for_sale)
    {
        $this->container['for_sale'] = $for_sale;

        return $this;
    }

    /**
     * Gets listing_type
     *
     * @return \Swagger\Client\Model\AcquisitionObjectAssignmentsDefineNewRequestListingType
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     *
     * @param \Swagger\Client\Model\AcquisitionObjectAssignmentsDefineNewRequestListingType $listing_type listing_type
     *
     * @return $this
     */
    public function setListingType($listing_type)
    {
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets linked_acquisition_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAcquisitionAssignment()
    {
        return $this->container['linked_acquisition_assignment'];
    }

    /**
     * Sets linked_acquisition_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_acquisition_assignment linked_acquisition_assignment
     *
     * @return $this
     */
    public function setLinkedAcquisitionAssignment($linked_acquisition_assignment)
    {
        $this->container['linked_acquisition_assignment'] = $linked_acquisition_assignment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


