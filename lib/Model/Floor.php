<?php
/**
 * Floor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Floor Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Floor implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Floor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attic_options' => '\Swagger\Client\Model\AtticOption[]',
        'description' => '\Swagger\Client\Model\TranslatedText[]',
        'floor_number' => 'int',
        'floor_type' => '\Swagger\Client\Model\FloorFloorType',
        'name' => 'string',
        'number_of_bedrooms' => 'int',
        'number_of_spaces' => 'int',
        'spaces' => '\Swagger\Client\Model\Space[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attic_options' => null,
        'description' => null,
        'floor_number' => 'int32',
        'floor_type' => null,
        'name' => null,
        'number_of_bedrooms' => 'int32',
        'number_of_spaces' => 'int32',
        'spaces' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attic_options' => 'atticOptions',
        'description' => 'description',
        'floor_number' => 'floorNumber',
        'floor_type' => 'floorType',
        'name' => 'name',
        'number_of_bedrooms' => 'numberOfBedrooms',
        'number_of_spaces' => 'numberOfSpaces',
        'spaces' => 'spaces'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attic_options' => 'setAtticOptions',
        'description' => 'setDescription',
        'floor_number' => 'setFloorNumber',
        'floor_type' => 'setFloorType',
        'name' => 'setName',
        'number_of_bedrooms' => 'setNumberOfBedrooms',
        'number_of_spaces' => 'setNumberOfSpaces',
        'spaces' => 'setSpaces'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attic_options' => 'getAtticOptions',
        'description' => 'getDescription',
        'floor_number' => 'getFloorNumber',
        'floor_type' => 'getFloorType',
        'name' => 'getName',
        'number_of_bedrooms' => 'getNumberOfBedrooms',
        'number_of_spaces' => 'getNumberOfSpaces',
        'spaces' => 'getSpaces'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attic_options'] = isset($data['attic_options']) ? $data['attic_options'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['floor_number'] = isset($data['floor_number']) ? $data['floor_number'] : null;
        $this->container['floor_type'] = isset($data['floor_type']) ? $data['floor_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_bedrooms'] = isset($data['number_of_bedrooms']) ? $data['number_of_bedrooms'] : null;
        $this->container['number_of_spaces'] = isset($data['number_of_spaces']) ? $data['number_of_spaces'] : null;
        $this->container['spaces'] = isset($data['spaces']) ? $data['spaces'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['floor_type'] === null) {
            $invalidProperties[] = "'floor_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attic_options
     *
     * @return \Swagger\Client\Model\AtticOption[]
     */
    public function getAtticOptions()
    {
        return $this->container['attic_options'];
    }

    /**
     * Sets attic_options
     *
     * @param \Swagger\Client\Model\AtticOption[] $attic_options attic_options
     *
     * @return $this
     */
    public function setAtticOptions($attic_options)
    {
        $this->container['attic_options'] = $attic_options;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Swagger\Client\Model\TranslatedText[] $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets floor_number
     *
     * @return int
     */
    public function getFloorNumber()
    {
        return $this->container['floor_number'];
    }

    /**
     * Sets floor_number
     *
     * @param int $floor_number floor_number
     *
     * @return $this
     */
    public function setFloorNumber($floor_number)
    {
        $this->container['floor_number'] = $floor_number;

        return $this;
    }

    /**
     * Gets floor_type
     *
     * @return \Swagger\Client\Model\FloorFloorType
     */
    public function getFloorType()
    {
        return $this->container['floor_type'];
    }

    /**
     * Sets floor_type
     *
     * @param \Swagger\Client\Model\FloorFloorType $floor_type floor_type
     *
     * @return $this
     */
    public function setFloorType($floor_type)
    {
        $this->container['floor_type'] = $floor_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_bedrooms
     *
     * @return int
     */
    public function getNumberOfBedrooms()
    {
        return $this->container['number_of_bedrooms'];
    }

    /**
     * Sets number_of_bedrooms
     *
     * @param int $number_of_bedrooms number_of_bedrooms
     *
     * @return $this
     */
    public function setNumberOfBedrooms($number_of_bedrooms)
    {
        $this->container['number_of_bedrooms'] = $number_of_bedrooms;

        return $this;
    }

    /**
     * Gets number_of_spaces
     *
     * @return int
     */
    public function getNumberOfSpaces()
    {
        return $this->container['number_of_spaces'];
    }

    /**
     * Sets number_of_spaces
     *
     * @param int $number_of_spaces number_of_spaces
     *
     * @return $this
     */
    public function setNumberOfSpaces($number_of_spaces)
    {
        $this->container['number_of_spaces'] = $number_of_spaces;

        return $this;
    }

    /**
     * Gets spaces
     *
     * @return \Swagger\Client\Model\Space[]
     */
    public function getSpaces()
    {
        return $this->container['spaces'];
    }

    /**
     * Sets spaces
     *
     * @param \Swagger\Client\Model\Space[] $spaces spaces
     *
     * @return $this
     */
    public function setSpaces($spaces)
    {
        $this->container['spaces'] = $spaces;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


