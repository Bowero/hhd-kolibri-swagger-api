<?php
/**
 * ContactCompany
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactCompany Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactCompany extends Company 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactCompany';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\Address',
        'display_name' => 'string',
        'linked_administrations' => '\Swagger\Client\Model\ContactCompanyFinancialAdministration[]',
        'linked_relation_groups' => '\Swagger\Client\Model\LinkedRelationGroup[]',
        'postal_address' => '\Swagger\Client\Model\Address',
        'postal_address_differs_visit_address' => 'bool',
        'future_address' => '\Swagger\Client\Model\Address',
        'future_address_activation_date_time' => '\DateTime',
        'social_media' => '\Swagger\Client\Model\SocialMediaTranslation[]',
        'spoken_languages' => '\Swagger\Client\Model\Language[]',
        'web_address' => 'string',
        'linked_folder_tree' => '\Swagger\Client\Model\LinkedFolderTree'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'display_name' => null,
        'linked_administrations' => null,
        'linked_relation_groups' => null,
        'postal_address' => null,
        'postal_address_differs_visit_address' => null,
        'future_address' => null,
        'future_address_activation_date_time' => 'date-time',
        'social_media' => null,
        'spoken_languages' => null,
        'web_address' => null,
        'linked_folder_tree' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'display_name' => 'displayName',
        'linked_administrations' => 'linkedAdministrations',
        'linked_relation_groups' => 'linkedRelationGroups',
        'postal_address' => 'postalAddress',
        'postal_address_differs_visit_address' => 'postalAddressDiffersVisitAddress',
        'future_address' => 'futureAddress',
        'future_address_activation_date_time' => 'futureAddressActivationDateTime',
        'social_media' => 'socialMedia',
        'spoken_languages' => 'spokenLanguages',
        'web_address' => 'webAddress',
        'linked_folder_tree' => 'linkedFolderTree'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'display_name' => 'setDisplayName',
        'linked_administrations' => 'setLinkedAdministrations',
        'linked_relation_groups' => 'setLinkedRelationGroups',
        'postal_address' => 'setPostalAddress',
        'postal_address_differs_visit_address' => 'setPostalAddressDiffersVisitAddress',
        'future_address' => 'setFutureAddress',
        'future_address_activation_date_time' => 'setFutureAddressActivationDateTime',
        'social_media' => 'setSocialMedia',
        'spoken_languages' => 'setSpokenLanguages',
        'web_address' => 'setWebAddress',
        'linked_folder_tree' => 'setLinkedFolderTree'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'display_name' => 'getDisplayName',
        'linked_administrations' => 'getLinkedAdministrations',
        'linked_relation_groups' => 'getLinkedRelationGroups',
        'postal_address' => 'getPostalAddress',
        'postal_address_differs_visit_address' => 'getPostalAddressDiffersVisitAddress',
        'future_address' => 'getFutureAddress',
        'future_address_activation_date_time' => 'getFutureAddressActivationDateTime',
        'social_media' => 'getSocialMedia',
        'spoken_languages' => 'getSpokenLanguages',
        'web_address' => 'getWebAddress',
        'linked_folder_tree' => 'getLinkedFolderTree'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['linked_administrations'] = isset($data['linked_administrations']) ? $data['linked_administrations'] : null;
        $this->container['linked_relation_groups'] = isset($data['linked_relation_groups']) ? $data['linked_relation_groups'] : null;
        $this->container['postal_address'] = isset($data['postal_address']) ? $data['postal_address'] : null;
        $this->container['postal_address_differs_visit_address'] = isset($data['postal_address_differs_visit_address']) ? $data['postal_address_differs_visit_address'] : null;
        $this->container['future_address'] = isset($data['future_address']) ? $data['future_address'] : null;
        $this->container['future_address_activation_date_time'] = isset($data['future_address_activation_date_time']) ? $data['future_address_activation_date_time'] : null;
        $this->container['social_media'] = isset($data['social_media']) ? $data['social_media'] : null;
        $this->container['spoken_languages'] = isset($data['spoken_languages']) ? $data['spoken_languages'] : null;
        $this->container['web_address'] = isset($data['web_address']) ? $data['web_address'] : null;
        $this->container['linked_folder_tree'] = isset($data['linked_folder_tree']) ? $data['linked_folder_tree'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets linked_administrations
     *
     * @return \Swagger\Client\Model\ContactCompanyFinancialAdministration[]
     */
    public function getLinkedAdministrations()
    {
        return $this->container['linked_administrations'];
    }

    /**
     * Sets linked_administrations
     *
     * @param \Swagger\Client\Model\ContactCompanyFinancialAdministration[] $linked_administrations linked_administrations
     *
     * @return $this
     */
    public function setLinkedAdministrations($linked_administrations)
    {
        $this->container['linked_administrations'] = $linked_administrations;

        return $this;
    }

    /**
     * Gets linked_relation_groups
     *
     * @return \Swagger\Client\Model\LinkedRelationGroup[]
     */
    public function getLinkedRelationGroups()
    {
        return $this->container['linked_relation_groups'];
    }

    /**
     * Sets linked_relation_groups
     *
     * @param \Swagger\Client\Model\LinkedRelationGroup[] $linked_relation_groups linked_relation_groups
     *
     * @return $this
     */
    public function setLinkedRelationGroups($linked_relation_groups)
    {
        $this->container['linked_relation_groups'] = $linked_relation_groups;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \Swagger\Client\Model\Address $postal_address postal_address
     *
     * @return $this
     */
    public function setPostalAddress($postal_address)
    {
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets postal_address_differs_visit_address
     *
     * @return bool
     */
    public function getPostalAddressDiffersVisitAddress()
    {
        return $this->container['postal_address_differs_visit_address'];
    }

    /**
     * Sets postal_address_differs_visit_address
     *
     * @param bool $postal_address_differs_visit_address postal_address_differs_visit_address
     *
     * @return $this
     */
    public function setPostalAddressDiffersVisitAddress($postal_address_differs_visit_address)
    {
        $this->container['postal_address_differs_visit_address'] = $postal_address_differs_visit_address;

        return $this;
    }

    /**
     * Gets future_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getFutureAddress()
    {
        return $this->container['future_address'];
    }

    /**
     * Sets future_address
     *
     * @param \Swagger\Client\Model\Address $future_address future_address
     *
     * @return $this
     */
    public function setFutureAddress($future_address)
    {
        $this->container['future_address'] = $future_address;

        return $this;
    }

    /**
     * Gets future_address_activation_date_time
     *
     * @return \DateTime
     */
    public function getFutureAddressActivationDateTime()
    {
        return $this->container['future_address_activation_date_time'];
    }

    /**
     * Sets future_address_activation_date_time
     *
     * @param \DateTime $future_address_activation_date_time future_address_activation_date_time
     *
     * @return $this
     */
    public function setFutureAddressActivationDateTime($future_address_activation_date_time)
    {
        $this->container['future_address_activation_date_time'] = $future_address_activation_date_time;

        return $this;
    }

    /**
     * Gets social_media
     *
     * @return \Swagger\Client\Model\SocialMediaTranslation[]
     */
    public function getSocialMedia()
    {
        return $this->container['social_media'];
    }

    /**
     * Sets social_media
     *
     * @param \Swagger\Client\Model\SocialMediaTranslation[] $social_media social_media
     *
     * @return $this
     */
    public function setSocialMedia($social_media)
    {
        $this->container['social_media'] = $social_media;

        return $this;
    }

    /**
     * Gets spoken_languages
     *
     * @return \Swagger\Client\Model\Language[]
     */
    public function getSpokenLanguages()
    {
        return $this->container['spoken_languages'];
    }

    /**
     * Sets spoken_languages
     *
     * @param \Swagger\Client\Model\Language[] $spoken_languages spoken_languages
     *
     * @return $this
     */
    public function setSpokenLanguages($spoken_languages)
    {
        $this->container['spoken_languages'] = $spoken_languages;

        return $this;
    }

    /**
     * Gets web_address
     *
     * @return string
     */
    public function getWebAddress()
    {
        return $this->container['web_address'];
    }

    /**
     * Sets web_address
     *
     * @param string $web_address web_address
     *
     * @return $this
     */
    public function setWebAddress($web_address)
    {
        $this->container['web_address'] = $web_address;

        return $this;
    }

    /**
     * Gets linked_folder_tree
     *
     * @return \Swagger\Client\Model\LinkedFolderTree
     */
    public function getLinkedFolderTree()
    {
        return $this->container['linked_folder_tree'];
    }

    /**
     * Sets linked_folder_tree
     *
     * @param \Swagger\Client\Model\LinkedFolderTree $linked_folder_tree linked_folder_tree
     *
     * @return $this
     */
    public function setLinkedFolderTree($linked_folder_tree)
    {
        $this->container['linked_folder_tree'] = $linked_folder_tree;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


