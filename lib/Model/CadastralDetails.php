<?php
/**
 * CadastralDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CadastralDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CadastralDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CadastralDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cadastral_lot_size' => '\Swagger\Client\Model\CadastralLotSize',
        'index_number' => 'string',
        'indication_estimated_size' => 'bool',
        'letter' => 'string',
        'municipal_code' => 'string',
        'municipality' => 'string',
        'parcel' => 'string',
        'reference_number' => 'string',
        'section' => 'string',
        'share' => 'string',
        'surface' => 'int',
        'surface_by_division' => 'int',
        'x_coordinate' => 'string',
        'y_coordinate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cadastral_lot_size' => null,
        'index_number' => null,
        'indication_estimated_size' => null,
        'letter' => null,
        'municipal_code' => null,
        'municipality' => null,
        'parcel' => null,
        'reference_number' => null,
        'section' => null,
        'share' => null,
        'surface' => 'int64',
        'surface_by_division' => 'int64',
        'x_coordinate' => null,
        'y_coordinate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cadastral_lot_size' => 'cadastralLotSize',
        'index_number' => 'indexNumber',
        'indication_estimated_size' => 'indicationEstimatedSize',
        'letter' => 'letter',
        'municipal_code' => 'municipalCode',
        'municipality' => 'municipality',
        'parcel' => 'parcel',
        'reference_number' => 'referenceNumber',
        'section' => 'section',
        'share' => 'share',
        'surface' => 'surface',
        'surface_by_division' => 'surfaceByDivision',
        'x_coordinate' => 'xCoordinate',
        'y_coordinate' => 'yCoordinate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cadastral_lot_size' => 'setCadastralLotSize',
        'index_number' => 'setIndexNumber',
        'indication_estimated_size' => 'setIndicationEstimatedSize',
        'letter' => 'setLetter',
        'municipal_code' => 'setMunicipalCode',
        'municipality' => 'setMunicipality',
        'parcel' => 'setParcel',
        'reference_number' => 'setReferenceNumber',
        'section' => 'setSection',
        'share' => 'setShare',
        'surface' => 'setSurface',
        'surface_by_division' => 'setSurfaceByDivision',
        'x_coordinate' => 'setXCoordinate',
        'y_coordinate' => 'setYCoordinate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cadastral_lot_size' => 'getCadastralLotSize',
        'index_number' => 'getIndexNumber',
        'indication_estimated_size' => 'getIndicationEstimatedSize',
        'letter' => 'getLetter',
        'municipal_code' => 'getMunicipalCode',
        'municipality' => 'getMunicipality',
        'parcel' => 'getParcel',
        'reference_number' => 'getReferenceNumber',
        'section' => 'getSection',
        'share' => 'getShare',
        'surface' => 'getSurface',
        'surface_by_division' => 'getSurfaceByDivision',
        'x_coordinate' => 'getXCoordinate',
        'y_coordinate' => 'getYCoordinate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cadastral_lot_size'] = isset($data['cadastral_lot_size']) ? $data['cadastral_lot_size'] : null;
        $this->container['index_number'] = isset($data['index_number']) ? $data['index_number'] : null;
        $this->container['indication_estimated_size'] = isset($data['indication_estimated_size']) ? $data['indication_estimated_size'] : null;
        $this->container['letter'] = isset($data['letter']) ? $data['letter'] : null;
        $this->container['municipal_code'] = isset($data['municipal_code']) ? $data['municipal_code'] : null;
        $this->container['municipality'] = isset($data['municipality']) ? $data['municipality'] : null;
        $this->container['parcel'] = isset($data['parcel']) ? $data['parcel'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['share'] = isset($data['share']) ? $data['share'] : null;
        $this->container['surface'] = isset($data['surface']) ? $data['surface'] : null;
        $this->container['surface_by_division'] = isset($data['surface_by_division']) ? $data['surface_by_division'] : null;
        $this->container['x_coordinate'] = isset($data['x_coordinate']) ? $data['x_coordinate'] : null;
        $this->container['y_coordinate'] = isset($data['y_coordinate']) ? $data['y_coordinate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cadastral_lot_size
     *
     * @return \Swagger\Client\Model\CadastralLotSize
     */
    public function getCadastralLotSize()
    {
        return $this->container['cadastral_lot_size'];
    }

    /**
     * Sets cadastral_lot_size
     *
     * @param \Swagger\Client\Model\CadastralLotSize $cadastral_lot_size cadastral_lot_size
     *
     * @return $this
     */
    public function setCadastralLotSize($cadastral_lot_size)
    {
        $this->container['cadastral_lot_size'] = $cadastral_lot_size;

        return $this;
    }

    /**
     * Gets index_number
     *
     * @return string
     */
    public function getIndexNumber()
    {
        return $this->container['index_number'];
    }

    /**
     * Sets index_number
     *
     * @param string $index_number index_number
     *
     * @return $this
     */
    public function setIndexNumber($index_number)
    {
        $this->container['index_number'] = $index_number;

        return $this;
    }

    /**
     * Gets indication_estimated_size
     *
     * @return bool
     */
    public function getIndicationEstimatedSize()
    {
        return $this->container['indication_estimated_size'];
    }

    /**
     * Sets indication_estimated_size
     *
     * @param bool $indication_estimated_size indication_estimated_size
     *
     * @return $this
     */
    public function setIndicationEstimatedSize($indication_estimated_size)
    {
        $this->container['indication_estimated_size'] = $indication_estimated_size;

        return $this;
    }

    /**
     * Gets letter
     *
     * @return string
     */
    public function getLetter()
    {
        return $this->container['letter'];
    }

    /**
     * Sets letter
     *
     * @param string $letter letter
     *
     * @return $this
     */
    public function setLetter($letter)
    {
        $this->container['letter'] = $letter;

        return $this;
    }

    /**
     * Gets municipal_code
     *
     * @return string
     */
    public function getMunicipalCode()
    {
        return $this->container['municipal_code'];
    }

    /**
     * Sets municipal_code
     *
     * @param string $municipal_code municipal_code
     *
     * @return $this
     */
    public function setMunicipalCode($municipal_code)
    {
        $this->container['municipal_code'] = $municipal_code;

        return $this;
    }

    /**
     * Gets municipality
     *
     * @return string
     */
    public function getMunicipality()
    {
        return $this->container['municipality'];
    }

    /**
     * Sets municipality
     *
     * @param string $municipality municipality
     *
     * @return $this
     */
    public function setMunicipality($municipality)
    {
        $this->container['municipality'] = $municipality;

        return $this;
    }

    /**
     * Gets parcel
     *
     * @return string
     */
    public function getParcel()
    {
        return $this->container['parcel'];
    }

    /**
     * Sets parcel
     *
     * @param string $parcel parcel
     *
     * @return $this
     */
    public function setParcel($parcel)
    {
        $this->container['parcel'] = $parcel;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number reference_number
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string $section section
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets share
     *
     * @return string
     */
    public function getShare()
    {
        return $this->container['share'];
    }

    /**
     * Sets share
     *
     * @param string $share share
     *
     * @return $this
     */
    public function setShare($share)
    {
        $this->container['share'] = $share;

        return $this;
    }

    /**
     * Gets surface
     *
     * @return int
     */
    public function getSurface()
    {
        return $this->container['surface'];
    }

    /**
     * Sets surface
     *
     * @param int $surface surface
     *
     * @return $this
     */
    public function setSurface($surface)
    {
        $this->container['surface'] = $surface;

        return $this;
    }

    /**
     * Gets surface_by_division
     *
     * @return int
     */
    public function getSurfaceByDivision()
    {
        return $this->container['surface_by_division'];
    }

    /**
     * Sets surface_by_division
     *
     * @param int $surface_by_division surface_by_division
     *
     * @return $this
     */
    public function setSurfaceByDivision($surface_by_division)
    {
        $this->container['surface_by_division'] = $surface_by_division;

        return $this;
    }

    /**
     * Gets x_coordinate
     *
     * @return string
     */
    public function getXCoordinate()
    {
        return $this->container['x_coordinate'];
    }

    /**
     * Sets x_coordinate
     *
     * @param string $x_coordinate x_coordinate
     *
     * @return $this
     */
    public function setXCoordinate($x_coordinate)
    {
        $this->container['x_coordinate'] = $x_coordinate;

        return $this;
    }

    /**
     * Gets y_coordinate
     *
     * @return string
     */
    public function getYCoordinate()
    {
        return $this->container['y_coordinate'];
    }

    /**
     * Sets y_coordinate
     *
     * @param string $y_coordinate y_coordinate
     *
     * @return $this
     */
    public function setYCoordinate($y_coordinate)
    {
        $this->container['y_coordinate'] = $y_coordinate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


