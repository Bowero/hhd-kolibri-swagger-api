<?php
/**
 * PublicationSnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PublicationSnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicationSnapShot implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublicationSnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'category' => '\Swagger\Client\Model\MediaPartnerCategory',
        'date_time_confirmed' => '\DateTime',
        'date_time_created' => '\DateTime',
        'date_time_modified' => '\DateTime',
        'details_url' => 'string',
        'is_favorite' => 'bool',
        'is_obligatory' => 'bool',
        'is_paid_service' => 'bool',
        'logo_url' => 'string',
        'media_partner_id' => 'string',
        'media_partner_is_active' => 'bool',
        'media_partner_name' => 'string',
        'publication_status' => '\Swagger\Client\Model\PublicationStatus',
        'publication_withdrawal_allowed' => 'bool',
        'status_message' => 'string',
        'media_contract_status' => '\Swagger\Client\Model\MediaContractStatus',
        'is_active' => 'bool',
        'is_auto_publish' => 'bool',
        'real_estate_agency_id' => 'string',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'linked_created_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_modified_by' => '\Swagger\Client\Model\LinkedEmployee'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'guid',
        'category' => null,
        'date_time_confirmed' => 'date-time',
        'date_time_created' => 'date-time',
        'date_time_modified' => 'date-time',
        'details_url' => null,
        'is_favorite' => null,
        'is_obligatory' => null,
        'is_paid_service' => null,
        'logo_url' => null,
        'media_partner_id' => 'guid',
        'media_partner_is_active' => null,
        'media_partner_name' => null,
        'publication_status' => null,
        'publication_withdrawal_allowed' => null,
        'status_message' => null,
        'media_contract_status' => null,
        'is_active' => null,
        'is_auto_publish' => null,
        'real_estate_agency_id' => 'guid',
        'linked_assignment' => null,
        'linked_created_by' => null,
        'linked_modified_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category' => 'category',
        'date_time_confirmed' => 'dateTimeConfirmed',
        'date_time_created' => 'dateTimeCreated',
        'date_time_modified' => 'dateTimeModified',
        'details_url' => 'detailsUrl',
        'is_favorite' => 'isFavorite',
        'is_obligatory' => 'isObligatory',
        'is_paid_service' => 'isPaidService',
        'logo_url' => 'logoUrl',
        'media_partner_id' => 'mediaPartnerId',
        'media_partner_is_active' => 'mediaPartnerIsActive',
        'media_partner_name' => 'mediaPartnerName',
        'publication_status' => 'publicationStatus',
        'publication_withdrawal_allowed' => 'publicationWithdrawalAllowed',
        'status_message' => 'statusMessage',
        'media_contract_status' => 'mediaContractStatus',
        'is_active' => 'isActive',
        'is_auto_publish' => 'isAutoPublish',
        'real_estate_agency_id' => 'realEstateAgencyId',
        'linked_assignment' => 'linkedAssignment',
        'linked_created_by' => 'linkedCreatedBy',
        'linked_modified_by' => 'linkedModifiedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category' => 'setCategory',
        'date_time_confirmed' => 'setDateTimeConfirmed',
        'date_time_created' => 'setDateTimeCreated',
        'date_time_modified' => 'setDateTimeModified',
        'details_url' => 'setDetailsUrl',
        'is_favorite' => 'setIsFavorite',
        'is_obligatory' => 'setIsObligatory',
        'is_paid_service' => 'setIsPaidService',
        'logo_url' => 'setLogoUrl',
        'media_partner_id' => 'setMediaPartnerId',
        'media_partner_is_active' => 'setMediaPartnerIsActive',
        'media_partner_name' => 'setMediaPartnerName',
        'publication_status' => 'setPublicationStatus',
        'publication_withdrawal_allowed' => 'setPublicationWithdrawalAllowed',
        'status_message' => 'setStatusMessage',
        'media_contract_status' => 'setMediaContractStatus',
        'is_active' => 'setIsActive',
        'is_auto_publish' => 'setIsAutoPublish',
        'real_estate_agency_id' => 'setRealEstateAgencyId',
        'linked_assignment' => 'setLinkedAssignment',
        'linked_created_by' => 'setLinkedCreatedBy',
        'linked_modified_by' => 'setLinkedModifiedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category' => 'getCategory',
        'date_time_confirmed' => 'getDateTimeConfirmed',
        'date_time_created' => 'getDateTimeCreated',
        'date_time_modified' => 'getDateTimeModified',
        'details_url' => 'getDetailsUrl',
        'is_favorite' => 'getIsFavorite',
        'is_obligatory' => 'getIsObligatory',
        'is_paid_service' => 'getIsPaidService',
        'logo_url' => 'getLogoUrl',
        'media_partner_id' => 'getMediaPartnerId',
        'media_partner_is_active' => 'getMediaPartnerIsActive',
        'media_partner_name' => 'getMediaPartnerName',
        'publication_status' => 'getPublicationStatus',
        'publication_withdrawal_allowed' => 'getPublicationWithdrawalAllowed',
        'status_message' => 'getStatusMessage',
        'media_contract_status' => 'getMediaContractStatus',
        'is_active' => 'getIsActive',
        'is_auto_publish' => 'getIsAutoPublish',
        'real_estate_agency_id' => 'getRealEstateAgencyId',
        'linked_assignment' => 'getLinkedAssignment',
        'linked_created_by' => 'getLinkedCreatedBy',
        'linked_modified_by' => 'getLinkedModifiedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['date_time_confirmed'] = isset($data['date_time_confirmed']) ? $data['date_time_confirmed'] : null;
        $this->container['date_time_created'] = isset($data['date_time_created']) ? $data['date_time_created'] : null;
        $this->container['date_time_modified'] = isset($data['date_time_modified']) ? $data['date_time_modified'] : null;
        $this->container['details_url'] = isset($data['details_url']) ? $data['details_url'] : null;
        $this->container['is_favorite'] = isset($data['is_favorite']) ? $data['is_favorite'] : null;
        $this->container['is_obligatory'] = isset($data['is_obligatory']) ? $data['is_obligatory'] : null;
        $this->container['is_paid_service'] = isset($data['is_paid_service']) ? $data['is_paid_service'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['media_partner_id'] = isset($data['media_partner_id']) ? $data['media_partner_id'] : null;
        $this->container['media_partner_is_active'] = isset($data['media_partner_is_active']) ? $data['media_partner_is_active'] : null;
        $this->container['media_partner_name'] = isset($data['media_partner_name']) ? $data['media_partner_name'] : null;
        $this->container['publication_status'] = isset($data['publication_status']) ? $data['publication_status'] : null;
        $this->container['publication_withdrawal_allowed'] = isset($data['publication_withdrawal_allowed']) ? $data['publication_withdrawal_allowed'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['media_contract_status'] = isset($data['media_contract_status']) ? $data['media_contract_status'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_auto_publish'] = isset($data['is_auto_publish']) ? $data['is_auto_publish'] : null;
        $this->container['real_estate_agency_id'] = isset($data['real_estate_agency_id']) ? $data['real_estate_agency_id'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['linked_created_by'] = isset($data['linked_created_by']) ? $data['linked_created_by'] : null;
        $this->container['linked_modified_by'] = isset($data['linked_modified_by']) ? $data['linked_modified_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['is_favorite'] === null) {
            $invalidProperties[] = "'is_favorite' can't be null";
        }
        if ($this->container['is_obligatory'] === null) {
            $invalidProperties[] = "'is_obligatory' can't be null";
        }
        if ($this->container['is_paid_service'] === null) {
            $invalidProperties[] = "'is_paid_service' can't be null";
        }
        if ($this->container['media_partner_id'] === null) {
            $invalidProperties[] = "'media_partner_id' can't be null";
        }
        if ($this->container['media_partner_is_active'] === null) {
            $invalidProperties[] = "'media_partner_is_active' can't be null";
        }
        if ($this->container['publication_status'] === null) {
            $invalidProperties[] = "'publication_status' can't be null";
        }
        if ($this->container['publication_withdrawal_allowed'] === null) {
            $invalidProperties[] = "'publication_withdrawal_allowed' can't be null";
        }
        if ($this->container['media_contract_status'] === null) {
            $invalidProperties[] = "'media_contract_status' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['is_auto_publish'] === null) {
            $invalidProperties[] = "'is_auto_publish' can't be null";
        }
        if ($this->container['real_estate_agency_id'] === null) {
            $invalidProperties[] = "'real_estate_agency_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\MediaPartnerCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\MediaPartnerCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets date_time_confirmed
     *
     * @return \DateTime
     */
    public function getDateTimeConfirmed()
    {
        return $this->container['date_time_confirmed'];
    }

    /**
     * Sets date_time_confirmed
     *
     * @param \DateTime $date_time_confirmed date_time_confirmed
     *
     * @return $this
     */
    public function setDateTimeConfirmed($date_time_confirmed)
    {
        $this->container['date_time_confirmed'] = $date_time_confirmed;

        return $this;
    }

    /**
     * Gets date_time_created
     *
     * @return \DateTime
     */
    public function getDateTimeCreated()
    {
        return $this->container['date_time_created'];
    }

    /**
     * Sets date_time_created
     *
     * @param \DateTime $date_time_created date_time_created
     *
     * @return $this
     */
    public function setDateTimeCreated($date_time_created)
    {
        $this->container['date_time_created'] = $date_time_created;

        return $this;
    }

    /**
     * Gets date_time_modified
     *
     * @return \DateTime
     */
    public function getDateTimeModified()
    {
        return $this->container['date_time_modified'];
    }

    /**
     * Sets date_time_modified
     *
     * @param \DateTime $date_time_modified date_time_modified
     *
     * @return $this
     */
    public function setDateTimeModified($date_time_modified)
    {
        $this->container['date_time_modified'] = $date_time_modified;

        return $this;
    }

    /**
     * Gets details_url
     *
     * @return string
     */
    public function getDetailsUrl()
    {
        return $this->container['details_url'];
    }

    /**
     * Sets details_url
     *
     * @param string $details_url details_url
     *
     * @return $this
     */
    public function setDetailsUrl($details_url)
    {
        $this->container['details_url'] = $details_url;

        return $this;
    }

    /**
     * Gets is_favorite
     *
     * @return bool
     */
    public function getIsFavorite()
    {
        return $this->container['is_favorite'];
    }

    /**
     * Sets is_favorite
     *
     * @param bool $is_favorite is_favorite
     *
     * @return $this
     */
    public function setIsFavorite($is_favorite)
    {
        $this->container['is_favorite'] = $is_favorite;

        return $this;
    }

    /**
     * Gets is_obligatory
     *
     * @return bool
     */
    public function getIsObligatory()
    {
        return $this->container['is_obligatory'];
    }

    /**
     * Sets is_obligatory
     *
     * @param bool $is_obligatory is_obligatory
     *
     * @return $this
     */
    public function setIsObligatory($is_obligatory)
    {
        $this->container['is_obligatory'] = $is_obligatory;

        return $this;
    }

    /**
     * Gets is_paid_service
     *
     * @return bool
     */
    public function getIsPaidService()
    {
        return $this->container['is_paid_service'];
    }

    /**
     * Sets is_paid_service
     *
     * @param bool $is_paid_service is_paid_service
     *
     * @return $this
     */
    public function setIsPaidService($is_paid_service)
    {
        $this->container['is_paid_service'] = $is_paid_service;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url logo_url
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets media_partner_id
     *
     * @return string
     */
    public function getMediaPartnerId()
    {
        return $this->container['media_partner_id'];
    }

    /**
     * Sets media_partner_id
     *
     * @param string $media_partner_id media_partner_id
     *
     * @return $this
     */
    public function setMediaPartnerId($media_partner_id)
    {
        $this->container['media_partner_id'] = $media_partner_id;

        return $this;
    }

    /**
     * Gets media_partner_is_active
     *
     * @return bool
     */
    public function getMediaPartnerIsActive()
    {
        return $this->container['media_partner_is_active'];
    }

    /**
     * Sets media_partner_is_active
     *
     * @param bool $media_partner_is_active media_partner_is_active
     *
     * @return $this
     */
    public function setMediaPartnerIsActive($media_partner_is_active)
    {
        $this->container['media_partner_is_active'] = $media_partner_is_active;

        return $this;
    }

    /**
     * Gets media_partner_name
     *
     * @return string
     */
    public function getMediaPartnerName()
    {
        return $this->container['media_partner_name'];
    }

    /**
     * Sets media_partner_name
     *
     * @param string $media_partner_name media_partner_name
     *
     * @return $this
     */
    public function setMediaPartnerName($media_partner_name)
    {
        $this->container['media_partner_name'] = $media_partner_name;

        return $this;
    }

    /**
     * Gets publication_status
     *
     * @return \Swagger\Client\Model\PublicationStatus
     */
    public function getPublicationStatus()
    {
        return $this->container['publication_status'];
    }

    /**
     * Sets publication_status
     *
     * @param \Swagger\Client\Model\PublicationStatus $publication_status publication_status
     *
     * @return $this
     */
    public function setPublicationStatus($publication_status)
    {
        $this->container['publication_status'] = $publication_status;

        return $this;
    }

    /**
     * Gets publication_withdrawal_allowed
     *
     * @return bool
     */
    public function getPublicationWithdrawalAllowed()
    {
        return $this->container['publication_withdrawal_allowed'];
    }

    /**
     * Sets publication_withdrawal_allowed
     *
     * @param bool $publication_withdrawal_allowed publication_withdrawal_allowed
     *
     * @return $this
     */
    public function setPublicationWithdrawalAllowed($publication_withdrawal_allowed)
    {
        $this->container['publication_withdrawal_allowed'] = $publication_withdrawal_allowed;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string $status_message status_message
     *
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets media_contract_status
     *
     * @return \Swagger\Client\Model\MediaContractStatus
     */
    public function getMediaContractStatus()
    {
        return $this->container['media_contract_status'];
    }

    /**
     * Sets media_contract_status
     *
     * @param \Swagger\Client\Model\MediaContractStatus $media_contract_status media_contract_status
     *
     * @return $this
     */
    public function setMediaContractStatus($media_contract_status)
    {
        $this->container['media_contract_status'] = $media_contract_status;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_auto_publish
     *
     * @return bool
     */
    public function getIsAutoPublish()
    {
        return $this->container['is_auto_publish'];
    }

    /**
     * Sets is_auto_publish
     *
     * @param bool $is_auto_publish is_auto_publish
     *
     * @return $this
     */
    public function setIsAutoPublish($is_auto_publish)
    {
        $this->container['is_auto_publish'] = $is_auto_publish;

        return $this;
    }

    /**
     * Gets real_estate_agency_id
     *
     * @return string
     */
    public function getRealEstateAgencyId()
    {
        return $this->container['real_estate_agency_id'];
    }

    /**
     * Sets real_estate_agency_id
     *
     * @param string $real_estate_agency_id real_estate_agency_id
     *
     * @return $this
     */
    public function setRealEstateAgencyId($real_estate_agency_id)
    {
        $this->container['real_estate_agency_id'] = $real_estate_agency_id;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets linked_created_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedCreatedBy()
    {
        return $this->container['linked_created_by'];
    }

    /**
     * Sets linked_created_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_created_by linked_created_by
     *
     * @return $this
     */
    public function setLinkedCreatedBy($linked_created_by)
    {
        $this->container['linked_created_by'] = $linked_created_by;

        return $this;
    }

    /**
     * Gets linked_modified_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedModifiedBy()
    {
        return $this->container['linked_modified_by'];
    }

    /**
     * Sets linked_modified_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_modified_by linked_modified_by
     *
     * @return $this
     */
    public function setLinkedModifiedBy($linked_modified_by)
    {
        $this->container['linked_modified_by'] = $linked_modified_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


