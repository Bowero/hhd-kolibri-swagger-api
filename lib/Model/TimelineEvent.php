<?php
/**
 * TimelineEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * TimelineEvent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimelineEvent extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimelineEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_denied_for_current_user' => 'bool',
        'action_sub_type' => '\Swagger\Client\Model\TimelineActionSubType',
        'action_type' => '\Swagger\Client\Model\TimelineActionType',
        'all_day_event' => 'bool',
        'category_id' => 'string',
        'completed_percentage' => 'double',
        'currency' => 'string',
        'date' => '\DateTime',
        'date_time_created' => '\DateTime',
        'date_time_modified' => '\DateTime',
        'end_date' => '\DateTime',
        'invoice_number' => 'string',
        'invoice_status' => '\Swagger\Client\Model\InvoiceStatus',
        'invoice_total_amount' => 'float',
        'is_active' => 'bool',
        'is_canceled' => 'bool',
        'is_completed' => 'bool',
        'is_confirmed' => 'bool',
        'is_private' => 'bool',
        'is_recurring' => 'bool',
        'linked_assignments' => '\Swagger\Client\Model\LinkedAssignment[]',
        'linked_created_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_employees' => '\Swagger\Client\Model\LinkedEmployee[]',
        'linked_modified_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_relations' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_messages' => '\Swagger\Client\Model\LinkedMessage[]',
        'old_price' => 'float',
        'price' => 'float',
        'priority' => '\Swagger\Client\Model\Priority',
        'subject' => 'string',
        'task_status' => '\Swagger\Client\Model\TaskStatus',
        'withdraw_reason' => '\Swagger\Client\Model\WithdrawReason',
        'bid_date_time' => '\DateTime',
        'bid_valid_until' => '\DateTime',
        'denied_date_time' => '\DateTime',
        'accepted_date_time' => '\DateTime',
        'bid_status' => '\Swagger\Client\Model\BidStatus',
        'linked_bid' => '\Swagger\Client\Model\LinkedBid'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_denied_for_current_user' => null,
        'action_sub_type' => null,
        'action_type' => null,
        'all_day_event' => null,
        'category_id' => 'guid',
        'completed_percentage' => 'double',
        'currency' => null,
        'date' => 'date-time',
        'date_time_created' => 'date-time',
        'date_time_modified' => 'date-time',
        'end_date' => 'date-time',
        'invoice_number' => null,
        'invoice_status' => null,
        'invoice_total_amount' => 'decimal',
        'is_active' => null,
        'is_canceled' => null,
        'is_completed' => null,
        'is_confirmed' => null,
        'is_private' => null,
        'is_recurring' => null,
        'linked_assignments' => null,
        'linked_created_by' => null,
        'linked_employees' => null,
        'linked_modified_by' => null,
        'linked_relations' => null,
        'linked_messages' => null,
        'old_price' => 'decimal',
        'price' => 'decimal',
        'priority' => null,
        'subject' => null,
        'task_status' => null,
        'withdraw_reason' => null,
        'bid_date_time' => 'date-time',
        'bid_valid_until' => 'date-time',
        'denied_date_time' => 'date-time',
        'accepted_date_time' => 'date-time',
        'bid_status' => null,
        'linked_bid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_denied_for_current_user' => 'accessDeniedForCurrentUser',
        'action_sub_type' => 'actionSubType',
        'action_type' => 'actionType',
        'all_day_event' => 'allDayEvent',
        'category_id' => 'categoryId',
        'completed_percentage' => 'completedPercentage',
        'currency' => 'currency',
        'date' => 'date',
        'date_time_created' => 'dateTimeCreated',
        'date_time_modified' => 'dateTimeModified',
        'end_date' => 'endDate',
        'invoice_number' => 'invoiceNumber',
        'invoice_status' => 'invoiceStatus',
        'invoice_total_amount' => 'invoiceTotalAmount',
        'is_active' => 'isActive',
        'is_canceled' => 'isCanceled',
        'is_completed' => 'isCompleted',
        'is_confirmed' => 'isConfirmed',
        'is_private' => 'isPrivate',
        'is_recurring' => 'isRecurring',
        'linked_assignments' => 'linkedAssignments',
        'linked_created_by' => 'linkedCreatedBy',
        'linked_employees' => 'linkedEmployees',
        'linked_modified_by' => 'linkedModifiedBy',
        'linked_relations' => 'linkedRelations',
        'linked_messages' => 'linkedMessages',
        'old_price' => 'oldPrice',
        'price' => 'price',
        'priority' => 'priority',
        'subject' => 'subject',
        'task_status' => 'taskStatus',
        'withdraw_reason' => 'withdrawReason',
        'bid_date_time' => 'bidDateTime',
        'bid_valid_until' => 'bidValidUntil',
        'denied_date_time' => 'deniedDateTime',
        'accepted_date_time' => 'acceptedDateTime',
        'bid_status' => 'bidStatus',
        'linked_bid' => 'linkedBid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_denied_for_current_user' => 'setAccessDeniedForCurrentUser',
        'action_sub_type' => 'setActionSubType',
        'action_type' => 'setActionType',
        'all_day_event' => 'setAllDayEvent',
        'category_id' => 'setCategoryId',
        'completed_percentage' => 'setCompletedPercentage',
        'currency' => 'setCurrency',
        'date' => 'setDate',
        'date_time_created' => 'setDateTimeCreated',
        'date_time_modified' => 'setDateTimeModified',
        'end_date' => 'setEndDate',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_status' => 'setInvoiceStatus',
        'invoice_total_amount' => 'setInvoiceTotalAmount',
        'is_active' => 'setIsActive',
        'is_canceled' => 'setIsCanceled',
        'is_completed' => 'setIsCompleted',
        'is_confirmed' => 'setIsConfirmed',
        'is_private' => 'setIsPrivate',
        'is_recurring' => 'setIsRecurring',
        'linked_assignments' => 'setLinkedAssignments',
        'linked_created_by' => 'setLinkedCreatedBy',
        'linked_employees' => 'setLinkedEmployees',
        'linked_modified_by' => 'setLinkedModifiedBy',
        'linked_relations' => 'setLinkedRelations',
        'linked_messages' => 'setLinkedMessages',
        'old_price' => 'setOldPrice',
        'price' => 'setPrice',
        'priority' => 'setPriority',
        'subject' => 'setSubject',
        'task_status' => 'setTaskStatus',
        'withdraw_reason' => 'setWithdrawReason',
        'bid_date_time' => 'setBidDateTime',
        'bid_valid_until' => 'setBidValidUntil',
        'denied_date_time' => 'setDeniedDateTime',
        'accepted_date_time' => 'setAcceptedDateTime',
        'bid_status' => 'setBidStatus',
        'linked_bid' => 'setLinkedBid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_denied_for_current_user' => 'getAccessDeniedForCurrentUser',
        'action_sub_type' => 'getActionSubType',
        'action_type' => 'getActionType',
        'all_day_event' => 'getAllDayEvent',
        'category_id' => 'getCategoryId',
        'completed_percentage' => 'getCompletedPercentage',
        'currency' => 'getCurrency',
        'date' => 'getDate',
        'date_time_created' => 'getDateTimeCreated',
        'date_time_modified' => 'getDateTimeModified',
        'end_date' => 'getEndDate',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_status' => 'getInvoiceStatus',
        'invoice_total_amount' => 'getInvoiceTotalAmount',
        'is_active' => 'getIsActive',
        'is_canceled' => 'getIsCanceled',
        'is_completed' => 'getIsCompleted',
        'is_confirmed' => 'getIsConfirmed',
        'is_private' => 'getIsPrivate',
        'is_recurring' => 'getIsRecurring',
        'linked_assignments' => 'getLinkedAssignments',
        'linked_created_by' => 'getLinkedCreatedBy',
        'linked_employees' => 'getLinkedEmployees',
        'linked_modified_by' => 'getLinkedModifiedBy',
        'linked_relations' => 'getLinkedRelations',
        'linked_messages' => 'getLinkedMessages',
        'old_price' => 'getOldPrice',
        'price' => 'getPrice',
        'priority' => 'getPriority',
        'subject' => 'getSubject',
        'task_status' => 'getTaskStatus',
        'withdraw_reason' => 'getWithdrawReason',
        'bid_date_time' => 'getBidDateTime',
        'bid_valid_until' => 'getBidValidUntil',
        'denied_date_time' => 'getDeniedDateTime',
        'accepted_date_time' => 'getAcceptedDateTime',
        'bid_status' => 'getBidStatus',
        'linked_bid' => 'getLinkedBid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['access_denied_for_current_user'] = isset($data['access_denied_for_current_user']) ? $data['access_denied_for_current_user'] : null;
        $this->container['action_sub_type'] = isset($data['action_sub_type']) ? $data['action_sub_type'] : null;
        $this->container['action_type'] = isset($data['action_type']) ? $data['action_type'] : null;
        $this->container['all_day_event'] = isset($data['all_day_event']) ? $data['all_day_event'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['completed_percentage'] = isset($data['completed_percentage']) ? $data['completed_percentage'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['date_time_created'] = isset($data['date_time_created']) ? $data['date_time_created'] : null;
        $this->container['date_time_modified'] = isset($data['date_time_modified']) ? $data['date_time_modified'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_status'] = isset($data['invoice_status']) ? $data['invoice_status'] : null;
        $this->container['invoice_total_amount'] = isset($data['invoice_total_amount']) ? $data['invoice_total_amount'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_canceled'] = isset($data['is_canceled']) ? $data['is_canceled'] : null;
        $this->container['is_completed'] = isset($data['is_completed']) ? $data['is_completed'] : null;
        $this->container['is_confirmed'] = isset($data['is_confirmed']) ? $data['is_confirmed'] : null;
        $this->container['is_private'] = isset($data['is_private']) ? $data['is_private'] : null;
        $this->container['is_recurring'] = isset($data['is_recurring']) ? $data['is_recurring'] : null;
        $this->container['linked_assignments'] = isset($data['linked_assignments']) ? $data['linked_assignments'] : null;
        $this->container['linked_created_by'] = isset($data['linked_created_by']) ? $data['linked_created_by'] : null;
        $this->container['linked_employees'] = isset($data['linked_employees']) ? $data['linked_employees'] : null;
        $this->container['linked_modified_by'] = isset($data['linked_modified_by']) ? $data['linked_modified_by'] : null;
        $this->container['linked_relations'] = isset($data['linked_relations']) ? $data['linked_relations'] : null;
        $this->container['linked_messages'] = isset($data['linked_messages']) ? $data['linked_messages'] : null;
        $this->container['old_price'] = isset($data['old_price']) ? $data['old_price'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['task_status'] = isset($data['task_status']) ? $data['task_status'] : null;
        $this->container['withdraw_reason'] = isset($data['withdraw_reason']) ? $data['withdraw_reason'] : null;
        $this->container['bid_date_time'] = isset($data['bid_date_time']) ? $data['bid_date_time'] : null;
        $this->container['bid_valid_until'] = isset($data['bid_valid_until']) ? $data['bid_valid_until'] : null;
        $this->container['denied_date_time'] = isset($data['denied_date_time']) ? $data['denied_date_time'] : null;
        $this->container['accepted_date_time'] = isset($data['accepted_date_time']) ? $data['accepted_date_time'] : null;
        $this->container['bid_status'] = isset($data['bid_status']) ? $data['bid_status'] : null;
        $this->container['linked_bid'] = isset($data['linked_bid']) ? $data['linked_bid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_denied_for_current_user
     *
     * @return bool
     */
    public function getAccessDeniedForCurrentUser()
    {
        return $this->container['access_denied_for_current_user'];
    }

    /**
     * Sets access_denied_for_current_user
     *
     * @param bool $access_denied_for_current_user access_denied_for_current_user
     *
     * @return $this
     */
    public function setAccessDeniedForCurrentUser($access_denied_for_current_user)
    {
        $this->container['access_denied_for_current_user'] = $access_denied_for_current_user;

        return $this;
    }

    /**
     * Gets action_sub_type
     *
     * @return \Swagger\Client\Model\TimelineActionSubType
     */
    public function getActionSubType()
    {
        return $this->container['action_sub_type'];
    }

    /**
     * Sets action_sub_type
     *
     * @param \Swagger\Client\Model\TimelineActionSubType $action_sub_type action_sub_type
     *
     * @return $this
     */
    public function setActionSubType($action_sub_type)
    {
        $this->container['action_sub_type'] = $action_sub_type;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return \Swagger\Client\Model\TimelineActionType
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param \Swagger\Client\Model\TimelineActionType $action_type action_type
     *
     * @return $this
     */
    public function setActionType($action_type)
    {
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets all_day_event
     *
     * @return bool
     */
    public function getAllDayEvent()
    {
        return $this->container['all_day_event'];
    }

    /**
     * Sets all_day_event
     *
     * @param bool $all_day_event all_day_event
     *
     * @return $this
     */
    public function setAllDayEvent($all_day_event)
    {
        $this->container['all_day_event'] = $all_day_event;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets completed_percentage
     *
     * @return double
     */
    public function getCompletedPercentage()
    {
        return $this->container['completed_percentage'];
    }

    /**
     * Sets completed_percentage
     *
     * @param double $completed_percentage completed_percentage
     *
     * @return $this
     */
    public function setCompletedPercentage($completed_percentage)
    {
        $this->container['completed_percentage'] = $completed_percentage;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_time_created
     *
     * @return \DateTime
     */
    public function getDateTimeCreated()
    {
        return $this->container['date_time_created'];
    }

    /**
     * Sets date_time_created
     *
     * @param \DateTime $date_time_created date_time_created
     *
     * @return $this
     */
    public function setDateTimeCreated($date_time_created)
    {
        $this->container['date_time_created'] = $date_time_created;

        return $this;
    }

    /**
     * Gets date_time_modified
     *
     * @return \DateTime
     */
    public function getDateTimeModified()
    {
        return $this->container['date_time_modified'];
    }

    /**
     * Sets date_time_modified
     *
     * @param \DateTime $date_time_modified date_time_modified
     *
     * @return $this
     */
    public function setDateTimeModified($date_time_modified)
    {
        $this->container['date_time_modified'] = $date_time_modified;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_status
     *
     * @return \Swagger\Client\Model\InvoiceStatus
     */
    public function getInvoiceStatus()
    {
        return $this->container['invoice_status'];
    }

    /**
     * Sets invoice_status
     *
     * @param \Swagger\Client\Model\InvoiceStatus $invoice_status invoice_status
     *
     * @return $this
     */
    public function setInvoiceStatus($invoice_status)
    {
        $this->container['invoice_status'] = $invoice_status;

        return $this;
    }

    /**
     * Gets invoice_total_amount
     *
     * @return float
     */
    public function getInvoiceTotalAmount()
    {
        return $this->container['invoice_total_amount'];
    }

    /**
     * Sets invoice_total_amount
     *
     * @param float $invoice_total_amount invoice_total_amount
     *
     * @return $this
     */
    public function setInvoiceTotalAmount($invoice_total_amount)
    {
        $this->container['invoice_total_amount'] = $invoice_total_amount;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_canceled
     *
     * @return bool
     */
    public function getIsCanceled()
    {
        return $this->container['is_canceled'];
    }

    /**
     * Sets is_canceled
     *
     * @param bool $is_canceled is_canceled
     *
     * @return $this
     */
    public function setIsCanceled($is_canceled)
    {
        $this->container['is_canceled'] = $is_canceled;

        return $this;
    }

    /**
     * Gets is_completed
     *
     * @return bool
     */
    public function getIsCompleted()
    {
        return $this->container['is_completed'];
    }

    /**
     * Sets is_completed
     *
     * @param bool $is_completed is_completed
     *
     * @return $this
     */
    public function setIsCompleted($is_completed)
    {
        $this->container['is_completed'] = $is_completed;

        return $this;
    }

    /**
     * Gets is_confirmed
     *
     * @return bool
     */
    public function getIsConfirmed()
    {
        return $this->container['is_confirmed'];
    }

    /**
     * Sets is_confirmed
     *
     * @param bool $is_confirmed is_confirmed
     *
     * @return $this
     */
    public function setIsConfirmed($is_confirmed)
    {
        $this->container['is_confirmed'] = $is_confirmed;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool $is_private is_private
     *
     * @return $this
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return bool
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param bool $is_recurring is_recurring
     *
     * @return $this
     */
    public function setIsRecurring($is_recurring)
    {
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets linked_assignments
     *
     * @return \Swagger\Client\Model\LinkedAssignment[]
     */
    public function getLinkedAssignments()
    {
        return $this->container['linked_assignments'];
    }

    /**
     * Sets linked_assignments
     *
     * @param \Swagger\Client\Model\LinkedAssignment[] $linked_assignments linked_assignments
     *
     * @return $this
     */
    public function setLinkedAssignments($linked_assignments)
    {
        $this->container['linked_assignments'] = $linked_assignments;

        return $this;
    }

    /**
     * Gets linked_created_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedCreatedBy()
    {
        return $this->container['linked_created_by'];
    }

    /**
     * Sets linked_created_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_created_by linked_created_by
     *
     * @return $this
     */
    public function setLinkedCreatedBy($linked_created_by)
    {
        $this->container['linked_created_by'] = $linked_created_by;

        return $this;
    }

    /**
     * Gets linked_employees
     *
     * @return \Swagger\Client\Model\LinkedEmployee[]
     */
    public function getLinkedEmployees()
    {
        return $this->container['linked_employees'];
    }

    /**
     * Sets linked_employees
     *
     * @param \Swagger\Client\Model\LinkedEmployee[] $linked_employees linked_employees
     *
     * @return $this
     */
    public function setLinkedEmployees($linked_employees)
    {
        $this->container['linked_employees'] = $linked_employees;

        return $this;
    }

    /**
     * Gets linked_modified_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedModifiedBy()
    {
        return $this->container['linked_modified_by'];
    }

    /**
     * Sets linked_modified_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_modified_by linked_modified_by
     *
     * @return $this
     */
    public function setLinkedModifiedBy($linked_modified_by)
    {
        $this->container['linked_modified_by'] = $linked_modified_by;

        return $this;
    }

    /**
     * Gets linked_relations
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedRelations()
    {
        return $this->container['linked_relations'];
    }

    /**
     * Sets linked_relations
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_relations linked_relations
     *
     * @return $this
     */
    public function setLinkedRelations($linked_relations)
    {
        $this->container['linked_relations'] = $linked_relations;

        return $this;
    }

    /**
     * Gets linked_messages
     *
     * @return \Swagger\Client\Model\LinkedMessage[]
     */
    public function getLinkedMessages()
    {
        return $this->container['linked_messages'];
    }

    /**
     * Sets linked_messages
     *
     * @param \Swagger\Client\Model\LinkedMessage[] $linked_messages linked_messages
     *
     * @return $this
     */
    public function setLinkedMessages($linked_messages)
    {
        $this->container['linked_messages'] = $linked_messages;

        return $this;
    }

    /**
     * Gets old_price
     *
     * @return float
     */
    public function getOldPrice()
    {
        return $this->container['old_price'];
    }

    /**
     * Sets old_price
     *
     * @param float $old_price old_price
     *
     * @return $this
     */
    public function setOldPrice($old_price)
    {
        $this->container['old_price'] = $old_price;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return \Swagger\Client\Model\Priority
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param \Swagger\Client\Model\Priority $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets task_status
     *
     * @return \Swagger\Client\Model\TaskStatus
     */
    public function getTaskStatus()
    {
        return $this->container['task_status'];
    }

    /**
     * Sets task_status
     *
     * @param \Swagger\Client\Model\TaskStatus $task_status task_status
     *
     * @return $this
     */
    public function setTaskStatus($task_status)
    {
        $this->container['task_status'] = $task_status;

        return $this;
    }

    /**
     * Gets withdraw_reason
     *
     * @return \Swagger\Client\Model\WithdrawReason
     */
    public function getWithdrawReason()
    {
        return $this->container['withdraw_reason'];
    }

    /**
     * Sets withdraw_reason
     *
     * @param \Swagger\Client\Model\WithdrawReason $withdraw_reason withdraw_reason
     *
     * @return $this
     */
    public function setWithdrawReason($withdraw_reason)
    {
        $this->container['withdraw_reason'] = $withdraw_reason;

        return $this;
    }

    /**
     * Gets bid_date_time
     *
     * @return \DateTime
     */
    public function getBidDateTime()
    {
        return $this->container['bid_date_time'];
    }

    /**
     * Sets bid_date_time
     *
     * @param \DateTime $bid_date_time bid_date_time
     *
     * @return $this
     */
    public function setBidDateTime($bid_date_time)
    {
        $this->container['bid_date_time'] = $bid_date_time;

        return $this;
    }

    /**
     * Gets bid_valid_until
     *
     * @return \DateTime
     */
    public function getBidValidUntil()
    {
        return $this->container['bid_valid_until'];
    }

    /**
     * Sets bid_valid_until
     *
     * @param \DateTime $bid_valid_until bid_valid_until
     *
     * @return $this
     */
    public function setBidValidUntil($bid_valid_until)
    {
        $this->container['bid_valid_until'] = $bid_valid_until;

        return $this;
    }

    /**
     * Gets denied_date_time
     *
     * @return \DateTime
     */
    public function getDeniedDateTime()
    {
        return $this->container['denied_date_time'];
    }

    /**
     * Sets denied_date_time
     *
     * @param \DateTime $denied_date_time denied_date_time
     *
     * @return $this
     */
    public function setDeniedDateTime($denied_date_time)
    {
        $this->container['denied_date_time'] = $denied_date_time;

        return $this;
    }

    /**
     * Gets accepted_date_time
     *
     * @return \DateTime
     */
    public function getAcceptedDateTime()
    {
        return $this->container['accepted_date_time'];
    }

    /**
     * Sets accepted_date_time
     *
     * @param \DateTime $accepted_date_time accepted_date_time
     *
     * @return $this
     */
    public function setAcceptedDateTime($accepted_date_time)
    {
        $this->container['accepted_date_time'] = $accepted_date_time;

        return $this;
    }

    /**
     * Gets bid_status
     *
     * @return \Swagger\Client\Model\BidStatus
     */
    public function getBidStatus()
    {
        return $this->container['bid_status'];
    }

    /**
     * Sets bid_status
     *
     * @param \Swagger\Client\Model\BidStatus $bid_status bid_status
     *
     * @return $this
     */
    public function setBidStatus($bid_status)
    {
        $this->container['bid_status'] = $bid_status;

        return $this;
    }

    /**
     * Gets linked_bid
     *
     * @return \Swagger\Client\Model\LinkedBid
     */
    public function getLinkedBid()
    {
        return $this->container['linked_bid'];
    }

    /**
     * Sets linked_bid
     *
     * @param \Swagger\Client\Model\LinkedBid $linked_bid linked_bid
     *
     * @return $this
     */
    public function setLinkedBid($linked_bid)
    {
        $this->container['linked_bid'] = $linked_bid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


