<?php
/**
 * OwnershipDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OwnershipDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OwnershipDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OwnershipDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bought_out_until' => '\DateTime',
        'description' => '\Swagger\Client\Model\TranslatedText[]',
        'end_date' => '\DateTime',
        'fixed_variable' => '\Swagger\Client\Model\FixedVariable',
        'ground_lease_period' => '\Swagger\Client\Model\GroundLeasePeriod',
        'has_buyout_option' => 'bool',
        'has_leasehold' => 'bool',
        'leasehold_owner' => 'string',
        'leasehold_owner_type' => '\Swagger\Client\Model\LeaseholdOwnerType',
        'leasehold_price' => 'float',
        'lease_term' => '\Swagger\Client\Model\LeaseholdPeriod',
        'multiplicity_leasehold' => 'string',
        'ownership_type' => '\Swagger\Client\Model\OwnershipType',
        'purchase_price' => 'float',
        'leasehold_is_bought' => 'bool',
        'leasehold_bought_off_forever' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bought_out_until' => 'date-time',
        'description' => null,
        'end_date' => 'date-time',
        'fixed_variable' => null,
        'ground_lease_period' => null,
        'has_buyout_option' => null,
        'has_leasehold' => null,
        'leasehold_owner' => null,
        'leasehold_owner_type' => null,
        'leasehold_price' => 'decimal',
        'lease_term' => null,
        'multiplicity_leasehold' => null,
        'ownership_type' => null,
        'purchase_price' => 'decimal',
        'leasehold_is_bought' => null,
        'leasehold_bought_off_forever' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bought_out_until' => 'boughtOutUntil',
        'description' => 'description',
        'end_date' => 'endDate',
        'fixed_variable' => 'fixedVariable',
        'ground_lease_period' => 'groundLeasePeriod',
        'has_buyout_option' => 'hasBuyoutOption',
        'has_leasehold' => 'hasLeasehold',
        'leasehold_owner' => 'leaseholdOwner',
        'leasehold_owner_type' => 'leaseholdOwnerType',
        'leasehold_price' => 'leaseholdPrice',
        'lease_term' => 'leaseTerm',
        'multiplicity_leasehold' => 'multiplicityLeasehold',
        'ownership_type' => 'ownershipType',
        'purchase_price' => 'purchasePrice',
        'leasehold_is_bought' => 'leaseholdIsBought',
        'leasehold_bought_off_forever' => 'leaseholdBoughtOffForever'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bought_out_until' => 'setBoughtOutUntil',
        'description' => 'setDescription',
        'end_date' => 'setEndDate',
        'fixed_variable' => 'setFixedVariable',
        'ground_lease_period' => 'setGroundLeasePeriod',
        'has_buyout_option' => 'setHasBuyoutOption',
        'has_leasehold' => 'setHasLeasehold',
        'leasehold_owner' => 'setLeaseholdOwner',
        'leasehold_owner_type' => 'setLeaseholdOwnerType',
        'leasehold_price' => 'setLeaseholdPrice',
        'lease_term' => 'setLeaseTerm',
        'multiplicity_leasehold' => 'setMultiplicityLeasehold',
        'ownership_type' => 'setOwnershipType',
        'purchase_price' => 'setPurchasePrice',
        'leasehold_is_bought' => 'setLeaseholdIsBought',
        'leasehold_bought_off_forever' => 'setLeaseholdBoughtOffForever'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bought_out_until' => 'getBoughtOutUntil',
        'description' => 'getDescription',
        'end_date' => 'getEndDate',
        'fixed_variable' => 'getFixedVariable',
        'ground_lease_period' => 'getGroundLeasePeriod',
        'has_buyout_option' => 'getHasBuyoutOption',
        'has_leasehold' => 'getHasLeasehold',
        'leasehold_owner' => 'getLeaseholdOwner',
        'leasehold_owner_type' => 'getLeaseholdOwnerType',
        'leasehold_price' => 'getLeaseholdPrice',
        'lease_term' => 'getLeaseTerm',
        'multiplicity_leasehold' => 'getMultiplicityLeasehold',
        'ownership_type' => 'getOwnershipType',
        'purchase_price' => 'getPurchasePrice',
        'leasehold_is_bought' => 'getLeaseholdIsBought',
        'leasehold_bought_off_forever' => 'getLeaseholdBoughtOffForever'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bought_out_until'] = isset($data['bought_out_until']) ? $data['bought_out_until'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['fixed_variable'] = isset($data['fixed_variable']) ? $data['fixed_variable'] : null;
        $this->container['ground_lease_period'] = isset($data['ground_lease_period']) ? $data['ground_lease_period'] : null;
        $this->container['has_buyout_option'] = isset($data['has_buyout_option']) ? $data['has_buyout_option'] : null;
        $this->container['has_leasehold'] = isset($data['has_leasehold']) ? $data['has_leasehold'] : null;
        $this->container['leasehold_owner'] = isset($data['leasehold_owner']) ? $data['leasehold_owner'] : null;
        $this->container['leasehold_owner_type'] = isset($data['leasehold_owner_type']) ? $data['leasehold_owner_type'] : null;
        $this->container['leasehold_price'] = isset($data['leasehold_price']) ? $data['leasehold_price'] : null;
        $this->container['lease_term'] = isset($data['lease_term']) ? $data['lease_term'] : null;
        $this->container['multiplicity_leasehold'] = isset($data['multiplicity_leasehold']) ? $data['multiplicity_leasehold'] : null;
        $this->container['ownership_type'] = isset($data['ownership_type']) ? $data['ownership_type'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['leasehold_is_bought'] = isset($data['leasehold_is_bought']) ? $data['leasehold_is_bought'] : null;
        $this->container['leasehold_bought_off_forever'] = isset($data['leasehold_bought_off_forever']) ? $data['leasehold_bought_off_forever'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bought_out_until
     *
     * @return \DateTime
     */
    public function getBoughtOutUntil()
    {
        return $this->container['bought_out_until'];
    }

    /**
     * Sets bought_out_until
     *
     * @param \DateTime $bought_out_until bought_out_until
     *
     * @return $this
     */
    public function setBoughtOutUntil($bought_out_until)
    {
        $this->container['bought_out_until'] = $bought_out_until;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Swagger\Client\Model\TranslatedText[] $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets fixed_variable
     *
     * @return \Swagger\Client\Model\FixedVariable
     */
    public function getFixedVariable()
    {
        return $this->container['fixed_variable'];
    }

    /**
     * Sets fixed_variable
     *
     * @param \Swagger\Client\Model\FixedVariable $fixed_variable fixed_variable
     *
     * @return $this
     */
    public function setFixedVariable($fixed_variable)
    {
        $this->container['fixed_variable'] = $fixed_variable;

        return $this;
    }

    /**
     * Gets ground_lease_period
     *
     * @return \Swagger\Client\Model\GroundLeasePeriod
     */
    public function getGroundLeasePeriod()
    {
        return $this->container['ground_lease_period'];
    }

    /**
     * Sets ground_lease_period
     *
     * @param \Swagger\Client\Model\GroundLeasePeriod $ground_lease_period ground_lease_period
     *
     * @return $this
     */
    public function setGroundLeasePeriod($ground_lease_period)
    {
        $this->container['ground_lease_period'] = $ground_lease_period;

        return $this;
    }

    /**
     * Gets has_buyout_option
     *
     * @return bool
     */
    public function getHasBuyoutOption()
    {
        return $this->container['has_buyout_option'];
    }

    /**
     * Sets has_buyout_option
     *
     * @param bool $has_buyout_option has_buyout_option
     *
     * @return $this
     */
    public function setHasBuyoutOption($has_buyout_option)
    {
        $this->container['has_buyout_option'] = $has_buyout_option;

        return $this;
    }

    /**
     * Gets has_leasehold
     *
     * @return bool
     */
    public function getHasLeasehold()
    {
        return $this->container['has_leasehold'];
    }

    /**
     * Sets has_leasehold
     *
     * @param bool $has_leasehold has_leasehold
     *
     * @return $this
     */
    public function setHasLeasehold($has_leasehold)
    {
        $this->container['has_leasehold'] = $has_leasehold;

        return $this;
    }

    /**
     * Gets leasehold_owner
     *
     * @return string
     */
    public function getLeaseholdOwner()
    {
        return $this->container['leasehold_owner'];
    }

    /**
     * Sets leasehold_owner
     *
     * @param string $leasehold_owner leasehold_owner
     *
     * @return $this
     */
    public function setLeaseholdOwner($leasehold_owner)
    {
        $this->container['leasehold_owner'] = $leasehold_owner;

        return $this;
    }

    /**
     * Gets leasehold_owner_type
     *
     * @return \Swagger\Client\Model\LeaseholdOwnerType
     */
    public function getLeaseholdOwnerType()
    {
        return $this->container['leasehold_owner_type'];
    }

    /**
     * Sets leasehold_owner_type
     *
     * @param \Swagger\Client\Model\LeaseholdOwnerType $leasehold_owner_type leasehold_owner_type
     *
     * @return $this
     */
    public function setLeaseholdOwnerType($leasehold_owner_type)
    {
        $this->container['leasehold_owner_type'] = $leasehold_owner_type;

        return $this;
    }

    /**
     * Gets leasehold_price
     *
     * @return float
     */
    public function getLeaseholdPrice()
    {
        return $this->container['leasehold_price'];
    }

    /**
     * Sets leasehold_price
     *
     * @param float $leasehold_price leasehold_price
     *
     * @return $this
     */
    public function setLeaseholdPrice($leasehold_price)
    {
        $this->container['leasehold_price'] = $leasehold_price;

        return $this;
    }

    /**
     * Gets lease_term
     *
     * @return \Swagger\Client\Model\LeaseholdPeriod
     */
    public function getLeaseTerm()
    {
        return $this->container['lease_term'];
    }

    /**
     * Sets lease_term
     *
     * @param \Swagger\Client\Model\LeaseholdPeriod $lease_term lease_term
     *
     * @return $this
     */
    public function setLeaseTerm($lease_term)
    {
        $this->container['lease_term'] = $lease_term;

        return $this;
    }

    /**
     * Gets multiplicity_leasehold
     *
     * @return string
     */
    public function getMultiplicityLeasehold()
    {
        return $this->container['multiplicity_leasehold'];
    }

    /**
     * Sets multiplicity_leasehold
     *
     * @param string $multiplicity_leasehold multiplicity_leasehold
     *
     * @return $this
     */
    public function setMultiplicityLeasehold($multiplicity_leasehold)
    {
        $this->container['multiplicity_leasehold'] = $multiplicity_leasehold;

        return $this;
    }

    /**
     * Gets ownership_type
     *
     * @return \Swagger\Client\Model\OwnershipType
     */
    public function getOwnershipType()
    {
        return $this->container['ownership_type'];
    }

    /**
     * Sets ownership_type
     *
     * @param \Swagger\Client\Model\OwnershipType $ownership_type ownership_type
     *
     * @return $this
     */
    public function setOwnershipType($ownership_type)
    {
        $this->container['ownership_type'] = $ownership_type;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return float
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param float $purchase_price purchase_price
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets leasehold_is_bought
     *
     * @return bool
     */
    public function getLeaseholdIsBought()
    {
        return $this->container['leasehold_is_bought'];
    }

    /**
     * Sets leasehold_is_bought
     *
     * @param bool $leasehold_is_bought leasehold_is_bought
     *
     * @return $this
     */
    public function setLeaseholdIsBought($leasehold_is_bought)
    {
        $this->container['leasehold_is_bought'] = $leasehold_is_bought;

        return $this;
    }

    /**
     * Gets leasehold_bought_off_forever
     *
     * @return bool
     */
    public function getLeaseholdBoughtOffForever()
    {
        return $this->container['leasehold_bought_off_forever'];
    }

    /**
     * Sets leasehold_bought_off_forever
     *
     * @param bool $leasehold_bought_off_forever leasehold_bought_off_forever
     *
     * @return $this
     */
    public function setLeaseholdBoughtOffForever($leasehold_bought_off_forever)
    {
        $this->container['leasehold_bought_off_forever'] = $leasehold_bought_off_forever;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


