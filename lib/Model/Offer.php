<?php
/**
 * Offer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'btw_percentage' => 'float',
        'buy_price_per_parking_lot' => 'float',
        'commission_contact_gross' => 'float',
        'commission_contact_note' => '\Swagger\Client\Model\TranslatedText[]',
        'commission_contact_percent' => 'float',
        'commission_contact_type' => '\Swagger\Client\Model\OfferCommissionContactType',
        'commission_customer_gross' => 'float',
        'commission_customer_note' => '\Swagger\Client\Model\TranslatedText[]',
        'commission_customer_percent' => 'float',
        'commission_owner_gross' => 'float',
        'commission_owner_note' => '\Swagger\Client\Model\TranslatedText[]',
        'commission_owner_percent' => 'float',
        'commission_paid_by' => '\Swagger\Client\Model\OfferCommissionPaidBy',
        'commission_type' => '\Swagger\Client\Model\OfferCommissionType',
        'customer_budget' => 'float',
        'excluding_capitalized_interest' => 'bool',
        'furnishing' => '\Swagger\Client\Model\Furnishing',
        'has_retailers_contribution' => 'bool',
        'indication_electra' => 'float',
        'indication_gas' => 'float',
        'indication_heating_costs' => 'float',
        'indication_incentives' => 'bool',
        'indication_internet' => 'float',
        'indication_television' => 'float',
        'indication_water' => 'float',
        'internal_budget' => 'float',
        'price_code' => '\Swagger\Client\Model\PriceCode',
        'price_history' => '\Swagger\Client\Model\PriceHistory[]',
        'commission_scales' => '\Swagger\Client\Model\CommissionScale[]',
        'rend_price_per_parking_lot' => 'float',
        'rent_condition_parking_place' => '\Swagger\Client\Model\RentCondition',
        'retailers_contribution' => 'float',
        'sale_condition_parking_place' => '\Swagger\Client\Model\SaleCondition',
        'service_costs' => 'float',
        'sewerage_charges' => 'float',
        'valuation_of_immovable_property_act' => '\Swagger\Client\Model\OfferValuationOfImmovablePropertyAct',
        'vat_condition' => '\Swagger\Client\Model\VatCondition',
        'water_authority_charges' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'btw_percentage' => 'decimal',
        'buy_price_per_parking_lot' => 'decimal',
        'commission_contact_gross' => 'decimal',
        'commission_contact_note' => null,
        'commission_contact_percent' => 'decimal',
        'commission_contact_type' => null,
        'commission_customer_gross' => 'decimal',
        'commission_customer_note' => null,
        'commission_customer_percent' => 'decimal',
        'commission_owner_gross' => 'decimal',
        'commission_owner_note' => null,
        'commission_owner_percent' => 'decimal',
        'commission_paid_by' => null,
        'commission_type' => null,
        'customer_budget' => 'decimal',
        'excluding_capitalized_interest' => null,
        'furnishing' => null,
        'has_retailers_contribution' => null,
        'indication_electra' => 'decimal',
        'indication_gas' => 'decimal',
        'indication_heating_costs' => 'decimal',
        'indication_incentives' => null,
        'indication_internet' => 'decimal',
        'indication_television' => 'decimal',
        'indication_water' => 'decimal',
        'internal_budget' => 'decimal',
        'price_code' => null,
        'price_history' => null,
        'commission_scales' => null,
        'rend_price_per_parking_lot' => 'decimal',
        'rent_condition_parking_place' => null,
        'retailers_contribution' => 'decimal',
        'sale_condition_parking_place' => null,
        'service_costs' => 'decimal',
        'sewerage_charges' => 'decimal',
        'valuation_of_immovable_property_act' => null,
        'vat_condition' => null,
        'water_authority_charges' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'btw_percentage' => 'btwPercentage',
        'buy_price_per_parking_lot' => 'buyPricePerParkingLot',
        'commission_contact_gross' => 'commissionContactGross',
        'commission_contact_note' => 'commissionContactNote',
        'commission_contact_percent' => 'commissionContactPercent',
        'commission_contact_type' => 'commissionContactType',
        'commission_customer_gross' => 'commissionCustomerGross',
        'commission_customer_note' => 'commissionCustomerNote',
        'commission_customer_percent' => 'commissionCustomerPercent',
        'commission_owner_gross' => 'commissionOwnerGross',
        'commission_owner_note' => 'commissionOwnerNote',
        'commission_owner_percent' => 'commissionOwnerPercent',
        'commission_paid_by' => 'commissionPaidBy',
        'commission_type' => 'commissionType',
        'customer_budget' => 'customerBudget',
        'excluding_capitalized_interest' => 'excludingCapitalizedInterest',
        'furnishing' => 'furnishing',
        'has_retailers_contribution' => 'hasRetailersContribution',
        'indication_electra' => 'indicationElectra',
        'indication_gas' => 'indicationGas',
        'indication_heating_costs' => 'indicationHeatingCosts',
        'indication_incentives' => 'indicationIncentives',
        'indication_internet' => 'indicationInternet',
        'indication_television' => 'indicationTelevision',
        'indication_water' => 'indicationWater',
        'internal_budget' => 'internalBudget',
        'price_code' => 'priceCode',
        'price_history' => 'priceHistory',
        'commission_scales' => 'commissionScales',
        'rend_price_per_parking_lot' => 'rendPricePerParkingLot',
        'rent_condition_parking_place' => 'rentConditionParkingPlace',
        'retailers_contribution' => 'retailersContribution',
        'sale_condition_parking_place' => 'saleConditionParkingPlace',
        'service_costs' => 'serviceCosts',
        'sewerage_charges' => 'sewerageCharges',
        'valuation_of_immovable_property_act' => 'valuationOfImmovablePropertyAct',
        'vat_condition' => 'vatCondition',
        'water_authority_charges' => 'waterAuthorityCharges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'btw_percentage' => 'setBtwPercentage',
        'buy_price_per_parking_lot' => 'setBuyPricePerParkingLot',
        'commission_contact_gross' => 'setCommissionContactGross',
        'commission_contact_note' => 'setCommissionContactNote',
        'commission_contact_percent' => 'setCommissionContactPercent',
        'commission_contact_type' => 'setCommissionContactType',
        'commission_customer_gross' => 'setCommissionCustomerGross',
        'commission_customer_note' => 'setCommissionCustomerNote',
        'commission_customer_percent' => 'setCommissionCustomerPercent',
        'commission_owner_gross' => 'setCommissionOwnerGross',
        'commission_owner_note' => 'setCommissionOwnerNote',
        'commission_owner_percent' => 'setCommissionOwnerPercent',
        'commission_paid_by' => 'setCommissionPaidBy',
        'commission_type' => 'setCommissionType',
        'customer_budget' => 'setCustomerBudget',
        'excluding_capitalized_interest' => 'setExcludingCapitalizedInterest',
        'furnishing' => 'setFurnishing',
        'has_retailers_contribution' => 'setHasRetailersContribution',
        'indication_electra' => 'setIndicationElectra',
        'indication_gas' => 'setIndicationGas',
        'indication_heating_costs' => 'setIndicationHeatingCosts',
        'indication_incentives' => 'setIndicationIncentives',
        'indication_internet' => 'setIndicationInternet',
        'indication_television' => 'setIndicationTelevision',
        'indication_water' => 'setIndicationWater',
        'internal_budget' => 'setInternalBudget',
        'price_code' => 'setPriceCode',
        'price_history' => 'setPriceHistory',
        'commission_scales' => 'setCommissionScales',
        'rend_price_per_parking_lot' => 'setRendPricePerParkingLot',
        'rent_condition_parking_place' => 'setRentConditionParkingPlace',
        'retailers_contribution' => 'setRetailersContribution',
        'sale_condition_parking_place' => 'setSaleConditionParkingPlace',
        'service_costs' => 'setServiceCosts',
        'sewerage_charges' => 'setSewerageCharges',
        'valuation_of_immovable_property_act' => 'setValuationOfImmovablePropertyAct',
        'vat_condition' => 'setVatCondition',
        'water_authority_charges' => 'setWaterAuthorityCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'btw_percentage' => 'getBtwPercentage',
        'buy_price_per_parking_lot' => 'getBuyPricePerParkingLot',
        'commission_contact_gross' => 'getCommissionContactGross',
        'commission_contact_note' => 'getCommissionContactNote',
        'commission_contact_percent' => 'getCommissionContactPercent',
        'commission_contact_type' => 'getCommissionContactType',
        'commission_customer_gross' => 'getCommissionCustomerGross',
        'commission_customer_note' => 'getCommissionCustomerNote',
        'commission_customer_percent' => 'getCommissionCustomerPercent',
        'commission_owner_gross' => 'getCommissionOwnerGross',
        'commission_owner_note' => 'getCommissionOwnerNote',
        'commission_owner_percent' => 'getCommissionOwnerPercent',
        'commission_paid_by' => 'getCommissionPaidBy',
        'commission_type' => 'getCommissionType',
        'customer_budget' => 'getCustomerBudget',
        'excluding_capitalized_interest' => 'getExcludingCapitalizedInterest',
        'furnishing' => 'getFurnishing',
        'has_retailers_contribution' => 'getHasRetailersContribution',
        'indication_electra' => 'getIndicationElectra',
        'indication_gas' => 'getIndicationGas',
        'indication_heating_costs' => 'getIndicationHeatingCosts',
        'indication_incentives' => 'getIndicationIncentives',
        'indication_internet' => 'getIndicationInternet',
        'indication_television' => 'getIndicationTelevision',
        'indication_water' => 'getIndicationWater',
        'internal_budget' => 'getInternalBudget',
        'price_code' => 'getPriceCode',
        'price_history' => 'getPriceHistory',
        'commission_scales' => 'getCommissionScales',
        'rend_price_per_parking_lot' => 'getRendPricePerParkingLot',
        'rent_condition_parking_place' => 'getRentConditionParkingPlace',
        'retailers_contribution' => 'getRetailersContribution',
        'sale_condition_parking_place' => 'getSaleConditionParkingPlace',
        'service_costs' => 'getServiceCosts',
        'sewerage_charges' => 'getSewerageCharges',
        'valuation_of_immovable_property_act' => 'getValuationOfImmovablePropertyAct',
        'vat_condition' => 'getVatCondition',
        'water_authority_charges' => 'getWaterAuthorityCharges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['btw_percentage'] = isset($data['btw_percentage']) ? $data['btw_percentage'] : null;
        $this->container['buy_price_per_parking_lot'] = isset($data['buy_price_per_parking_lot']) ? $data['buy_price_per_parking_lot'] : null;
        $this->container['commission_contact_gross'] = isset($data['commission_contact_gross']) ? $data['commission_contact_gross'] : null;
        $this->container['commission_contact_note'] = isset($data['commission_contact_note']) ? $data['commission_contact_note'] : null;
        $this->container['commission_contact_percent'] = isset($data['commission_contact_percent']) ? $data['commission_contact_percent'] : null;
        $this->container['commission_contact_type'] = isset($data['commission_contact_type']) ? $data['commission_contact_type'] : null;
        $this->container['commission_customer_gross'] = isset($data['commission_customer_gross']) ? $data['commission_customer_gross'] : null;
        $this->container['commission_customer_note'] = isset($data['commission_customer_note']) ? $data['commission_customer_note'] : null;
        $this->container['commission_customer_percent'] = isset($data['commission_customer_percent']) ? $data['commission_customer_percent'] : null;
        $this->container['commission_owner_gross'] = isset($data['commission_owner_gross']) ? $data['commission_owner_gross'] : null;
        $this->container['commission_owner_note'] = isset($data['commission_owner_note']) ? $data['commission_owner_note'] : null;
        $this->container['commission_owner_percent'] = isset($data['commission_owner_percent']) ? $data['commission_owner_percent'] : null;
        $this->container['commission_paid_by'] = isset($data['commission_paid_by']) ? $data['commission_paid_by'] : null;
        $this->container['commission_type'] = isset($data['commission_type']) ? $data['commission_type'] : null;
        $this->container['customer_budget'] = isset($data['customer_budget']) ? $data['customer_budget'] : null;
        $this->container['excluding_capitalized_interest'] = isset($data['excluding_capitalized_interest']) ? $data['excluding_capitalized_interest'] : null;
        $this->container['furnishing'] = isset($data['furnishing']) ? $data['furnishing'] : null;
        $this->container['has_retailers_contribution'] = isset($data['has_retailers_contribution']) ? $data['has_retailers_contribution'] : null;
        $this->container['indication_electra'] = isset($data['indication_electra']) ? $data['indication_electra'] : null;
        $this->container['indication_gas'] = isset($data['indication_gas']) ? $data['indication_gas'] : null;
        $this->container['indication_heating_costs'] = isset($data['indication_heating_costs']) ? $data['indication_heating_costs'] : null;
        $this->container['indication_incentives'] = isset($data['indication_incentives']) ? $data['indication_incentives'] : null;
        $this->container['indication_internet'] = isset($data['indication_internet']) ? $data['indication_internet'] : null;
        $this->container['indication_television'] = isset($data['indication_television']) ? $data['indication_television'] : null;
        $this->container['indication_water'] = isset($data['indication_water']) ? $data['indication_water'] : null;
        $this->container['internal_budget'] = isset($data['internal_budget']) ? $data['internal_budget'] : null;
        $this->container['price_code'] = isset($data['price_code']) ? $data['price_code'] : null;
        $this->container['price_history'] = isset($data['price_history']) ? $data['price_history'] : null;
        $this->container['commission_scales'] = isset($data['commission_scales']) ? $data['commission_scales'] : null;
        $this->container['rend_price_per_parking_lot'] = isset($data['rend_price_per_parking_lot']) ? $data['rend_price_per_parking_lot'] : null;
        $this->container['rent_condition_parking_place'] = isset($data['rent_condition_parking_place']) ? $data['rent_condition_parking_place'] : null;
        $this->container['retailers_contribution'] = isset($data['retailers_contribution']) ? $data['retailers_contribution'] : null;
        $this->container['sale_condition_parking_place'] = isset($data['sale_condition_parking_place']) ? $data['sale_condition_parking_place'] : null;
        $this->container['service_costs'] = isset($data['service_costs']) ? $data['service_costs'] : null;
        $this->container['sewerage_charges'] = isset($data['sewerage_charges']) ? $data['sewerage_charges'] : null;
        $this->container['valuation_of_immovable_property_act'] = isset($data['valuation_of_immovable_property_act']) ? $data['valuation_of_immovable_property_act'] : null;
        $this->container['vat_condition'] = isset($data['vat_condition']) ? $data['vat_condition'] : null;
        $this->container['water_authority_charges'] = isset($data['water_authority_charges']) ? $data['water_authority_charges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets btw_percentage
     *
     * @return float
     */
    public function getBtwPercentage()
    {
        return $this->container['btw_percentage'];
    }

    /**
     * Sets btw_percentage
     *
     * @param float $btw_percentage btw_percentage
     *
     * @return $this
     */
    public function setBtwPercentage($btw_percentage)
    {
        $this->container['btw_percentage'] = $btw_percentage;

        return $this;
    }

    /**
     * Gets buy_price_per_parking_lot
     *
     * @return float
     */
    public function getBuyPricePerParkingLot()
    {
        return $this->container['buy_price_per_parking_lot'];
    }

    /**
     * Sets buy_price_per_parking_lot
     *
     * @param float $buy_price_per_parking_lot buy_price_per_parking_lot
     *
     * @return $this
     */
    public function setBuyPricePerParkingLot($buy_price_per_parking_lot)
    {
        $this->container['buy_price_per_parking_lot'] = $buy_price_per_parking_lot;

        return $this;
    }

    /**
     * Gets commission_contact_gross
     *
     * @return float
     */
    public function getCommissionContactGross()
    {
        return $this->container['commission_contact_gross'];
    }

    /**
     * Sets commission_contact_gross
     *
     * @param float $commission_contact_gross commission_contact_gross
     *
     * @return $this
     */
    public function setCommissionContactGross($commission_contact_gross)
    {
        $this->container['commission_contact_gross'] = $commission_contact_gross;

        return $this;
    }

    /**
     * Gets commission_contact_note
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getCommissionContactNote()
    {
        return $this->container['commission_contact_note'];
    }

    /**
     * Sets commission_contact_note
     *
     * @param \Swagger\Client\Model\TranslatedText[] $commission_contact_note commission_contact_note
     *
     * @return $this
     */
    public function setCommissionContactNote($commission_contact_note)
    {
        $this->container['commission_contact_note'] = $commission_contact_note;

        return $this;
    }

    /**
     * Gets commission_contact_percent
     *
     * @return float
     */
    public function getCommissionContactPercent()
    {
        return $this->container['commission_contact_percent'];
    }

    /**
     * Sets commission_contact_percent
     *
     * @param float $commission_contact_percent commission_contact_percent
     *
     * @return $this
     */
    public function setCommissionContactPercent($commission_contact_percent)
    {
        $this->container['commission_contact_percent'] = $commission_contact_percent;

        return $this;
    }

    /**
     * Gets commission_contact_type
     *
     * @return \Swagger\Client\Model\OfferCommissionContactType
     */
    public function getCommissionContactType()
    {
        return $this->container['commission_contact_type'];
    }

    /**
     * Sets commission_contact_type
     *
     * @param \Swagger\Client\Model\OfferCommissionContactType $commission_contact_type commission_contact_type
     *
     * @return $this
     */
    public function setCommissionContactType($commission_contact_type)
    {
        $this->container['commission_contact_type'] = $commission_contact_type;

        return $this;
    }

    /**
     * Gets commission_customer_gross
     *
     * @return float
     */
    public function getCommissionCustomerGross()
    {
        return $this->container['commission_customer_gross'];
    }

    /**
     * Sets commission_customer_gross
     *
     * @param float $commission_customer_gross commission_customer_gross
     *
     * @return $this
     */
    public function setCommissionCustomerGross($commission_customer_gross)
    {
        $this->container['commission_customer_gross'] = $commission_customer_gross;

        return $this;
    }

    /**
     * Gets commission_customer_note
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getCommissionCustomerNote()
    {
        return $this->container['commission_customer_note'];
    }

    /**
     * Sets commission_customer_note
     *
     * @param \Swagger\Client\Model\TranslatedText[] $commission_customer_note commission_customer_note
     *
     * @return $this
     */
    public function setCommissionCustomerNote($commission_customer_note)
    {
        $this->container['commission_customer_note'] = $commission_customer_note;

        return $this;
    }

    /**
     * Gets commission_customer_percent
     *
     * @return float
     */
    public function getCommissionCustomerPercent()
    {
        return $this->container['commission_customer_percent'];
    }

    /**
     * Sets commission_customer_percent
     *
     * @param float $commission_customer_percent commission_customer_percent
     *
     * @return $this
     */
    public function setCommissionCustomerPercent($commission_customer_percent)
    {
        $this->container['commission_customer_percent'] = $commission_customer_percent;

        return $this;
    }

    /**
     * Gets commission_owner_gross
     *
     * @return float
     */
    public function getCommissionOwnerGross()
    {
        return $this->container['commission_owner_gross'];
    }

    /**
     * Sets commission_owner_gross
     *
     * @param float $commission_owner_gross commission_owner_gross
     *
     * @return $this
     */
    public function setCommissionOwnerGross($commission_owner_gross)
    {
        $this->container['commission_owner_gross'] = $commission_owner_gross;

        return $this;
    }

    /**
     * Gets commission_owner_note
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getCommissionOwnerNote()
    {
        return $this->container['commission_owner_note'];
    }

    /**
     * Sets commission_owner_note
     *
     * @param \Swagger\Client\Model\TranslatedText[] $commission_owner_note commission_owner_note
     *
     * @return $this
     */
    public function setCommissionOwnerNote($commission_owner_note)
    {
        $this->container['commission_owner_note'] = $commission_owner_note;

        return $this;
    }

    /**
     * Gets commission_owner_percent
     *
     * @return float
     */
    public function getCommissionOwnerPercent()
    {
        return $this->container['commission_owner_percent'];
    }

    /**
     * Sets commission_owner_percent
     *
     * @param float $commission_owner_percent commission_owner_percent
     *
     * @return $this
     */
    public function setCommissionOwnerPercent($commission_owner_percent)
    {
        $this->container['commission_owner_percent'] = $commission_owner_percent;

        return $this;
    }

    /**
     * Gets commission_paid_by
     *
     * @return \Swagger\Client\Model\OfferCommissionPaidBy
     */
    public function getCommissionPaidBy()
    {
        return $this->container['commission_paid_by'];
    }

    /**
     * Sets commission_paid_by
     *
     * @param \Swagger\Client\Model\OfferCommissionPaidBy $commission_paid_by commission_paid_by
     *
     * @return $this
     */
    public function setCommissionPaidBy($commission_paid_by)
    {
        $this->container['commission_paid_by'] = $commission_paid_by;

        return $this;
    }

    /**
     * Gets commission_type
     *
     * @return \Swagger\Client\Model\OfferCommissionType
     */
    public function getCommissionType()
    {
        return $this->container['commission_type'];
    }

    /**
     * Sets commission_type
     *
     * @param \Swagger\Client\Model\OfferCommissionType $commission_type commission_type
     *
     * @return $this
     */
    public function setCommissionType($commission_type)
    {
        $this->container['commission_type'] = $commission_type;

        return $this;
    }

    /**
     * Gets customer_budget
     *
     * @return float
     */
    public function getCustomerBudget()
    {
        return $this->container['customer_budget'];
    }

    /**
     * Sets customer_budget
     *
     * @param float $customer_budget customer_budget
     *
     * @return $this
     */
    public function setCustomerBudget($customer_budget)
    {
        $this->container['customer_budget'] = $customer_budget;

        return $this;
    }

    /**
     * Gets excluding_capitalized_interest
     *
     * @return bool
     */
    public function getExcludingCapitalizedInterest()
    {
        return $this->container['excluding_capitalized_interest'];
    }

    /**
     * Sets excluding_capitalized_interest
     *
     * @param bool $excluding_capitalized_interest excluding_capitalized_interest
     *
     * @return $this
     */
    public function setExcludingCapitalizedInterest($excluding_capitalized_interest)
    {
        $this->container['excluding_capitalized_interest'] = $excluding_capitalized_interest;

        return $this;
    }

    /**
     * Gets furnishing
     *
     * @return \Swagger\Client\Model\Furnishing
     */
    public function getFurnishing()
    {
        return $this->container['furnishing'];
    }

    /**
     * Sets furnishing
     *
     * @param \Swagger\Client\Model\Furnishing $furnishing furnishing
     *
     * @return $this
     */
    public function setFurnishing($furnishing)
    {
        $this->container['furnishing'] = $furnishing;

        return $this;
    }

    /**
     * Gets has_retailers_contribution
     *
     * @return bool
     */
    public function getHasRetailersContribution()
    {
        return $this->container['has_retailers_contribution'];
    }

    /**
     * Sets has_retailers_contribution
     *
     * @param bool $has_retailers_contribution has_retailers_contribution
     *
     * @return $this
     */
    public function setHasRetailersContribution($has_retailers_contribution)
    {
        $this->container['has_retailers_contribution'] = $has_retailers_contribution;

        return $this;
    }

    /**
     * Gets indication_electra
     *
     * @return float
     */
    public function getIndicationElectra()
    {
        return $this->container['indication_electra'];
    }

    /**
     * Sets indication_electra
     *
     * @param float $indication_electra indication_electra
     *
     * @return $this
     */
    public function setIndicationElectra($indication_electra)
    {
        $this->container['indication_electra'] = $indication_electra;

        return $this;
    }

    /**
     * Gets indication_gas
     *
     * @return float
     */
    public function getIndicationGas()
    {
        return $this->container['indication_gas'];
    }

    /**
     * Sets indication_gas
     *
     * @param float $indication_gas indication_gas
     *
     * @return $this
     */
    public function setIndicationGas($indication_gas)
    {
        $this->container['indication_gas'] = $indication_gas;

        return $this;
    }

    /**
     * Gets indication_heating_costs
     *
     * @return float
     */
    public function getIndicationHeatingCosts()
    {
        return $this->container['indication_heating_costs'];
    }

    /**
     * Sets indication_heating_costs
     *
     * @param float $indication_heating_costs indication_heating_costs
     *
     * @return $this
     */
    public function setIndicationHeatingCosts($indication_heating_costs)
    {
        $this->container['indication_heating_costs'] = $indication_heating_costs;

        return $this;
    }

    /**
     * Gets indication_incentives
     *
     * @return bool
     */
    public function getIndicationIncentives()
    {
        return $this->container['indication_incentives'];
    }

    /**
     * Sets indication_incentives
     *
     * @param bool $indication_incentives indication_incentives
     *
     * @return $this
     */
    public function setIndicationIncentives($indication_incentives)
    {
        $this->container['indication_incentives'] = $indication_incentives;

        return $this;
    }

    /**
     * Gets indication_internet
     *
     * @return float
     */
    public function getIndicationInternet()
    {
        return $this->container['indication_internet'];
    }

    /**
     * Sets indication_internet
     *
     * @param float $indication_internet indication_internet
     *
     * @return $this
     */
    public function setIndicationInternet($indication_internet)
    {
        $this->container['indication_internet'] = $indication_internet;

        return $this;
    }

    /**
     * Gets indication_television
     *
     * @return float
     */
    public function getIndicationTelevision()
    {
        return $this->container['indication_television'];
    }

    /**
     * Sets indication_television
     *
     * @param float $indication_television indication_television
     *
     * @return $this
     */
    public function setIndicationTelevision($indication_television)
    {
        $this->container['indication_television'] = $indication_television;

        return $this;
    }

    /**
     * Gets indication_water
     *
     * @return float
     */
    public function getIndicationWater()
    {
        return $this->container['indication_water'];
    }

    /**
     * Sets indication_water
     *
     * @param float $indication_water indication_water
     *
     * @return $this
     */
    public function setIndicationWater($indication_water)
    {
        $this->container['indication_water'] = $indication_water;

        return $this;
    }

    /**
     * Gets internal_budget
     *
     * @return float
     */
    public function getInternalBudget()
    {
        return $this->container['internal_budget'];
    }

    /**
     * Sets internal_budget
     *
     * @param float $internal_budget internal_budget
     *
     * @return $this
     */
    public function setInternalBudget($internal_budget)
    {
        $this->container['internal_budget'] = $internal_budget;

        return $this;
    }

    /**
     * Gets price_code
     *
     * @return \Swagger\Client\Model\PriceCode
     */
    public function getPriceCode()
    {
        return $this->container['price_code'];
    }

    /**
     * Sets price_code
     *
     * @param \Swagger\Client\Model\PriceCode $price_code price_code
     *
     * @return $this
     */
    public function setPriceCode($price_code)
    {
        $this->container['price_code'] = $price_code;

        return $this;
    }

    /**
     * Gets price_history
     *
     * @return \Swagger\Client\Model\PriceHistory[]
     */
    public function getPriceHistory()
    {
        return $this->container['price_history'];
    }

    /**
     * Sets price_history
     *
     * @param \Swagger\Client\Model\PriceHistory[] $price_history price_history
     *
     * @return $this
     */
    public function setPriceHistory($price_history)
    {
        $this->container['price_history'] = $price_history;

        return $this;
    }

    /**
     * Gets commission_scales
     *
     * @return \Swagger\Client\Model\CommissionScale[]
     */
    public function getCommissionScales()
    {
        return $this->container['commission_scales'];
    }

    /**
     * Sets commission_scales
     *
     * @param \Swagger\Client\Model\CommissionScale[] $commission_scales commission_scales
     *
     * @return $this
     */
    public function setCommissionScales($commission_scales)
    {
        $this->container['commission_scales'] = $commission_scales;

        return $this;
    }

    /**
     * Gets rend_price_per_parking_lot
     *
     * @return float
     */
    public function getRendPricePerParkingLot()
    {
        return $this->container['rend_price_per_parking_lot'];
    }

    /**
     * Sets rend_price_per_parking_lot
     *
     * @param float $rend_price_per_parking_lot rend_price_per_parking_lot
     *
     * @return $this
     */
    public function setRendPricePerParkingLot($rend_price_per_parking_lot)
    {
        $this->container['rend_price_per_parking_lot'] = $rend_price_per_parking_lot;

        return $this;
    }

    /**
     * Gets rent_condition_parking_place
     *
     * @return \Swagger\Client\Model\RentCondition
     */
    public function getRentConditionParkingPlace()
    {
        return $this->container['rent_condition_parking_place'];
    }

    /**
     * Sets rent_condition_parking_place
     *
     * @param \Swagger\Client\Model\RentCondition $rent_condition_parking_place rent_condition_parking_place
     *
     * @return $this
     */
    public function setRentConditionParkingPlace($rent_condition_parking_place)
    {
        $this->container['rent_condition_parking_place'] = $rent_condition_parking_place;

        return $this;
    }

    /**
     * Gets retailers_contribution
     *
     * @return float
     */
    public function getRetailersContribution()
    {
        return $this->container['retailers_contribution'];
    }

    /**
     * Sets retailers_contribution
     *
     * @param float $retailers_contribution retailers_contribution
     *
     * @return $this
     */
    public function setRetailersContribution($retailers_contribution)
    {
        $this->container['retailers_contribution'] = $retailers_contribution;

        return $this;
    }

    /**
     * Gets sale_condition_parking_place
     *
     * @return \Swagger\Client\Model\SaleCondition
     */
    public function getSaleConditionParkingPlace()
    {
        return $this->container['sale_condition_parking_place'];
    }

    /**
     * Sets sale_condition_parking_place
     *
     * @param \Swagger\Client\Model\SaleCondition $sale_condition_parking_place sale_condition_parking_place
     *
     * @return $this
     */
    public function setSaleConditionParkingPlace($sale_condition_parking_place)
    {
        $this->container['sale_condition_parking_place'] = $sale_condition_parking_place;

        return $this;
    }

    /**
     * Gets service_costs
     *
     * @return float
     */
    public function getServiceCosts()
    {
        return $this->container['service_costs'];
    }

    /**
     * Sets service_costs
     *
     * @param float $service_costs - Huuraanbieding -&gt; Servicekosten - Koopaanbieding -&gt; Bijdrage VVE (Vereniging Van Eigenaren/Owners Association)
     *
     * @return $this
     */
    public function setServiceCosts($service_costs)
    {
        $this->container['service_costs'] = $service_costs;

        return $this;
    }

    /**
     * Gets sewerage_charges
     *
     * @return float
     */
    public function getSewerageCharges()
    {
        return $this->container['sewerage_charges'];
    }

    /**
     * Sets sewerage_charges
     *
     * @param float $sewerage_charges Sewerage charges per year. In Dutch: Rioolrechten
     *
     * @return $this
     */
    public function setSewerageCharges($sewerage_charges)
    {
        $this->container['sewerage_charges'] = $sewerage_charges;

        return $this;
    }

    /**
     * Gets valuation_of_immovable_property_act
     *
     * @return \Swagger\Client\Model\OfferValuationOfImmovablePropertyAct
     */
    public function getValuationOfImmovablePropertyAct()
    {
        return $this->container['valuation_of_immovable_property_act'];
    }

    /**
     * Sets valuation_of_immovable_property_act
     *
     * @param \Swagger\Client\Model\OfferValuationOfImmovablePropertyAct $valuation_of_immovable_property_act valuation_of_immovable_property_act
     *
     * @return $this
     */
    public function setValuationOfImmovablePropertyAct($valuation_of_immovable_property_act)
    {
        $this->container['valuation_of_immovable_property_act'] = $valuation_of_immovable_property_act;

        return $this;
    }

    /**
     * Gets vat_condition
     *
     * @return \Swagger\Client\Model\VatCondition
     */
    public function getVatCondition()
    {
        return $this->container['vat_condition'];
    }

    /**
     * Sets vat_condition
     *
     * @param \Swagger\Client\Model\VatCondition $vat_condition vat_condition
     *
     * @return $this
     */
    public function setVatCondition($vat_condition)
    {
        $this->container['vat_condition'] = $vat_condition;

        return $this;
    }

    /**
     * Gets water_authority_charges
     *
     * @return float
     */
    public function getWaterAuthorityCharges()
    {
        return $this->container['water_authority_charges'];
    }

    /**
     * Sets water_authority_charges
     *
     * @param float $water_authority_charges Water authority charges per year. In Dutch: Waterschapslasten
     *
     * @return $this
     */
    public function setWaterAuthorityCharges($water_authority_charges)
    {
        $this->container['water_authority_charges'] = $water_authority_charges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


