<?php
/**
 * CacheControlHeaderValue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CacheControlHeaderValue Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CacheControlHeaderValue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CacheControlHeaderValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'no_cache' => 'bool',
        'no_cache_headers' => 'string[]',
        'no_store' => 'bool',
        'max_age' => 'string',
        'shared_max_age' => 'string',
        'max_stale' => 'bool',
        'max_stale_limit' => 'string',
        'min_fresh' => 'string',
        'no_transform' => 'bool',
        'only_if_cached' => 'bool',
        'public' => 'bool',
        'private' => 'bool',
        'private_headers' => 'string[]',
        'must_revalidate' => 'bool',
        'proxy_revalidate' => 'bool',
        'extensions' => '\Swagger\Client\Model\NameValueHeaderValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'no_cache' => null,
        'no_cache_headers' => null,
        'no_store' => null,
        'max_age' => 'time-span',
        'shared_max_age' => 'time-span',
        'max_stale' => null,
        'max_stale_limit' => 'time-span',
        'min_fresh' => 'time-span',
        'no_transform' => null,
        'only_if_cached' => null,
        'public' => null,
        'private' => null,
        'private_headers' => null,
        'must_revalidate' => null,
        'proxy_revalidate' => null,
        'extensions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'no_cache' => 'noCache',
        'no_cache_headers' => 'noCacheHeaders',
        'no_store' => 'noStore',
        'max_age' => 'maxAge',
        'shared_max_age' => 'sharedMaxAge',
        'max_stale' => 'maxStale',
        'max_stale_limit' => 'maxStaleLimit',
        'min_fresh' => 'minFresh',
        'no_transform' => 'noTransform',
        'only_if_cached' => 'onlyIfCached',
        'public' => 'public',
        'private' => 'private',
        'private_headers' => 'privateHeaders',
        'must_revalidate' => 'mustRevalidate',
        'proxy_revalidate' => 'proxyRevalidate',
        'extensions' => 'extensions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'no_cache' => 'setNoCache',
        'no_cache_headers' => 'setNoCacheHeaders',
        'no_store' => 'setNoStore',
        'max_age' => 'setMaxAge',
        'shared_max_age' => 'setSharedMaxAge',
        'max_stale' => 'setMaxStale',
        'max_stale_limit' => 'setMaxStaleLimit',
        'min_fresh' => 'setMinFresh',
        'no_transform' => 'setNoTransform',
        'only_if_cached' => 'setOnlyIfCached',
        'public' => 'setPublic',
        'private' => 'setPrivate',
        'private_headers' => 'setPrivateHeaders',
        'must_revalidate' => 'setMustRevalidate',
        'proxy_revalidate' => 'setProxyRevalidate',
        'extensions' => 'setExtensions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'no_cache' => 'getNoCache',
        'no_cache_headers' => 'getNoCacheHeaders',
        'no_store' => 'getNoStore',
        'max_age' => 'getMaxAge',
        'shared_max_age' => 'getSharedMaxAge',
        'max_stale' => 'getMaxStale',
        'max_stale_limit' => 'getMaxStaleLimit',
        'min_fresh' => 'getMinFresh',
        'no_transform' => 'getNoTransform',
        'only_if_cached' => 'getOnlyIfCached',
        'public' => 'getPublic',
        'private' => 'getPrivate',
        'private_headers' => 'getPrivateHeaders',
        'must_revalidate' => 'getMustRevalidate',
        'proxy_revalidate' => 'getProxyRevalidate',
        'extensions' => 'getExtensions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['no_cache'] = isset($data['no_cache']) ? $data['no_cache'] : null;
        $this->container['no_cache_headers'] = isset($data['no_cache_headers']) ? $data['no_cache_headers'] : null;
        $this->container['no_store'] = isset($data['no_store']) ? $data['no_store'] : null;
        $this->container['max_age'] = isset($data['max_age']) ? $data['max_age'] : null;
        $this->container['shared_max_age'] = isset($data['shared_max_age']) ? $data['shared_max_age'] : null;
        $this->container['max_stale'] = isset($data['max_stale']) ? $data['max_stale'] : null;
        $this->container['max_stale_limit'] = isset($data['max_stale_limit']) ? $data['max_stale_limit'] : null;
        $this->container['min_fresh'] = isset($data['min_fresh']) ? $data['min_fresh'] : null;
        $this->container['no_transform'] = isset($data['no_transform']) ? $data['no_transform'] : null;
        $this->container['only_if_cached'] = isset($data['only_if_cached']) ? $data['only_if_cached'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['private_headers'] = isset($data['private_headers']) ? $data['private_headers'] : null;
        $this->container['must_revalidate'] = isset($data['must_revalidate']) ? $data['must_revalidate'] : null;
        $this->container['proxy_revalidate'] = isset($data['proxy_revalidate']) ? $data['proxy_revalidate'] : null;
        $this->container['extensions'] = isset($data['extensions']) ? $data['extensions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['no_cache'] === null) {
            $invalidProperties[] = "'no_cache' can't be null";
        }
        if ($this->container['no_store'] === null) {
            $invalidProperties[] = "'no_store' can't be null";
        }
        if ($this->container['max_stale'] === null) {
            $invalidProperties[] = "'max_stale' can't be null";
        }
        if ($this->container['no_transform'] === null) {
            $invalidProperties[] = "'no_transform' can't be null";
        }
        if ($this->container['only_if_cached'] === null) {
            $invalidProperties[] = "'only_if_cached' can't be null";
        }
        if ($this->container['public'] === null) {
            $invalidProperties[] = "'public' can't be null";
        }
        if ($this->container['private'] === null) {
            $invalidProperties[] = "'private' can't be null";
        }
        if ($this->container['must_revalidate'] === null) {
            $invalidProperties[] = "'must_revalidate' can't be null";
        }
        if ($this->container['proxy_revalidate'] === null) {
            $invalidProperties[] = "'proxy_revalidate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets no_cache
     *
     * @return bool
     */
    public function getNoCache()
    {
        return $this->container['no_cache'];
    }

    /**
     * Sets no_cache
     *
     * @param bool $no_cache no_cache
     *
     * @return $this
     */
    public function setNoCache($no_cache)
    {
        $this->container['no_cache'] = $no_cache;

        return $this;
    }

    /**
     * Gets no_cache_headers
     *
     * @return string[]
     */
    public function getNoCacheHeaders()
    {
        return $this->container['no_cache_headers'];
    }

    /**
     * Sets no_cache_headers
     *
     * @param string[] $no_cache_headers no_cache_headers
     *
     * @return $this
     */
    public function setNoCacheHeaders($no_cache_headers)
    {
        $this->container['no_cache_headers'] = $no_cache_headers;

        return $this;
    }

    /**
     * Gets no_store
     *
     * @return bool
     */
    public function getNoStore()
    {
        return $this->container['no_store'];
    }

    /**
     * Sets no_store
     *
     * @param bool $no_store no_store
     *
     * @return $this
     */
    public function setNoStore($no_store)
    {
        $this->container['no_store'] = $no_store;

        return $this;
    }

    /**
     * Gets max_age
     *
     * @return string
     */
    public function getMaxAge()
    {
        return $this->container['max_age'];
    }

    /**
     * Sets max_age
     *
     * @param string $max_age max_age
     *
     * @return $this
     */
    public function setMaxAge($max_age)
    {
        $this->container['max_age'] = $max_age;

        return $this;
    }

    /**
     * Gets shared_max_age
     *
     * @return string
     */
    public function getSharedMaxAge()
    {
        return $this->container['shared_max_age'];
    }

    /**
     * Sets shared_max_age
     *
     * @param string $shared_max_age shared_max_age
     *
     * @return $this
     */
    public function setSharedMaxAge($shared_max_age)
    {
        $this->container['shared_max_age'] = $shared_max_age;

        return $this;
    }

    /**
     * Gets max_stale
     *
     * @return bool
     */
    public function getMaxStale()
    {
        return $this->container['max_stale'];
    }

    /**
     * Sets max_stale
     *
     * @param bool $max_stale max_stale
     *
     * @return $this
     */
    public function setMaxStale($max_stale)
    {
        $this->container['max_stale'] = $max_stale;

        return $this;
    }

    /**
     * Gets max_stale_limit
     *
     * @return string
     */
    public function getMaxStaleLimit()
    {
        return $this->container['max_stale_limit'];
    }

    /**
     * Sets max_stale_limit
     *
     * @param string $max_stale_limit max_stale_limit
     *
     * @return $this
     */
    public function setMaxStaleLimit($max_stale_limit)
    {
        $this->container['max_stale_limit'] = $max_stale_limit;

        return $this;
    }

    /**
     * Gets min_fresh
     *
     * @return string
     */
    public function getMinFresh()
    {
        return $this->container['min_fresh'];
    }

    /**
     * Sets min_fresh
     *
     * @param string $min_fresh min_fresh
     *
     * @return $this
     */
    public function setMinFresh($min_fresh)
    {
        $this->container['min_fresh'] = $min_fresh;

        return $this;
    }

    /**
     * Gets no_transform
     *
     * @return bool
     */
    public function getNoTransform()
    {
        return $this->container['no_transform'];
    }

    /**
     * Sets no_transform
     *
     * @param bool $no_transform no_transform
     *
     * @return $this
     */
    public function setNoTransform($no_transform)
    {
        $this->container['no_transform'] = $no_transform;

        return $this;
    }

    /**
     * Gets only_if_cached
     *
     * @return bool
     */
    public function getOnlyIfCached()
    {
        return $this->container['only_if_cached'];
    }

    /**
     * Sets only_if_cached
     *
     * @param bool $only_if_cached only_if_cached
     *
     * @return $this
     */
    public function setOnlyIfCached($only_if_cached)
    {
        $this->container['only_if_cached'] = $only_if_cached;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private private
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets private_headers
     *
     * @return string[]
     */
    public function getPrivateHeaders()
    {
        return $this->container['private_headers'];
    }

    /**
     * Sets private_headers
     *
     * @param string[] $private_headers private_headers
     *
     * @return $this
     */
    public function setPrivateHeaders($private_headers)
    {
        $this->container['private_headers'] = $private_headers;

        return $this;
    }

    /**
     * Gets must_revalidate
     *
     * @return bool
     */
    public function getMustRevalidate()
    {
        return $this->container['must_revalidate'];
    }

    /**
     * Sets must_revalidate
     *
     * @param bool $must_revalidate must_revalidate
     *
     * @return $this
     */
    public function setMustRevalidate($must_revalidate)
    {
        $this->container['must_revalidate'] = $must_revalidate;

        return $this;
    }

    /**
     * Gets proxy_revalidate
     *
     * @return bool
     */
    public function getProxyRevalidate()
    {
        return $this->container['proxy_revalidate'];
    }

    /**
     * Sets proxy_revalidate
     *
     * @param bool $proxy_revalidate proxy_revalidate
     *
     * @return $this
     */
    public function setProxyRevalidate($proxy_revalidate)
    {
        $this->container['proxy_revalidate'] = $proxy_revalidate;

        return $this;
    }

    /**
     * Gets extensions
     *
     * @return \Swagger\Client\Model\NameValueHeaderValue[]
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     *
     * @param \Swagger\Client\Model\NameValueHeaderValue[] $extensions extensions
     *
     * @return $this
     */
    public function setExtensions($extensions)
    {
        $this->container['extensions'] = $extensions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


