<?php
/**
 * Employee
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Employee Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Employee extends Person 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Employee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'about_me' => '\Swagger\Client\Model\Translation[]',
        'association_info' => '\Swagger\Client\Model\RealEstateAssociationInfo',
        'certification' => '\Swagger\Client\Model\CertificationDetails',
        'letter_avatar' => 'string',
        'linked_offices' => '\Swagger\Client\Model\LinkedOffice[]',
        'roles' => '\Swagger\Client\Model\EmployeeRole[]',
        'linked_folder_tree' => '\Swagger\Client\Model\LinkedFolderTree'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'about_me' => null,
        'association_info' => null,
        'certification' => null,
        'letter_avatar' => null,
        'linked_offices' => null,
        'roles' => null,
        'linked_folder_tree' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'about_me' => 'aboutMe',
        'association_info' => 'associationInfo',
        'certification' => 'certification',
        'letter_avatar' => 'letterAvatar',
        'linked_offices' => 'linkedOffices',
        'roles' => 'roles',
        'linked_folder_tree' => 'linkedFolderTree'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'about_me' => 'setAboutMe',
        'association_info' => 'setAssociationInfo',
        'certification' => 'setCertification',
        'letter_avatar' => 'setLetterAvatar',
        'linked_offices' => 'setLinkedOffices',
        'roles' => 'setRoles',
        'linked_folder_tree' => 'setLinkedFolderTree'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'about_me' => 'getAboutMe',
        'association_info' => 'getAssociationInfo',
        'certification' => 'getCertification',
        'letter_avatar' => 'getLetterAvatar',
        'linked_offices' => 'getLinkedOffices',
        'roles' => 'getRoles',
        'linked_folder_tree' => 'getLinkedFolderTree'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['about_me'] = isset($data['about_me']) ? $data['about_me'] : null;
        $this->container['association_info'] = isset($data['association_info']) ? $data['association_info'] : null;
        $this->container['certification'] = isset($data['certification']) ? $data['certification'] : null;
        $this->container['letter_avatar'] = isset($data['letter_avatar']) ? $data['letter_avatar'] : null;
        $this->container['linked_offices'] = isset($data['linked_offices']) ? $data['linked_offices'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['linked_folder_tree'] = isset($data['linked_folder_tree']) ? $data['linked_folder_tree'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets about_me
     *
     * @return \Swagger\Client\Model\Translation[]
     */
    public function getAboutMe()
    {
        return $this->container['about_me'];
    }

    /**
     * Sets about_me
     *
     * @param \Swagger\Client\Model\Translation[] $about_me about_me
     *
     * @return $this
     */
    public function setAboutMe($about_me)
    {
        $this->container['about_me'] = $about_me;

        return $this;
    }

    /**
     * Gets association_info
     *
     * @return \Swagger\Client\Model\RealEstateAssociationInfo
     */
    public function getAssociationInfo()
    {
        return $this->container['association_info'];
    }

    /**
     * Sets association_info
     *
     * @param \Swagger\Client\Model\RealEstateAssociationInfo $association_info association_info
     *
     * @return $this
     */
    public function setAssociationInfo($association_info)
    {
        $this->container['association_info'] = $association_info;

        return $this;
    }

    /**
     * Gets certification
     *
     * @return \Swagger\Client\Model\CertificationDetails
     */
    public function getCertification()
    {
        return $this->container['certification'];
    }

    /**
     * Sets certification
     *
     * @param \Swagger\Client\Model\CertificationDetails $certification certification
     *
     * @return $this
     */
    public function setCertification($certification)
    {
        $this->container['certification'] = $certification;

        return $this;
    }

    /**
     * Gets letter_avatar
     *
     * @return string
     */
    public function getLetterAvatar()
    {
        return $this->container['letter_avatar'];
    }

    /**
     * Sets letter_avatar
     *
     * @param string $letter_avatar letter_avatar
     *
     * @return $this
     */
    public function setLetterAvatar($letter_avatar)
    {
        $this->container['letter_avatar'] = $letter_avatar;

        return $this;
    }

    /**
     * Gets linked_offices
     *
     * @return \Swagger\Client\Model\LinkedOffice[]
     */
    public function getLinkedOffices()
    {
        return $this->container['linked_offices'];
    }

    /**
     * Sets linked_offices
     *
     * @param \Swagger\Client\Model\LinkedOffice[] $linked_offices linked_offices
     *
     * @return $this
     */
    public function setLinkedOffices($linked_offices)
    {
        $this->container['linked_offices'] = $linked_offices;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Swagger\Client\Model\EmployeeRole[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Swagger\Client\Model\EmployeeRole[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets linked_folder_tree
     *
     * @return \Swagger\Client\Model\LinkedFolderTree
     */
    public function getLinkedFolderTree()
    {
        return $this->container['linked_folder_tree'];
    }

    /**
     * Sets linked_folder_tree
     *
     * @param \Swagger\Client\Model\LinkedFolderTree $linked_folder_tree linked_folder_tree
     *
     * @return $this
     */
    public function setLinkedFolderTree($linked_folder_tree)
    {
        $this->container['linked_folder_tree'] = $linked_folder_tree;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


