<?php
/**
 * CadastresBuyAndSaveRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CadastresBuyAndSaveRequest Class Doc Comment
 *
 * @category Class
 * @description Perform a request at the Cadaster Service for Cadastres (maps and messages) by postcode or parcel Id. When doing a request for postalcodes do enter values for: postalCode, houseNumber, houseNumberPostfix and countryIso2. When doing a request for parcel Id do enter values for: municipalityId, municipalityName, sectionNumber, parcelNumber, apartmentRightSerialNumber and countryIso2. You can use the mastertable endpoint to fetch valid municipality id&#39;s and names.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CadastresBuyAndSaveRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CadastresBuyAndSaveRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apartment_right_serial_number' => 'string',
        'country_iso2' => 'string',
        'house_number' => 'int',
        'house_number_postfix' => 'string',
        'municipality_id' => 'string',
        'municipality_name' => 'string',
        'parcel_number' => 'string',
        'postal_code' => 'string',
        'section_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apartment_right_serial_number' => null,
        'country_iso2' => null,
        'house_number' => 'int32',
        'house_number_postfix' => null,
        'municipality_id' => null,
        'municipality_name' => null,
        'parcel_number' => null,
        'postal_code' => null,
        'section_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apartment_right_serial_number' => 'apartmentRightSerialNumber',
        'country_iso2' => 'countryIso2',
        'house_number' => 'houseNumber',
        'house_number_postfix' => 'houseNumberPostfix',
        'municipality_id' => 'municipalityId',
        'municipality_name' => 'municipalityName',
        'parcel_number' => 'parcelNumber',
        'postal_code' => 'postalCode',
        'section_number' => 'sectionNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apartment_right_serial_number' => 'setApartmentRightSerialNumber',
        'country_iso2' => 'setCountryIso2',
        'house_number' => 'setHouseNumber',
        'house_number_postfix' => 'setHouseNumberPostfix',
        'municipality_id' => 'setMunicipalityId',
        'municipality_name' => 'setMunicipalityName',
        'parcel_number' => 'setParcelNumber',
        'postal_code' => 'setPostalCode',
        'section_number' => 'setSectionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apartment_right_serial_number' => 'getApartmentRightSerialNumber',
        'country_iso2' => 'getCountryIso2',
        'house_number' => 'getHouseNumber',
        'house_number_postfix' => 'getHouseNumberPostfix',
        'municipality_id' => 'getMunicipalityId',
        'municipality_name' => 'getMunicipalityName',
        'parcel_number' => 'getParcelNumber',
        'postal_code' => 'getPostalCode',
        'section_number' => 'getSectionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apartment_right_serial_number'] = isset($data['apartment_right_serial_number']) ? $data['apartment_right_serial_number'] : null;
        $this->container['country_iso2'] = isset($data['country_iso2']) ? $data['country_iso2'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['house_number_postfix'] = isset($data['house_number_postfix']) ? $data['house_number_postfix'] : null;
        $this->container['municipality_id'] = isset($data['municipality_id']) ? $data['municipality_id'] : null;
        $this->container['municipality_name'] = isset($data['municipality_name']) ? $data['municipality_name'] : null;
        $this->container['parcel_number'] = isset($data['parcel_number']) ? $data['parcel_number'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['section_number'] = isset($data['section_number']) ? $data['section_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['country_iso2'] === null) {
            $invalidProperties[] = "'country_iso2' can't be null";
        }
        if ((mb_strlen($this->container['country_iso2']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_iso2', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['country_iso2']) < 2)) {
            $invalidProperties[] = "invalid value for 'country_iso2', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['house_number'] === null) {
            $invalidProperties[] = "'house_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apartment_right_serial_number
     *
     * @return string
     */
    public function getApartmentRightSerialNumber()
    {
        return $this->container['apartment_right_serial_number'];
    }

    /**
     * Sets apartment_right_serial_number
     *
     * @param string $apartment_right_serial_number In Dutch: \"appartmentsrecht volgnummer\".
     *
     * @return $this
     */
    public function setApartmentRightSerialNumber($apartment_right_serial_number)
    {
        $this->container['apartment_right_serial_number'] = $apartment_right_serial_number;

        return $this;
    }

    /**
     * Gets country_iso2
     *
     * @return string
     */
    public function getCountryIso2()
    {
        return $this->container['country_iso2'];
    }

    /**
     * Sets country_iso2
     *
     * @param string $country_iso2 country_iso2
     *
     * @return $this
     */
    public function setCountryIso2($country_iso2)
    {
        if ((mb_strlen($country_iso2) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_iso2 when calling CadastresBuyAndSaveRequest., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($country_iso2) < 2)) {
            throw new \InvalidArgumentException('invalid length for $country_iso2 when calling CadastresBuyAndSaveRequest., must be bigger than or equal to 2.');
        }

        $this->container['country_iso2'] = $country_iso2;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return int
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param int $house_number house_number
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_postfix
     *
     * @return string
     */
    public function getHouseNumberPostfix()
    {
        return $this->container['house_number_postfix'];
    }

    /**
     * Sets house_number_postfix
     *
     * @param string $house_number_postfix house_number_postfix
     *
     * @return $this
     */
    public function setHouseNumberPostfix($house_number_postfix)
    {
        $this->container['house_number_postfix'] = $house_number_postfix;

        return $this;
    }

    /**
     * Gets municipality_id
     *
     * @return string
     */
    public function getMunicipalityId()
    {
        return $this->container['municipality_id'];
    }

    /**
     * Sets municipality_id
     *
     * @param string $municipality_id In Dutch: \"gemeente code\".
     *
     * @return $this
     */
    public function setMunicipalityId($municipality_id)
    {
        $this->container['municipality_id'] = $municipality_id;

        return $this;
    }

    /**
     * Gets municipality_name
     *
     * @return string
     */
    public function getMunicipalityName()
    {
        return $this->container['municipality_name'];
    }

    /**
     * Sets municipality_name
     *
     * @param string $municipality_name In Dutch: \"gemeente\".
     *
     * @return $this
     */
    public function setMunicipalityName($municipality_name)
    {
        $this->container['municipality_name'] = $municipality_name;

        return $this;
    }

    /**
     * Gets parcel_number
     *
     * @return string
     */
    public function getParcelNumber()
    {
        return $this->container['parcel_number'];
    }

    /**
     * Sets parcel_number
     *
     * @param string $parcel_number In Dutch: \"perceel nummer\".
     *
     * @return $this
     */
    public function setParcelNumber($parcel_number)
    {
        $this->container['parcel_number'] = $parcel_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets section_number
     *
     * @return string
     */
    public function getSectionNumber()
    {
        return $this->container['section_number'];
    }

    /**
     * Sets section_number
     *
     * @param string $section_number In Dutch: \"sectie\".
     *
     * @return $this
     */
    public function setSectionNumber($section_number)
    {
        $this->container['section_number'] = $section_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


