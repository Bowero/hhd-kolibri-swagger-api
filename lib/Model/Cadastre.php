<?php
/**
 * Cadastre
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Cadastre Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Cadastre extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Cadastre';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\Address',
        'apartment_rights' => '\Swagger\Client\Model\CadastralApartmentRights',
        'cadastral_details' => '\Swagger\Client\Model\CadastralDetails',
        'cadastral_id' => 'string',
        'has_note_or_drag' => 'bool',
        'is_more_real_estate_present' => 'bool',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'map' => '\Swagger\Client\Model\CadastralBlob',
        'message' => '\Swagger\Client\Model\CadastralBlob',
        'notarial_description' => 'string',
        'ownership_details' => '\Swagger\Client\Model\OwnershipDetails',
        'retrieved_on' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'apartment_rights' => null,
        'cadastral_details' => null,
        'cadastral_id' => null,
        'has_note_or_drag' => null,
        'is_more_real_estate_present' => null,
        'linked_assignment' => null,
        'map' => null,
        'message' => null,
        'notarial_description' => null,
        'ownership_details' => null,
        'retrieved_on' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'apartment_rights' => 'apartmentRights',
        'cadastral_details' => 'cadastralDetails',
        'cadastral_id' => 'cadastralId',
        'has_note_or_drag' => 'hasNoteOrDrag',
        'is_more_real_estate_present' => 'isMoreRealEstatePresent',
        'linked_assignment' => 'linkedAssignment',
        'map' => 'map',
        'message' => 'message',
        'notarial_description' => 'notarialDescription',
        'ownership_details' => 'ownershipDetails',
        'retrieved_on' => 'retrievedOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'apartment_rights' => 'setApartmentRights',
        'cadastral_details' => 'setCadastralDetails',
        'cadastral_id' => 'setCadastralId',
        'has_note_or_drag' => 'setHasNoteOrDrag',
        'is_more_real_estate_present' => 'setIsMoreRealEstatePresent',
        'linked_assignment' => 'setLinkedAssignment',
        'map' => 'setMap',
        'message' => 'setMessage',
        'notarial_description' => 'setNotarialDescription',
        'ownership_details' => 'setOwnershipDetails',
        'retrieved_on' => 'setRetrievedOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'apartment_rights' => 'getApartmentRights',
        'cadastral_details' => 'getCadastralDetails',
        'cadastral_id' => 'getCadastralId',
        'has_note_or_drag' => 'getHasNoteOrDrag',
        'is_more_real_estate_present' => 'getIsMoreRealEstatePresent',
        'linked_assignment' => 'getLinkedAssignment',
        'map' => 'getMap',
        'message' => 'getMessage',
        'notarial_description' => 'getNotarialDescription',
        'ownership_details' => 'getOwnershipDetails',
        'retrieved_on' => 'getRetrievedOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['apartment_rights'] = isset($data['apartment_rights']) ? $data['apartment_rights'] : null;
        $this->container['cadastral_details'] = isset($data['cadastral_details']) ? $data['cadastral_details'] : null;
        $this->container['cadastral_id'] = isset($data['cadastral_id']) ? $data['cadastral_id'] : null;
        $this->container['has_note_or_drag'] = isset($data['has_note_or_drag']) ? $data['has_note_or_drag'] : null;
        $this->container['is_more_real_estate_present'] = isset($data['is_more_real_estate_present']) ? $data['is_more_real_estate_present'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['map'] = isset($data['map']) ? $data['map'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['notarial_description'] = isset($data['notarial_description']) ? $data['notarial_description'] : null;
        $this->container['ownership_details'] = isset($data['ownership_details']) ? $data['ownership_details'] : null;
        $this->container['retrieved_on'] = isset($data['retrieved_on']) ? $data['retrieved_on'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets apartment_rights
     *
     * @return \Swagger\Client\Model\CadastralApartmentRights
     */
    public function getApartmentRights()
    {
        return $this->container['apartment_rights'];
    }

    /**
     * Sets apartment_rights
     *
     * @param \Swagger\Client\Model\CadastralApartmentRights $apartment_rights apartment_rights
     *
     * @return $this
     */
    public function setApartmentRights($apartment_rights)
    {
        $this->container['apartment_rights'] = $apartment_rights;

        return $this;
    }

    /**
     * Gets cadastral_details
     *
     * @return \Swagger\Client\Model\CadastralDetails
     */
    public function getCadastralDetails()
    {
        return $this->container['cadastral_details'];
    }

    /**
     * Sets cadastral_details
     *
     * @param \Swagger\Client\Model\CadastralDetails $cadastral_details cadastral_details
     *
     * @return $this
     */
    public function setCadastralDetails($cadastral_details)
    {
        $this->container['cadastral_details'] = $cadastral_details;

        return $this;
    }

    /**
     * Gets cadastral_id
     *
     * @return string
     */
    public function getCadastralId()
    {
        return $this->container['cadastral_id'];
    }

    /**
     * Sets cadastral_id
     *
     * @param string $cadastral_id cadastral_id
     *
     * @return $this
     */
    public function setCadastralId($cadastral_id)
    {
        $this->container['cadastral_id'] = $cadastral_id;

        return $this;
    }

    /**
     * Gets has_note_or_drag
     *
     * @return bool
     */
    public function getHasNoteOrDrag()
    {
        return $this->container['has_note_or_drag'];
    }

    /**
     * Sets has_note_or_drag
     *
     * @param bool $has_note_or_drag In Dutch: heeft een aantekening of een belemmering.
     *
     * @return $this
     */
    public function setHasNoteOrDrag($has_note_or_drag)
    {
        $this->container['has_note_or_drag'] = $has_note_or_drag;

        return $this;
    }

    /**
     * Gets is_more_real_estate_present
     *
     * @return bool
     */
    public function getIsMoreRealEstatePresent()
    {
        return $this->container['is_more_real_estate_present'];
    }

    /**
     * Sets is_more_real_estate_present
     *
     * @param bool $is_more_real_estate_present In Dutch: er is meer onroerendgoed aanwezig.
     *
     * @return $this
     */
    public function setIsMoreRealEstatePresent($is_more_real_estate_present)
    {
        $this->container['is_more_real_estate_present'] = $is_more_real_estate_present;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets map
     *
     * @return \Swagger\Client\Model\CadastralBlob
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param \Swagger\Client\Model\CadastralBlob $map map
     *
     * @return $this
     */
    public function setMap($map)
    {
        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets message
     *
     * @return \Swagger\Client\Model\CadastralBlob
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param \Swagger\Client\Model\CadastralBlob $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets notarial_description
     *
     * @return string
     */
    public function getNotarialDescription()
    {
        return $this->container['notarial_description'];
    }

    /**
     * Sets notarial_description
     *
     * @param string $notarial_description notarial_description
     *
     * @return $this
     */
    public function setNotarialDescription($notarial_description)
    {
        $this->container['notarial_description'] = $notarial_description;

        return $this;
    }

    /**
     * Gets ownership_details
     *
     * @return \Swagger\Client\Model\OwnershipDetails
     */
    public function getOwnershipDetails()
    {
        return $this->container['ownership_details'];
    }

    /**
     * Sets ownership_details
     *
     * @param \Swagger\Client\Model\OwnershipDetails $ownership_details ownership_details
     *
     * @return $this
     */
    public function setOwnershipDetails($ownership_details)
    {
        $this->container['ownership_details'] = $ownership_details;

        return $this;
    }

    /**
     * Gets retrieved_on
     *
     * @return \DateTime
     */
    public function getRetrievedOn()
    {
        return $this->container['retrieved_on'];
    }

    /**
     * Sets retrieved_on
     *
     * @param \DateTime $retrieved_on retrieved_on
     *
     * @return $this
     */
    public function setRetrievedOn($retrieved_on)
    {
        $this->container['retrieved_on'] = $retrieved_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


