<?php
/**
 * MatchedPropertySnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchedPropertySnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchedPropertySnapShot extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MatchedPropertySnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rent_price' => 'float',
        'sale_price' => 'float',
        'is_active' => 'bool',
        'for_sale' => 'bool',
        'for_rent' => 'bool',
        'postal_code' => 'string',
        'country_code' => 'string',
        'assignment_phase' => 'object',
        'availability_status' => '\Swagger\Client\Model\AvailabilityStatus',
        'listing_type' => '\Swagger\Client\Model\ListingType',
        'photo1_url' => 'string',
        'photo2_url' => 'string',
        'photo3_url' => 'string',
        'sale_condition' => '\Swagger\Client\Model\SaleCondition',
        'display_name' => 'string',
        'origin_type' => '\Swagger\Client\Model\OriginType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rent_price' => 'decimal',
        'sale_price' => 'decimal',
        'is_active' => null,
        'for_sale' => null,
        'for_rent' => null,
        'postal_code' => null,
        'country_code' => null,
        'assignment_phase' => null,
        'availability_status' => null,
        'listing_type' => null,
        'photo1_url' => null,
        'photo2_url' => null,
        'photo3_url' => null,
        'sale_condition' => null,
        'display_name' => null,
        'origin_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rent_price' => 'rentPrice',
        'sale_price' => 'salePrice',
        'is_active' => 'isActive',
        'for_sale' => 'forSale',
        'for_rent' => 'forRent',
        'postal_code' => 'postalCode',
        'country_code' => 'countryCode',
        'assignment_phase' => 'assignmentPhase',
        'availability_status' => 'availabilityStatus',
        'listing_type' => 'listingType',
        'photo1_url' => 'photo1Url',
        'photo2_url' => 'photo2Url',
        'photo3_url' => 'photo3Url',
        'sale_condition' => 'saleCondition',
        'display_name' => 'displayName',
        'origin_type' => 'originType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rent_price' => 'setRentPrice',
        'sale_price' => 'setSalePrice',
        'is_active' => 'setIsActive',
        'for_sale' => 'setForSale',
        'for_rent' => 'setForRent',
        'postal_code' => 'setPostalCode',
        'country_code' => 'setCountryCode',
        'assignment_phase' => 'setAssignmentPhase',
        'availability_status' => 'setAvailabilityStatus',
        'listing_type' => 'setListingType',
        'photo1_url' => 'setPhoto1Url',
        'photo2_url' => 'setPhoto2Url',
        'photo3_url' => 'setPhoto3Url',
        'sale_condition' => 'setSaleCondition',
        'display_name' => 'setDisplayName',
        'origin_type' => 'setOriginType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rent_price' => 'getRentPrice',
        'sale_price' => 'getSalePrice',
        'is_active' => 'getIsActive',
        'for_sale' => 'getForSale',
        'for_rent' => 'getForRent',
        'postal_code' => 'getPostalCode',
        'country_code' => 'getCountryCode',
        'assignment_phase' => 'getAssignmentPhase',
        'availability_status' => 'getAvailabilityStatus',
        'listing_type' => 'getListingType',
        'photo1_url' => 'getPhoto1Url',
        'photo2_url' => 'getPhoto2Url',
        'photo3_url' => 'getPhoto3Url',
        'sale_condition' => 'getSaleCondition',
        'display_name' => 'getDisplayName',
        'origin_type' => 'getOriginType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['rent_price'] = isset($data['rent_price']) ? $data['rent_price'] : null;
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['for_sale'] = isset($data['for_sale']) ? $data['for_sale'] : null;
        $this->container['for_rent'] = isset($data['for_rent']) ? $data['for_rent'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['assignment_phase'] = isset($data['assignment_phase']) ? $data['assignment_phase'] : null;
        $this->container['availability_status'] = isset($data['availability_status']) ? $data['availability_status'] : null;
        $this->container['listing_type'] = isset($data['listing_type']) ? $data['listing_type'] : null;
        $this->container['photo1_url'] = isset($data['photo1_url']) ? $data['photo1_url'] : null;
        $this->container['photo2_url'] = isset($data['photo2_url']) ? $data['photo2_url'] : null;
        $this->container['photo3_url'] = isset($data['photo3_url']) ? $data['photo3_url'] : null;
        $this->container['sale_condition'] = isset($data['sale_condition']) ? $data['sale_condition'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['origin_type'] = isset($data['origin_type']) ? $data['origin_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rent_price
     *
     * @return float
     */
    public function getRentPrice()
    {
        return $this->container['rent_price'];
    }

    /**
     * Sets rent_price
     *
     * @param float $rent_price rent_price
     *
     * @return $this
     */
    public function setRentPrice($rent_price)
    {
        $this->container['rent_price'] = $rent_price;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return float
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param float $sale_price sale_price
     *
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets for_sale
     *
     * @return bool
     */
    public function getForSale()
    {
        return $this->container['for_sale'];
    }

    /**
     * Sets for_sale
     *
     * @param bool $for_sale for_sale
     *
     * @return $this
     */
    public function setForSale($for_sale)
    {
        $this->container['for_sale'] = $for_sale;

        return $this;
    }

    /**
     * Gets for_rent
     *
     * @return bool
     */
    public function getForRent()
    {
        return $this->container['for_rent'];
    }

    /**
     * Sets for_rent
     *
     * @param bool $for_rent for_rent
     *
     * @return $this
     */
    public function setForRent($for_rent)
    {
        $this->container['for_rent'] = $for_rent;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets assignment_phase
     *
     * @return object
     */
    public function getAssignmentPhase()
    {
        return $this->container['assignment_phase'];
    }

    /**
     * Sets assignment_phase
     *
     * @param object $assignment_phase Assignment phase ('Concept', 'Initiated' or 'Completed').
     *
     * @return $this
     */
    public function setAssignmentPhase($assignment_phase)
    {
        $this->container['assignment_phase'] = $assignment_phase;

        return $this;
    }

    /**
     * Gets availability_status
     *
     * @return \Swagger\Client\Model\AvailabilityStatus
     */
    public function getAvailabilityStatus()
    {
        return $this->container['availability_status'];
    }

    /**
     * Sets availability_status
     *
     * @param \Swagger\Client\Model\AvailabilityStatus $availability_status availability_status
     *
     * @return $this
     */
    public function setAvailabilityStatus($availability_status)
    {
        $this->container['availability_status'] = $availability_status;

        return $this;
    }

    /**
     * Gets listing_type
     *
     * @return \Swagger\Client\Model\ListingType
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     *
     * @param \Swagger\Client\Model\ListingType $listing_type listing_type
     *
     * @return $this
     */
    public function setListingType($listing_type)
    {
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets photo1_url
     *
     * @return string
     */
    public function getPhoto1Url()
    {
        return $this->container['photo1_url'];
    }

    /**
     * Sets photo1_url
     *
     * @param string $photo1_url photo1_url
     *
     * @return $this
     */
    public function setPhoto1Url($photo1_url)
    {
        $this->container['photo1_url'] = $photo1_url;

        return $this;
    }

    /**
     * Gets photo2_url
     *
     * @return string
     */
    public function getPhoto2Url()
    {
        return $this->container['photo2_url'];
    }

    /**
     * Sets photo2_url
     *
     * @param string $photo2_url photo2_url
     *
     * @return $this
     */
    public function setPhoto2Url($photo2_url)
    {
        $this->container['photo2_url'] = $photo2_url;

        return $this;
    }

    /**
     * Gets photo3_url
     *
     * @return string
     */
    public function getPhoto3Url()
    {
        return $this->container['photo3_url'];
    }

    /**
     * Sets photo3_url
     *
     * @param string $photo3_url photo3_url
     *
     * @return $this
     */
    public function setPhoto3Url($photo3_url)
    {
        $this->container['photo3_url'] = $photo3_url;

        return $this;
    }

    /**
     * Gets sale_condition
     *
     * @return \Swagger\Client\Model\SaleCondition
     */
    public function getSaleCondition()
    {
        return $this->container['sale_condition'];
    }

    /**
     * Sets sale_condition
     *
     * @param \Swagger\Client\Model\SaleCondition $sale_condition sale_condition
     *
     * @return $this
     */
    public function setSaleCondition($sale_condition)
    {
        $this->container['sale_condition'] = $sale_condition;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets origin_type
     *
     * @return \Swagger\Client\Model\OriginType
     */
    public function getOriginType()
    {
        return $this->container['origin_type'];
    }

    /**
     * Sets origin_type
     *
     * @param \Swagger\Client\Model\OriginType $origin_type origin_type
     *
     * @return $this
     */
    public function setOriginType($origin_type)
    {
        $this->container['origin_type'] = $origin_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


