<?php
/**
 * GeoSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GeoSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeoSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GeoSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country_iso2' => 'string',
        'culture' => 'string',
        'location' => 'string',
        'locality' => 'string',
        'postal_code' => 'string',
        'house_number_postfix' => 'string',
        'house_number' => 'int',
        'street' => 'string',
        'admin_area_level3' => 'string',
        'admin_area_level2' => 'string',
        'admin_area_level1' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country_iso2' => null,
        'culture' => null,
        'location' => null,
        'locality' => null,
        'postal_code' => null,
        'house_number_postfix' => null,
        'house_number' => 'int32',
        'street' => null,
        'admin_area_level3' => null,
        'admin_area_level2' => null,
        'admin_area_level1' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_iso2' => 'countryIso2',
        'culture' => 'culture',
        'location' => 'location',
        'locality' => 'locality',
        'postal_code' => 'postalCode',
        'house_number_postfix' => 'houseNumberPostfix',
        'house_number' => 'houseNumber',
        'street' => 'street',
        'admin_area_level3' => 'adminAreaLevel3',
        'admin_area_level2' => 'adminAreaLevel2',
        'admin_area_level1' => 'adminAreaLevel1'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_iso2' => 'setCountryIso2',
        'culture' => 'setCulture',
        'location' => 'setLocation',
        'locality' => 'setLocality',
        'postal_code' => 'setPostalCode',
        'house_number_postfix' => 'setHouseNumberPostfix',
        'house_number' => 'setHouseNumber',
        'street' => 'setStreet',
        'admin_area_level3' => 'setAdminAreaLevel3',
        'admin_area_level2' => 'setAdminAreaLevel2',
        'admin_area_level1' => 'setAdminAreaLevel1'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_iso2' => 'getCountryIso2',
        'culture' => 'getCulture',
        'location' => 'getLocation',
        'locality' => 'getLocality',
        'postal_code' => 'getPostalCode',
        'house_number_postfix' => 'getHouseNumberPostfix',
        'house_number' => 'getHouseNumber',
        'street' => 'getStreet',
        'admin_area_level3' => 'getAdminAreaLevel3',
        'admin_area_level2' => 'getAdminAreaLevel2',
        'admin_area_level1' => 'getAdminAreaLevel1'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_iso2'] = isset($data['country_iso2']) ? $data['country_iso2'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['house_number_postfix'] = isset($data['house_number_postfix']) ? $data['house_number_postfix'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['admin_area_level3'] = isset($data['admin_area_level3']) ? $data['admin_area_level3'] : null;
        $this->container['admin_area_level2'] = isset($data['admin_area_level2']) ? $data['admin_area_level2'] : null;
        $this->container['admin_area_level1'] = isset($data['admin_area_level1']) ? $data['admin_area_level1'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['country_iso2'] === null) {
            $invalidProperties[] = "'country_iso2' can't be null";
        }
        if ((mb_strlen($this->container['country_iso2']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_iso2', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['country_iso2']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_iso2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['culture'] === null) {
            $invalidProperties[] = "'culture' can't be null";
        }
        if ((mb_strlen($this->container['culture']) > 5)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be smaller than or equal to 5.";
        }

        if ((mb_strlen($this->container['culture']) < 0)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) > 150)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) < 0)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['locality']) && (mb_strlen($this->container['locality']) > 100)) {
            $invalidProperties[] = "invalid value for 'locality', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['locality']) && (mb_strlen($this->container['locality']) < 0)) {
            $invalidProperties[] = "invalid value for 'locality', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 100)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['house_number_postfix']) && (mb_strlen($this->container['house_number_postfix']) > 100)) {
            $invalidProperties[] = "invalid value for 'house_number_postfix', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['house_number_postfix']) && (mb_strlen($this->container['house_number_postfix']) < 0)) {
            $invalidProperties[] = "invalid value for 'house_number_postfix', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 100)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) < 0)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['admin_area_level3']) && (mb_strlen($this->container['admin_area_level3']) > 100)) {
            $invalidProperties[] = "invalid value for 'admin_area_level3', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['admin_area_level3']) && (mb_strlen($this->container['admin_area_level3']) < 0)) {
            $invalidProperties[] = "invalid value for 'admin_area_level3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['admin_area_level2']) && (mb_strlen($this->container['admin_area_level2']) > 100)) {
            $invalidProperties[] = "invalid value for 'admin_area_level2', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['admin_area_level2']) && (mb_strlen($this->container['admin_area_level2']) < 0)) {
            $invalidProperties[] = "invalid value for 'admin_area_level2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['admin_area_level1']) && (mb_strlen($this->container['admin_area_level1']) > 100)) {
            $invalidProperties[] = "invalid value for 'admin_area_level1', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['admin_area_level1']) && (mb_strlen($this->container['admin_area_level1']) < 0)) {
            $invalidProperties[] = "invalid value for 'admin_area_level1', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_iso2
     *
     * @return string
     */
    public function getCountryIso2()
    {
        return $this->container['country_iso2'];
    }

    /**
     * Sets country_iso2
     *
     * @param string $country_iso2 country_iso2
     *
     * @return $this
     */
    public function setCountryIso2($country_iso2)
    {
        if ((mb_strlen($country_iso2) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_iso2 when calling GeoSearchRequest., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($country_iso2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_iso2 when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['country_iso2'] = $country_iso2;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture The culture name in the format languagecode2-country/regioncode2.
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        if ((mb_strlen($culture) > 5)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling GeoSearchRequest., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($culture) < 0)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        if (!is_null($location) && (mb_strlen($location) > 150)) {
            throw new \InvalidArgumentException('invalid length for $location when calling GeoSearchRequest., must be smaller than or equal to 150.');
        }
        if (!is_null($location) && (mb_strlen($location) < 0)) {
            throw new \InvalidArgumentException('invalid length for $location when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality locality
     *
     * @return $this
     */
    public function setLocality($locality)
    {
        if (!is_null($locality) && (mb_strlen($locality) > 100)) {
            throw new \InvalidArgumentException('invalid length for $locality when calling GeoSearchRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($locality) && (mb_strlen($locality) < 0)) {
            throw new \InvalidArgumentException('invalid length for $locality when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 100)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling GeoSearchRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets house_number_postfix
     *
     * @return string
     */
    public function getHouseNumberPostfix()
    {
        return $this->container['house_number_postfix'];
    }

    /**
     * Sets house_number_postfix
     *
     * @param string $house_number_postfix house_number_postfix
     *
     * @return $this
     */
    public function setHouseNumberPostfix($house_number_postfix)
    {
        if (!is_null($house_number_postfix) && (mb_strlen($house_number_postfix) > 100)) {
            throw new \InvalidArgumentException('invalid length for $house_number_postfix when calling GeoSearchRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($house_number_postfix) && (mb_strlen($house_number_postfix) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_number_postfix when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['house_number_postfix'] = $house_number_postfix;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return int
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param int $house_number house_number
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        if (!is_null($street) && (mb_strlen($street) > 100)) {
            throw new \InvalidArgumentException('invalid length for $street when calling GeoSearchRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($street) && (mb_strlen($street) < 0)) {
            throw new \InvalidArgumentException('invalid length for $street when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets admin_area_level3
     *
     * @return string
     */
    public function getAdminAreaLevel3()
    {
        return $this->container['admin_area_level3'];
    }

    /**
     * Sets admin_area_level3
     *
     * @param string $admin_area_level3 admin_area_level3
     *
     * @return $this
     */
    public function setAdminAreaLevel3($admin_area_level3)
    {
        if (!is_null($admin_area_level3) && (mb_strlen($admin_area_level3) > 100)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_level3 when calling GeoSearchRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($admin_area_level3) && (mb_strlen($admin_area_level3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_level3 when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['admin_area_level3'] = $admin_area_level3;

        return $this;
    }

    /**
     * Gets admin_area_level2
     *
     * @return string
     */
    public function getAdminAreaLevel2()
    {
        return $this->container['admin_area_level2'];
    }

    /**
     * Sets admin_area_level2
     *
     * @param string $admin_area_level2 admin_area_level2
     *
     * @return $this
     */
    public function setAdminAreaLevel2($admin_area_level2)
    {
        if (!is_null($admin_area_level2) && (mb_strlen($admin_area_level2) > 100)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_level2 when calling GeoSearchRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($admin_area_level2) && (mb_strlen($admin_area_level2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_level2 when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['admin_area_level2'] = $admin_area_level2;

        return $this;
    }

    /**
     * Gets admin_area_level1
     *
     * @return string
     */
    public function getAdminAreaLevel1()
    {
        return $this->container['admin_area_level1'];
    }

    /**
     * Sets admin_area_level1
     *
     * @param string $admin_area_level1 admin_area_level1
     *
     * @return $this
     */
    public function setAdminAreaLevel1($admin_area_level1)
    {
        if (!is_null($admin_area_level1) && (mb_strlen($admin_area_level1) > 100)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_level1 when calling GeoSearchRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($admin_area_level1) && (mb_strlen($admin_area_level1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $admin_area_level1 when calling GeoSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['admin_area_level1'] = $admin_area_level1;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


