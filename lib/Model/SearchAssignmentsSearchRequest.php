<?php
/**
 * SearchAssignmentsSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * SearchAssignmentsSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchAssignmentsSearchRequest extends SearchRequest 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchAssignmentsSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_by' => 'object',
        'search_assignment_ids' => 'string[]',
        'assignment_phases' => '\Swagger\Client\Model\AssignmentPhase[]',
        'real_estate_groups' => '\Swagger\Client\Model\RealEstateGroup[]',
        'relation_ids' => 'string[]',
        'offer_types' => '\Swagger\Client\Model\OfferType[]',
        'match_mail_periods' => '\Swagger\Client\Model\MatchMailPeriod[]',
        'term_fields' => '\Swagger\Client\Model\SearchAssignmentTermField[]',
        'alv_types' => '\Swagger\Client\Model\TypeAlv[]',
        'bog_types' => '\Swagger\Client\Model\TypeBOG[]',
        'part_types' => '\Swagger\Client\Model\TypePART[]',
        'filter_by_paid' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_by' => null,
        'search_assignment_ids' => 'guid',
        'assignment_phases' => null,
        'real_estate_groups' => null,
        'relation_ids' => 'guid',
        'offer_types' => null,
        'match_mail_periods' => null,
        'term_fields' => null,
        'alv_types' => null,
        'bog_types' => null,
        'part_types' => null,
        'filter_by_paid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_by' => 'orderBy',
        'search_assignment_ids' => 'searchAssignmentIds',
        'assignment_phases' => 'assignmentPhases',
        'real_estate_groups' => 'realEstateGroups',
        'relation_ids' => 'relationIds',
        'offer_types' => 'offerTypes',
        'match_mail_periods' => 'matchMailPeriods',
        'term_fields' => 'termFields',
        'alv_types' => 'alvTypes',
        'bog_types' => 'bogTypes',
        'part_types' => 'partTypes',
        'filter_by_paid' => 'filterByPaid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_by' => 'setOrderBy',
        'search_assignment_ids' => 'setSearchAssignmentIds',
        'assignment_phases' => 'setAssignmentPhases',
        'real_estate_groups' => 'setRealEstateGroups',
        'relation_ids' => 'setRelationIds',
        'offer_types' => 'setOfferTypes',
        'match_mail_periods' => 'setMatchMailPeriods',
        'term_fields' => 'setTermFields',
        'alv_types' => 'setAlvTypes',
        'bog_types' => 'setBogTypes',
        'part_types' => 'setPartTypes',
        'filter_by_paid' => 'setFilterByPaid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_by' => 'getOrderBy',
        'search_assignment_ids' => 'getSearchAssignmentIds',
        'assignment_phases' => 'getAssignmentPhases',
        'real_estate_groups' => 'getRealEstateGroups',
        'relation_ids' => 'getRelationIds',
        'offer_types' => 'getOfferTypes',
        'match_mail_periods' => 'getMatchMailPeriods',
        'term_fields' => 'getTermFields',
        'alv_types' => 'getAlvTypes',
        'bog_types' => 'getBogTypes',
        'part_types' => 'getPartTypes',
        'filter_by_paid' => 'getFilterByPaid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['search_assignment_ids'] = isset($data['search_assignment_ids']) ? $data['search_assignment_ids'] : null;
        $this->container['assignment_phases'] = isset($data['assignment_phases']) ? $data['assignment_phases'] : null;
        $this->container['real_estate_groups'] = isset($data['real_estate_groups']) ? $data['real_estate_groups'] : null;
        $this->container['relation_ids'] = isset($data['relation_ids']) ? $data['relation_ids'] : null;
        $this->container['offer_types'] = isset($data['offer_types']) ? $data['offer_types'] : null;
        $this->container['match_mail_periods'] = isset($data['match_mail_periods']) ? $data['match_mail_periods'] : null;
        $this->container['term_fields'] = isset($data['term_fields']) ? $data['term_fields'] : null;
        $this->container['alv_types'] = isset($data['alv_types']) ? $data['alv_types'] : null;
        $this->container['bog_types'] = isset($data['bog_types']) ? $data['bog_types'] : null;
        $this->container['part_types'] = isset($data['part_types']) ? $data['part_types'] : null;
        $this->container['filter_by_paid'] = isset($data['filter_by_paid']) ? $data['filter_by_paid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_by
     *
     * @return object
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param object $order_by Order the results by the indicated searchAssignment field.
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets search_assignment_ids
     *
     * @return string[]
     */
    public function getSearchAssignmentIds()
    {
        return $this->container['search_assignment_ids'];
    }

    /**
     * Sets search_assignment_ids
     *
     * @param string[] $search_assignment_ids Search by specific searchAssignment Ids. Used to return/refresh one or more search results.
     *
     * @return $this
     */
    public function setSearchAssignmentIds($search_assignment_ids)
    {
        $this->container['search_assignment_ids'] = $search_assignment_ids;

        return $this;
    }

    /**
     * Gets assignment_phases
     *
     * @return \Swagger\Client\Model\AssignmentPhase[]
     */
    public function getAssignmentPhases()
    {
        return $this->container['assignment_phases'];
    }

    /**
     * Sets assignment_phases
     *
     * @param \Swagger\Client\Model\AssignmentPhase[] $assignment_phases Filter by assignment phase ('Concept', 'Initiated', 'Completed')
     *
     * @return $this
     */
    public function setAssignmentPhases($assignment_phases)
    {
        $this->container['assignment_phases'] = $assignment_phases;

        return $this;
    }

    /**
     * Gets real_estate_groups
     *
     * @return \Swagger\Client\Model\RealEstateGroup[]
     */
    public function getRealEstateGroups()
    {
        return $this->container['real_estate_groups'];
    }

    /**
     * Sets real_estate_groups
     *
     * @param \Swagger\Client\Model\RealEstateGroup[] $real_estate_groups Filter by selected real estate groups (residential, commercial, agricultural).
     *
     * @return $this
     */
    public function setRealEstateGroups($real_estate_groups)
    {
        $this->container['real_estate_groups'] = $real_estate_groups;

        return $this;
    }

    /**
     * Gets relation_ids
     *
     * @return string[]
     */
    public function getRelationIds()
    {
        return $this->container['relation_ids'];
    }

    /**
     * Sets relation_ids
     *
     * @param string[] $relation_ids Filter by selected Relation Ids.
     *
     * @return $this
     */
    public function setRelationIds($relation_ids)
    {
        $this->container['relation_ids'] = $relation_ids;

        return $this;
    }

    /**
     * Gets offer_types
     *
     * @return \Swagger\Client\Model\OfferType[]
     */
    public function getOfferTypes()
    {
        return $this->container['offer_types'];
    }

    /**
     * Sets offer_types
     *
     * @param \Swagger\Client\Model\OfferType[] $offer_types Filter by offer type (sale, rent)
     *
     * @return $this
     */
    public function setOfferTypes($offer_types)
    {
        $this->container['offer_types'] = $offer_types;

        return $this;
    }

    /**
     * Gets match_mail_periods
     *
     * @return \Swagger\Client\Model\MatchMailPeriod[]
     */
    public function getMatchMailPeriods()
    {
        return $this->container['match_mail_periods'];
    }

    /**
     * Sets match_mail_periods
     *
     * @param \Swagger\Client\Model\MatchMailPeriod[] $match_mail_periods Filter by match mail periods (Never, daily, weekly)
     *
     * @return $this
     */
    public function setMatchMailPeriods($match_mail_periods)
    {
        $this->container['match_mail_periods'] = $match_mail_periods;

        return $this;
    }

    /**
     * Gets term_fields
     *
     * @return \Swagger\Client\Model\SearchAssignmentTermField[]
     */
    public function getTermFields()
    {
        return $this->container['term_fields'];
    }

    /**
     * Sets term_fields
     *
     * @param \Swagger\Client\Model\SearchAssignmentTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case 'Term' is given.
     *
     * @return $this
     */
    public function setTermFields($term_fields)
    {
        $this->container['term_fields'] = $term_fields;

        return $this;
    }

    /**
     * Gets alv_types
     *
     * @return \Swagger\Client\Model\TypeAlv[]
     */
    public function getAlvTypes()
    {
        return $this->container['alv_types'];
    }

    /**
     * Sets alv_types
     *
     * @param \Swagger\Client\Model\TypeAlv[] $alv_types Search for given ALV types (CattleFarming, MeatCalves, etc.).
     *
     * @return $this
     */
    public function setAlvTypes($alv_types)
    {
        $this->container['alv_types'] = $alv_types;

        return $this;
    }

    /**
     * Gets bog_types
     *
     * @return \Swagger\Client\Model\TypeBOG[]
     */
    public function getBogTypes()
    {
        return $this->container['bog_types'];
    }

    /**
     * Sets bog_types
     *
     * @param \Swagger\Client\Model\TypeBOG[] $bog_types Search for given BOG types (Leisure, Warehouse, etc.).
     *
     * @return $this
     */
    public function setBogTypes($bog_types)
    {
        $this->container['bog_types'] = $bog_types;

        return $this;
    }

    /**
     * Gets part_types
     *
     * @return \Swagger\Client\Model\TypePART[]
     */
    public function getPartTypes()
    {
        return $this->container['part_types'];
    }

    /**
     * Sets part_types
     *
     * @param \Swagger\Client\Model\TypePART[] $part_types Search for given PART types (Apartment, SummerCottage, etc.).
     *
     * @return $this
     */
    public function setPartTypes($part_types)
    {
        $this->container['part_types'] = $part_types;

        return $this;
    }

    /**
     * Gets filter_by_paid
     *
     * @return object
     */
    public function getFilterByPaid()
    {
        return $this->container['filter_by_paid'];
    }

    /**
     * Sets filter_by_paid
     *
     * @param object $filter_by_paid Show paid or not paid items. Default: 'PaidOrNotPaid': show all items.
     *
     * @return $this
     */
    public function setFilterByPaid($filter_by_paid)
    {
        $this->container['filter_by_paid'] = $filter_by_paid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


