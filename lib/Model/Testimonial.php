<?php
/**
 * Testimonial
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Testimonial Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Testimonial implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Testimonial';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_time_off_market' => '\DateTime',
        'date_time_on_market' => '\DateTime',
        'is_for_rent' => 'bool',
        'is_for_sale' => 'bool',
        'listing_photo' => '\Swagger\Client\Model\PhotoBlob',
        'show_from' => '\DateTime',
        'show_nr_of_days_on_market' => 'bool',
        'show_until' => '\DateTime',
        'testimonial_photo' => '\Swagger\Client\Model\PhotoBlob',
        'i_list' => '\Swagger\Client\Model\TestimonialTranslation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_time_off_market' => 'date-time',
        'date_time_on_market' => 'date-time',
        'is_for_rent' => null,
        'is_for_sale' => null,
        'listing_photo' => null,
        'show_from' => 'date-time',
        'show_nr_of_days_on_market' => null,
        'show_until' => 'date-time',
        'testimonial_photo' => null,
        'i_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_time_off_market' => 'dateTimeOffMarket',
        'date_time_on_market' => 'dateTimeOnMarket',
        'is_for_rent' => 'isForRent',
        'is_for_sale' => 'isForSale',
        'listing_photo' => 'listingPhoto',
        'show_from' => 'showFrom',
        'show_nr_of_days_on_market' => 'showNrOfDaysOnMarket',
        'show_until' => 'showUntil',
        'testimonial_photo' => 'testimonialPhoto',
        'i_list' => 'iList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_time_off_market' => 'setDateTimeOffMarket',
        'date_time_on_market' => 'setDateTimeOnMarket',
        'is_for_rent' => 'setIsForRent',
        'is_for_sale' => 'setIsForSale',
        'listing_photo' => 'setListingPhoto',
        'show_from' => 'setShowFrom',
        'show_nr_of_days_on_market' => 'setShowNrOfDaysOnMarket',
        'show_until' => 'setShowUntil',
        'testimonial_photo' => 'setTestimonialPhoto',
        'i_list' => 'setIList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_time_off_market' => 'getDateTimeOffMarket',
        'date_time_on_market' => 'getDateTimeOnMarket',
        'is_for_rent' => 'getIsForRent',
        'is_for_sale' => 'getIsForSale',
        'listing_photo' => 'getListingPhoto',
        'show_from' => 'getShowFrom',
        'show_nr_of_days_on_market' => 'getShowNrOfDaysOnMarket',
        'show_until' => 'getShowUntil',
        'testimonial_photo' => 'getTestimonialPhoto',
        'i_list' => 'getIList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_time_off_market'] = isset($data['date_time_off_market']) ? $data['date_time_off_market'] : null;
        $this->container['date_time_on_market'] = isset($data['date_time_on_market']) ? $data['date_time_on_market'] : null;
        $this->container['is_for_rent'] = isset($data['is_for_rent']) ? $data['is_for_rent'] : null;
        $this->container['is_for_sale'] = isset($data['is_for_sale']) ? $data['is_for_sale'] : null;
        $this->container['listing_photo'] = isset($data['listing_photo']) ? $data['listing_photo'] : null;
        $this->container['show_from'] = isset($data['show_from']) ? $data['show_from'] : null;
        $this->container['show_nr_of_days_on_market'] = isset($data['show_nr_of_days_on_market']) ? $data['show_nr_of_days_on_market'] : null;
        $this->container['show_until'] = isset($data['show_until']) ? $data['show_until'] : null;
        $this->container['testimonial_photo'] = isset($data['testimonial_photo']) ? $data['testimonial_photo'] : null;
        $this->container['i_list'] = isset($data['i_list']) ? $data['i_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['is_for_rent'] === null) {
            $invalidProperties[] = "'is_for_rent' can't be null";
        }
        if ($this->container['is_for_sale'] === null) {
            $invalidProperties[] = "'is_for_sale' can't be null";
        }
        if ($this->container['show_nr_of_days_on_market'] === null) {
            $invalidProperties[] = "'show_nr_of_days_on_market' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_time_off_market
     *
     * @return \DateTime
     */
    public function getDateTimeOffMarket()
    {
        return $this->container['date_time_off_market'];
    }

    /**
     * Sets date_time_off_market
     *
     * @param \DateTime $date_time_off_market date_time_off_market
     *
     * @return $this
     */
    public function setDateTimeOffMarket($date_time_off_market)
    {
        $this->container['date_time_off_market'] = $date_time_off_market;

        return $this;
    }

    /**
     * Gets date_time_on_market
     *
     * @return \DateTime
     */
    public function getDateTimeOnMarket()
    {
        return $this->container['date_time_on_market'];
    }

    /**
     * Sets date_time_on_market
     *
     * @param \DateTime $date_time_on_market date_time_on_market
     *
     * @return $this
     */
    public function setDateTimeOnMarket($date_time_on_market)
    {
        $this->container['date_time_on_market'] = $date_time_on_market;

        return $this;
    }

    /**
     * Gets is_for_rent
     *
     * @return bool
     */
    public function getIsForRent()
    {
        return $this->container['is_for_rent'];
    }

    /**
     * Sets is_for_rent
     *
     * @param bool $is_for_rent is_for_rent
     *
     * @return $this
     */
    public function setIsForRent($is_for_rent)
    {
        $this->container['is_for_rent'] = $is_for_rent;

        return $this;
    }

    /**
     * Gets is_for_sale
     *
     * @return bool
     */
    public function getIsForSale()
    {
        return $this->container['is_for_sale'];
    }

    /**
     * Sets is_for_sale
     *
     * @param bool $is_for_sale is_for_sale
     *
     * @return $this
     */
    public function setIsForSale($is_for_sale)
    {
        $this->container['is_for_sale'] = $is_for_sale;

        return $this;
    }

    /**
     * Gets listing_photo
     *
     * @return \Swagger\Client\Model\PhotoBlob
     */
    public function getListingPhoto()
    {
        return $this->container['listing_photo'];
    }

    /**
     * Sets listing_photo
     *
     * @param \Swagger\Client\Model\PhotoBlob $listing_photo listing_photo
     *
     * @return $this
     */
    public function setListingPhoto($listing_photo)
    {
        $this->container['listing_photo'] = $listing_photo;

        return $this;
    }

    /**
     * Gets show_from
     *
     * @return \DateTime
     */
    public function getShowFrom()
    {
        return $this->container['show_from'];
    }

    /**
     * Sets show_from
     *
     * @param \DateTime $show_from show_from
     *
     * @return $this
     */
    public function setShowFrom($show_from)
    {
        $this->container['show_from'] = $show_from;

        return $this;
    }

    /**
     * Gets show_nr_of_days_on_market
     *
     * @return bool
     */
    public function getShowNrOfDaysOnMarket()
    {
        return $this->container['show_nr_of_days_on_market'];
    }

    /**
     * Sets show_nr_of_days_on_market
     *
     * @param bool $show_nr_of_days_on_market show_nr_of_days_on_market
     *
     * @return $this
     */
    public function setShowNrOfDaysOnMarket($show_nr_of_days_on_market)
    {
        $this->container['show_nr_of_days_on_market'] = $show_nr_of_days_on_market;

        return $this;
    }

    /**
     * Gets show_until
     *
     * @return \DateTime
     */
    public function getShowUntil()
    {
        return $this->container['show_until'];
    }

    /**
     * Sets show_until
     *
     * @param \DateTime $show_until show_until
     *
     * @return $this
     */
    public function setShowUntil($show_until)
    {
        $this->container['show_until'] = $show_until;

        return $this;
    }

    /**
     * Gets testimonial_photo
     *
     * @return \Swagger\Client\Model\PhotoBlob
     */
    public function getTestimonialPhoto()
    {
        return $this->container['testimonial_photo'];
    }

    /**
     * Sets testimonial_photo
     *
     * @param \Swagger\Client\Model\PhotoBlob $testimonial_photo testimonial_photo
     *
     * @return $this
     */
    public function setTestimonialPhoto($testimonial_photo)
    {
        $this->container['testimonial_photo'] = $testimonial_photo;

        return $this;
    }

    /**
     * Gets i_list
     *
     * @return \Swagger\Client\Model\TestimonialTranslation[]
     */
    public function getIList()
    {
        return $this->container['i_list'];
    }

    /**
     * Sets i_list
     *
     * @param \Swagger\Client\Model\TestimonialTranslation[] $i_list i_list
     *
     * @return $this
     */
    public function setIList($i_list)
    {
        $this->container['i_list'] = $i_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


