<?php
/**
 * FolderTreeFileEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FolderTreeFileEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FolderTreeFileEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FolderTreeFileEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => '\Swagger\Client\Model\FolderTreeFileType',
        'linked_dossier_item' => '\Swagger\Client\Model\DossierItemSnapShot',
        'linked_document_session' => '\Swagger\Client\Model\DocumentSessionSnapShot',
        'linked_invoice' => '\Swagger\Client\Model\InvoiceSnapShot'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'guid',
        'type' => null,
        'linked_dossier_item' => null,
        'linked_document_session' => null,
        'linked_invoice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'linked_dossier_item' => 'linkedDossierItem',
        'linked_document_session' => 'linkedDocumentSession',
        'linked_invoice' => 'linkedInvoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'linked_dossier_item' => 'setLinkedDossierItem',
        'linked_document_session' => 'setLinkedDocumentSession',
        'linked_invoice' => 'setLinkedInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'linked_dossier_item' => 'getLinkedDossierItem',
        'linked_document_session' => 'getLinkedDocumentSession',
        'linked_invoice' => 'getLinkedInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['linked_dossier_item'] = isset($data['linked_dossier_item']) ? $data['linked_dossier_item'] : null;
        $this->container['linked_document_session'] = isset($data['linked_document_session']) ? $data['linked_document_session'] : null;
        $this->container['linked_invoice'] = isset($data['linked_invoice']) ? $data['linked_invoice'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\FolderTreeFileType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\FolderTreeFileType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets linked_dossier_item
     *
     * @return \Swagger\Client\Model\DossierItemSnapShot
     */
    public function getLinkedDossierItem()
    {
        return $this->container['linked_dossier_item'];
    }

    /**
     * Sets linked_dossier_item
     *
     * @param \Swagger\Client\Model\DossierItemSnapShot $linked_dossier_item linked_dossier_item
     *
     * @return $this
     */
    public function setLinkedDossierItem($linked_dossier_item)
    {
        $this->container['linked_dossier_item'] = $linked_dossier_item;

        return $this;
    }

    /**
     * Gets linked_document_session
     *
     * @return \Swagger\Client\Model\DocumentSessionSnapShot
     */
    public function getLinkedDocumentSession()
    {
        return $this->container['linked_document_session'];
    }

    /**
     * Sets linked_document_session
     *
     * @param \Swagger\Client\Model\DocumentSessionSnapShot $linked_document_session linked_document_session
     *
     * @return $this
     */
    public function setLinkedDocumentSession($linked_document_session)
    {
        $this->container['linked_document_session'] = $linked_document_session;

        return $this;
    }

    /**
     * Gets linked_invoice
     *
     * @return \Swagger\Client\Model\InvoiceSnapShot
     */
    public function getLinkedInvoice()
    {
        return $this->container['linked_invoice'];
    }

    /**
     * Sets linked_invoice
     *
     * @param \Swagger\Client\Model\InvoiceSnapShot $linked_invoice linked_invoice
     *
     * @return $this
     */
    public function setLinkedInvoice($linked_invoice)
    {
        $this->container['linked_invoice'] = $linked_invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


