<?php
/**
 * Person
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Person extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\Address',
        'address_line' => 'string',
        'bank_account' => '\Swagger\Client\Model\BankAccount',
        'city_of_birth' => 'string',
        'civil_state' => '\Swagger\Client\Model\CivilState',
        'country_iso2_of_birth' => 'string',
        'date_of_birth' => '\DateTime',
        'display_name' => 'string',
        'email_addresses' => '\Swagger\Client\Model\EmailAddress[]',
        'first_name' => 'string',
        'gender' => '\Swagger\Client\Model\Gender',
        'identification_card' => '\Swagger\Client\Model\IdentificationCard',
        'last_name' => 'string',
        'middle_name' => 'string',
        'name_letters' => 'string',
        'nickname' => 'string',
        'passport_photo_blob' => '\Swagger\Client\Model\PhotoBlob',
        'phone_numbers' => '\Swagger\Client\Model\PhoneNumber[]',
        'postal_address' => '\Swagger\Client\Model\Address',
        'postal_address_differs_visit_address' => 'bool',
        'salutation' => 'string',
        'social_media' => '\Swagger\Client\Model\SocialMediaTranslation[]',
        'social_security_number' => 'string',
        'spoken_languages' => '\Swagger\Client\Model\Language[]',
        'title' => 'string',
        'use_formal_appelation' => 'bool',
        'web_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'address_line' => null,
        'bank_account' => null,
        'city_of_birth' => null,
        'civil_state' => null,
        'country_iso2_of_birth' => null,
        'date_of_birth' => 'date-time',
        'display_name' => null,
        'email_addresses' => null,
        'first_name' => null,
        'gender' => null,
        'identification_card' => null,
        'last_name' => null,
        'middle_name' => null,
        'name_letters' => null,
        'nickname' => null,
        'passport_photo_blob' => null,
        'phone_numbers' => null,
        'postal_address' => null,
        'postal_address_differs_visit_address' => null,
        'salutation' => null,
        'social_media' => null,
        'social_security_number' => null,
        'spoken_languages' => null,
        'title' => null,
        'use_formal_appelation' => null,
        'web_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'address_line' => 'addressLine',
        'bank_account' => 'bankAccount',
        'city_of_birth' => 'cityOfBirth',
        'civil_state' => 'civilState',
        'country_iso2_of_birth' => 'countryIso2OfBirth',
        'date_of_birth' => 'dateOfBirth',
        'display_name' => 'displayName',
        'email_addresses' => 'emailAddresses',
        'first_name' => 'firstName',
        'gender' => 'gender',
        'identification_card' => 'identificationCard',
        'last_name' => 'lastName',
        'middle_name' => 'middleName',
        'name_letters' => 'nameLetters',
        'nickname' => 'nickname',
        'passport_photo_blob' => 'passportPhotoBlob',
        'phone_numbers' => 'phoneNumbers',
        'postal_address' => 'postalAddress',
        'postal_address_differs_visit_address' => 'postalAddressDiffersVisitAddress',
        'salutation' => 'salutation',
        'social_media' => 'socialMedia',
        'social_security_number' => 'socialSecurityNumber',
        'spoken_languages' => 'spokenLanguages',
        'title' => 'title',
        'use_formal_appelation' => 'useFormalAppelation',
        'web_address' => 'webAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'address_line' => 'setAddressLine',
        'bank_account' => 'setBankAccount',
        'city_of_birth' => 'setCityOfBirth',
        'civil_state' => 'setCivilState',
        'country_iso2_of_birth' => 'setCountryIso2OfBirth',
        'date_of_birth' => 'setDateOfBirth',
        'display_name' => 'setDisplayName',
        'email_addresses' => 'setEmailAddresses',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'identification_card' => 'setIdentificationCard',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'name_letters' => 'setNameLetters',
        'nickname' => 'setNickname',
        'passport_photo_blob' => 'setPassportPhotoBlob',
        'phone_numbers' => 'setPhoneNumbers',
        'postal_address' => 'setPostalAddress',
        'postal_address_differs_visit_address' => 'setPostalAddressDiffersVisitAddress',
        'salutation' => 'setSalutation',
        'social_media' => 'setSocialMedia',
        'social_security_number' => 'setSocialSecurityNumber',
        'spoken_languages' => 'setSpokenLanguages',
        'title' => 'setTitle',
        'use_formal_appelation' => 'setUseFormalAppelation',
        'web_address' => 'setWebAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'address_line' => 'getAddressLine',
        'bank_account' => 'getBankAccount',
        'city_of_birth' => 'getCityOfBirth',
        'civil_state' => 'getCivilState',
        'country_iso2_of_birth' => 'getCountryIso2OfBirth',
        'date_of_birth' => 'getDateOfBirth',
        'display_name' => 'getDisplayName',
        'email_addresses' => 'getEmailAddresses',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'identification_card' => 'getIdentificationCard',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'name_letters' => 'getNameLetters',
        'nickname' => 'getNickname',
        'passport_photo_blob' => 'getPassportPhotoBlob',
        'phone_numbers' => 'getPhoneNumbers',
        'postal_address' => 'getPostalAddress',
        'postal_address_differs_visit_address' => 'getPostalAddressDiffersVisitAddress',
        'salutation' => 'getSalutation',
        'social_media' => 'getSocialMedia',
        'social_security_number' => 'getSocialSecurityNumber',
        'spoken_languages' => 'getSpokenLanguages',
        'title' => 'getTitle',
        'use_formal_appelation' => 'getUseFormalAppelation',
        'web_address' => 'getWebAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address_line'] = isset($data['address_line']) ? $data['address_line'] : null;
        $this->container['bank_account'] = isset($data['bank_account']) ? $data['bank_account'] : null;
        $this->container['city_of_birth'] = isset($data['city_of_birth']) ? $data['city_of_birth'] : null;
        $this->container['civil_state'] = isset($data['civil_state']) ? $data['civil_state'] : null;
        $this->container['country_iso2_of_birth'] = isset($data['country_iso2_of_birth']) ? $data['country_iso2_of_birth'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['email_addresses'] = isset($data['email_addresses']) ? $data['email_addresses'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['identification_card'] = isset($data['identification_card']) ? $data['identification_card'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['name_letters'] = isset($data['name_letters']) ? $data['name_letters'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['passport_photo_blob'] = isset($data['passport_photo_blob']) ? $data['passport_photo_blob'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['postal_address'] = isset($data['postal_address']) ? $data['postal_address'] : null;
        $this->container['postal_address_differs_visit_address'] = isset($data['postal_address_differs_visit_address']) ? $data['postal_address_differs_visit_address'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['social_media'] = isset($data['social_media']) ? $data['social_media'] : null;
        $this->container['social_security_number'] = isset($data['social_security_number']) ? $data['social_security_number'] : null;
        $this->container['spoken_languages'] = isset($data['spoken_languages']) ? $data['spoken_languages'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['use_formal_appelation'] = isset($data['use_formal_appelation']) ? $data['use_formal_appelation'] : null;
        $this->container['web_address'] = isset($data['web_address']) ? $data['web_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_line
     *
     * @return string
     */
    public function getAddressLine()
    {
        return $this->container['address_line'];
    }

    /**
     * Sets address_line
     *
     * @param string $address_line address_line
     *
     * @return $this
     */
    public function setAddressLine($address_line)
    {
        $this->container['address_line'] = $address_line;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return \Swagger\Client\Model\BankAccount
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param \Swagger\Client\Model\BankAccount $bank_account bank_account
     *
     * @return $this
     */
    public function setBankAccount($bank_account)
    {
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets city_of_birth
     *
     * @return string
     */
    public function getCityOfBirth()
    {
        return $this->container['city_of_birth'];
    }

    /**
     * Sets city_of_birth
     *
     * @param string $city_of_birth city_of_birth
     *
     * @return $this
     */
    public function setCityOfBirth($city_of_birth)
    {
        $this->container['city_of_birth'] = $city_of_birth;

        return $this;
    }

    /**
     * Gets civil_state
     *
     * @return \Swagger\Client\Model\CivilState
     */
    public function getCivilState()
    {
        return $this->container['civil_state'];
    }

    /**
     * Sets civil_state
     *
     * @param \Swagger\Client\Model\CivilState $civil_state civil_state
     *
     * @return $this
     */
    public function setCivilState($civil_state)
    {
        $this->container['civil_state'] = $civil_state;

        return $this;
    }

    /**
     * Gets country_iso2_of_birth
     *
     * @return string
     */
    public function getCountryIso2OfBirth()
    {
        return $this->container['country_iso2_of_birth'];
    }

    /**
     * Sets country_iso2_of_birth
     *
     * @param string $country_iso2_of_birth country_iso2_of_birth
     *
     * @return $this
     */
    public function setCountryIso2OfBirth($country_iso2_of_birth)
    {
        $this->container['country_iso2_of_birth'] = $country_iso2_of_birth;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email_addresses
     *
     * @return \Swagger\Client\Model\EmailAddress[]
     */
    public function getEmailAddresses()
    {
        return $this->container['email_addresses'];
    }

    /**
     * Sets email_addresses
     *
     * @param \Swagger\Client\Model\EmailAddress[] $email_addresses email_addresses
     *
     * @return $this
     */
    public function setEmailAddresses($email_addresses)
    {
        $this->container['email_addresses'] = $email_addresses;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Swagger\Client\Model\Gender
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Swagger\Client\Model\Gender $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets identification_card
     *
     * @return \Swagger\Client\Model\IdentificationCard
     */
    public function getIdentificationCard()
    {
        return $this->container['identification_card'];
    }

    /**
     * Sets identification_card
     *
     * @param \Swagger\Client\Model\IdentificationCard $identification_card identification_card
     *
     * @return $this
     */
    public function setIdentificationCard($identification_card)
    {
        $this->container['identification_card'] = $identification_card;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name middle_name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets name_letters
     *
     * @return string
     */
    public function getNameLetters()
    {
        return $this->container['name_letters'];
    }

    /**
     * Sets name_letters
     *
     * @param string $name_letters name_letters
     *
     * @return $this
     */
    public function setNameLetters($name_letters)
    {
        $this->container['name_letters'] = $name_letters;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname nickname
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets passport_photo_blob
     *
     * @return \Swagger\Client\Model\PhotoBlob
     */
    public function getPassportPhotoBlob()
    {
        return $this->container['passport_photo_blob'];
    }

    /**
     * Sets passport_photo_blob
     *
     * @param \Swagger\Client\Model\PhotoBlob $passport_photo_blob passport_photo_blob
     *
     * @return $this
     */
    public function setPassportPhotoBlob($passport_photo_blob)
    {
        $this->container['passport_photo_blob'] = $passport_photo_blob;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return \Swagger\Client\Model\PhoneNumber[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param \Swagger\Client\Model\PhoneNumber[] $phone_numbers phone_numbers
     *
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \Swagger\Client\Model\Address $postal_address postal_address
     *
     * @return $this
     */
    public function setPostalAddress($postal_address)
    {
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets postal_address_differs_visit_address
     *
     * @return bool
     */
    public function getPostalAddressDiffersVisitAddress()
    {
        return $this->container['postal_address_differs_visit_address'];
    }

    /**
     * Sets postal_address_differs_visit_address
     *
     * @param bool $postal_address_differs_visit_address postal_address_differs_visit_address
     *
     * @return $this
     */
    public function setPostalAddressDiffersVisitAddress($postal_address_differs_visit_address)
    {
        $this->container['postal_address_differs_visit_address'] = $postal_address_differs_visit_address;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string $salutation salutation
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets social_media
     *
     * @return \Swagger\Client\Model\SocialMediaTranslation[]
     */
    public function getSocialMedia()
    {
        return $this->container['social_media'];
    }

    /**
     * Sets social_media
     *
     * @param \Swagger\Client\Model\SocialMediaTranslation[] $social_media social_media
     *
     * @return $this
     */
    public function setSocialMedia($social_media)
    {
        $this->container['social_media'] = $social_media;

        return $this;
    }

    /**
     * Gets social_security_number
     *
     * @return string
     */
    public function getSocialSecurityNumber()
    {
        return $this->container['social_security_number'];
    }

    /**
     * Sets social_security_number
     *
     * @param string $social_security_number social_security_number
     *
     * @return $this
     */
    public function setSocialSecurityNumber($social_security_number)
    {
        $this->container['social_security_number'] = $social_security_number;

        return $this;
    }

    /**
     * Gets spoken_languages
     *
     * @return \Swagger\Client\Model\Language[]
     */
    public function getSpokenLanguages()
    {
        return $this->container['spoken_languages'];
    }

    /**
     * Sets spoken_languages
     *
     * @param \Swagger\Client\Model\Language[] $spoken_languages spoken_languages
     *
     * @return $this
     */
    public function setSpokenLanguages($spoken_languages)
    {
        $this->container['spoken_languages'] = $spoken_languages;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets use_formal_appelation
     *
     * @return bool
     */
    public function getUseFormalAppelation()
    {
        return $this->container['use_formal_appelation'];
    }

    /**
     * Sets use_formal_appelation
     *
     * @param bool $use_formal_appelation use_formal_appelation
     *
     * @return $this
     */
    public function setUseFormalAppelation($use_formal_appelation)
    {
        $this->container['use_formal_appelation'] = $use_formal_appelation;

        return $this;
    }

    /**
     * Gets web_address
     *
     * @return string
     */
    public function getWebAddress()
    {
        return $this->container['web_address'];
    }

    /**
     * Sets web_address
     *
     * @param string $web_address web_address
     *
     * @return $this
     */
    public function setWebAddress($web_address)
    {
        $this->container['web_address'] = $web_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


