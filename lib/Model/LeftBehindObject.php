<?php
/**
 * LeftBehindObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LeftBehindObject Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeftBehindObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LeftBehindObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_price' => 'float',
        'rental_price' => 'float',
        'type_of_habitation' => '\Swagger\Client\Model\TypeOfHabitation',
        'house_sort' => '\Swagger\Client\Model\HouseSort',
        'house_type' => '\Swagger\Client\Model\HouseType',
        'house_characteristic' => '\Swagger\Client\Model\HouseCharacteristic',
        'apartment_sort' => '\Swagger\Client\Model\ApartmentSort',
        'apartment_characteristic' => '\Swagger\Client\Model\ApartmentCharacteristic',
        'house_number' => 'int',
        'house_number_post_fix' => 'string',
        'postal_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_price' => 'decimal',
        'rental_price' => 'decimal',
        'type_of_habitation' => null,
        'house_sort' => null,
        'house_type' => null,
        'house_characteristic' => null,
        'apartment_sort' => null,
        'apartment_characteristic' => null,
        'house_number' => 'int32',
        'house_number_post_fix' => null,
        'postal_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_price' => 'transactionPrice',
        'rental_price' => 'rentalPrice',
        'type_of_habitation' => 'typeOfHabitation',
        'house_sort' => 'houseSort',
        'house_type' => 'houseType',
        'house_characteristic' => 'houseCharacteristic',
        'apartment_sort' => 'apartmentSort',
        'apartment_characteristic' => 'apartmentCharacteristic',
        'house_number' => 'houseNumber',
        'house_number_post_fix' => 'houseNumberPostFix',
        'postal_code' => 'postalCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_price' => 'setTransactionPrice',
        'rental_price' => 'setRentalPrice',
        'type_of_habitation' => 'setTypeOfHabitation',
        'house_sort' => 'setHouseSort',
        'house_type' => 'setHouseType',
        'house_characteristic' => 'setHouseCharacteristic',
        'apartment_sort' => 'setApartmentSort',
        'apartment_characteristic' => 'setApartmentCharacteristic',
        'house_number' => 'setHouseNumber',
        'house_number_post_fix' => 'setHouseNumberPostFix',
        'postal_code' => 'setPostalCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_price' => 'getTransactionPrice',
        'rental_price' => 'getRentalPrice',
        'type_of_habitation' => 'getTypeOfHabitation',
        'house_sort' => 'getHouseSort',
        'house_type' => 'getHouseType',
        'house_characteristic' => 'getHouseCharacteristic',
        'apartment_sort' => 'getApartmentSort',
        'apartment_characteristic' => 'getApartmentCharacteristic',
        'house_number' => 'getHouseNumber',
        'house_number_post_fix' => 'getHouseNumberPostFix',
        'postal_code' => 'getPostalCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_price'] = isset($data['transaction_price']) ? $data['transaction_price'] : null;
        $this->container['rental_price'] = isset($data['rental_price']) ? $data['rental_price'] : null;
        $this->container['type_of_habitation'] = isset($data['type_of_habitation']) ? $data['type_of_habitation'] : null;
        $this->container['house_sort'] = isset($data['house_sort']) ? $data['house_sort'] : null;
        $this->container['house_type'] = isset($data['house_type']) ? $data['house_type'] : null;
        $this->container['house_characteristic'] = isset($data['house_characteristic']) ? $data['house_characteristic'] : null;
        $this->container['apartment_sort'] = isset($data['apartment_sort']) ? $data['apartment_sort'] : null;
        $this->container['apartment_characteristic'] = isset($data['apartment_characteristic']) ? $data['apartment_characteristic'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['house_number_post_fix'] = isset($data['house_number_post_fix']) ? $data['house_number_post_fix'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['house_number_post_fix']) && (mb_strlen($this->container['house_number_post_fix']) > 50)) {
            $invalidProperties[] = "invalid value for 'house_number_post_fix', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_price
     *
     * @return float
     */
    public function getTransactionPrice()
    {
        return $this->container['transaction_price'];
    }

    /**
     * Sets transaction_price
     *
     * @param float $transaction_price transaction_price
     *
     * @return $this
     */
    public function setTransactionPrice($transaction_price)
    {
        $this->container['transaction_price'] = $transaction_price;

        return $this;
    }

    /**
     * Gets rental_price
     *
     * @return float
     */
    public function getRentalPrice()
    {
        return $this->container['rental_price'];
    }

    /**
     * Sets rental_price
     *
     * @param float $rental_price rental_price
     *
     * @return $this
     */
    public function setRentalPrice($rental_price)
    {
        $this->container['rental_price'] = $rental_price;

        return $this;
    }

    /**
     * Gets type_of_habitation
     *
     * @return \Swagger\Client\Model\TypeOfHabitation
     */
    public function getTypeOfHabitation()
    {
        return $this->container['type_of_habitation'];
    }

    /**
     * Sets type_of_habitation
     *
     * @param \Swagger\Client\Model\TypeOfHabitation $type_of_habitation type_of_habitation
     *
     * @return $this
     */
    public function setTypeOfHabitation($type_of_habitation)
    {
        $this->container['type_of_habitation'] = $type_of_habitation;

        return $this;
    }

    /**
     * Gets house_sort
     *
     * @return \Swagger\Client\Model\HouseSort
     */
    public function getHouseSort()
    {
        return $this->container['house_sort'];
    }

    /**
     * Sets house_sort
     *
     * @param \Swagger\Client\Model\HouseSort $house_sort house_sort
     *
     * @return $this
     */
    public function setHouseSort($house_sort)
    {
        $this->container['house_sort'] = $house_sort;

        return $this;
    }

    /**
     * Gets house_type
     *
     * @return \Swagger\Client\Model\HouseType
     */
    public function getHouseType()
    {
        return $this->container['house_type'];
    }

    /**
     * Sets house_type
     *
     * @param \Swagger\Client\Model\HouseType $house_type house_type
     *
     * @return $this
     */
    public function setHouseType($house_type)
    {
        $this->container['house_type'] = $house_type;

        return $this;
    }

    /**
     * Gets house_characteristic
     *
     * @return \Swagger\Client\Model\HouseCharacteristic
     */
    public function getHouseCharacteristic()
    {
        return $this->container['house_characteristic'];
    }

    /**
     * Sets house_characteristic
     *
     * @param \Swagger\Client\Model\HouseCharacteristic $house_characteristic house_characteristic
     *
     * @return $this
     */
    public function setHouseCharacteristic($house_characteristic)
    {
        $this->container['house_characteristic'] = $house_characteristic;

        return $this;
    }

    /**
     * Gets apartment_sort
     *
     * @return \Swagger\Client\Model\ApartmentSort
     */
    public function getApartmentSort()
    {
        return $this->container['apartment_sort'];
    }

    /**
     * Sets apartment_sort
     *
     * @param \Swagger\Client\Model\ApartmentSort $apartment_sort apartment_sort
     *
     * @return $this
     */
    public function setApartmentSort($apartment_sort)
    {
        $this->container['apartment_sort'] = $apartment_sort;

        return $this;
    }

    /**
     * Gets apartment_characteristic
     *
     * @return \Swagger\Client\Model\ApartmentCharacteristic
     */
    public function getApartmentCharacteristic()
    {
        return $this->container['apartment_characteristic'];
    }

    /**
     * Sets apartment_characteristic
     *
     * @param \Swagger\Client\Model\ApartmentCharacteristic $apartment_characteristic apartment_characteristic
     *
     * @return $this
     */
    public function setApartmentCharacteristic($apartment_characteristic)
    {
        $this->container['apartment_characteristic'] = $apartment_characteristic;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return int
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param int $house_number house_number
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_post_fix
     *
     * @return string
     */
    public function getHouseNumberPostFix()
    {
        return $this->container['house_number_post_fix'];
    }

    /**
     * Sets house_number_post_fix
     *
     * @param string $house_number_post_fix house_number_post_fix
     *
     * @return $this
     */
    public function setHouseNumberPostFix($house_number_post_fix)
    {
        if (!is_null($house_number_post_fix) && (mb_strlen($house_number_post_fix) > 50)) {
            throw new \InvalidArgumentException('invalid length for $house_number_post_fix when calling LeftBehindObject., must be smaller than or equal to 50.');
        }

        $this->container['house_number_post_fix'] = $house_number_post_fix;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling LeftBehindObject., must be smaller than or equal to 50.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


