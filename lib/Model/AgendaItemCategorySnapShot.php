<?php
/**
 * AgendaItemCategorySnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * AgendaItemCategorySnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgendaItemCategorySnapShot extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgendaItemCategorySnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'all_day_event' => 'bool',
        'back_color' => 'string',
        'description_hash' => 'string',
        'display_name' => 'string',
        'front_color' => 'string',
        'is_private' => 'bool',
        'category_type' => '\Swagger\Client\Model\AgendaItemCategoryType',
        'minutes_before_reminder' => 'int',
        'needs_to_be_confirmed' => 'bool',
        'priority' => '\Swagger\Client\Model\Priority',
        'standard_duration_in_minutes' => 'int',
        'time_marker' => '\Swagger\Client\Model\AgendaItemTimeMarker',
        'use_reminder' => 'bool',
        'date_time_created' => '\DateTime',
        'date_time_modified' => '\DateTime',
        'linked_created_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_modified_by' => '\Swagger\Client\Model\LinkedEmployee'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'all_day_event' => null,
        'back_color' => null,
        'description_hash' => null,
        'display_name' => null,
        'front_color' => null,
        'is_private' => null,
        'category_type' => null,
        'minutes_before_reminder' => 'int32',
        'needs_to_be_confirmed' => null,
        'priority' => null,
        'standard_duration_in_minutes' => 'int32',
        'time_marker' => null,
        'use_reminder' => null,
        'date_time_created' => 'date-time',
        'date_time_modified' => 'date-time',
        'linked_created_by' => null,
        'linked_modified_by' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all_day_event' => 'allDayEvent',
        'back_color' => 'backColor',
        'description_hash' => 'descriptionHash',
        'display_name' => 'displayName',
        'front_color' => 'frontColor',
        'is_private' => 'isPrivate',
        'category_type' => 'categoryType',
        'minutes_before_reminder' => 'minutesBeforeReminder',
        'needs_to_be_confirmed' => 'needsToBeConfirmed',
        'priority' => 'priority',
        'standard_duration_in_minutes' => 'standardDurationInMinutes',
        'time_marker' => 'timeMarker',
        'use_reminder' => 'useReminder',
        'date_time_created' => 'dateTimeCreated',
        'date_time_modified' => 'dateTimeModified',
        'linked_created_by' => 'linkedCreatedBy',
        'linked_modified_by' => 'linkedModifiedBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all_day_event' => 'setAllDayEvent',
        'back_color' => 'setBackColor',
        'description_hash' => 'setDescriptionHash',
        'display_name' => 'setDisplayName',
        'front_color' => 'setFrontColor',
        'is_private' => 'setIsPrivate',
        'category_type' => 'setCategoryType',
        'minutes_before_reminder' => 'setMinutesBeforeReminder',
        'needs_to_be_confirmed' => 'setNeedsToBeConfirmed',
        'priority' => 'setPriority',
        'standard_duration_in_minutes' => 'setStandardDurationInMinutes',
        'time_marker' => 'setTimeMarker',
        'use_reminder' => 'setUseReminder',
        'date_time_created' => 'setDateTimeCreated',
        'date_time_modified' => 'setDateTimeModified',
        'linked_created_by' => 'setLinkedCreatedBy',
        'linked_modified_by' => 'setLinkedModifiedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all_day_event' => 'getAllDayEvent',
        'back_color' => 'getBackColor',
        'description_hash' => 'getDescriptionHash',
        'display_name' => 'getDisplayName',
        'front_color' => 'getFrontColor',
        'is_private' => 'getIsPrivate',
        'category_type' => 'getCategoryType',
        'minutes_before_reminder' => 'getMinutesBeforeReminder',
        'needs_to_be_confirmed' => 'getNeedsToBeConfirmed',
        'priority' => 'getPriority',
        'standard_duration_in_minutes' => 'getStandardDurationInMinutes',
        'time_marker' => 'getTimeMarker',
        'use_reminder' => 'getUseReminder',
        'date_time_created' => 'getDateTimeCreated',
        'date_time_modified' => 'getDateTimeModified',
        'linked_created_by' => 'getLinkedCreatedBy',
        'linked_modified_by' => 'getLinkedModifiedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['all_day_event'] = isset($data['all_day_event']) ? $data['all_day_event'] : null;
        $this->container['back_color'] = isset($data['back_color']) ? $data['back_color'] : null;
        $this->container['description_hash'] = isset($data['description_hash']) ? $data['description_hash'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['front_color'] = isset($data['front_color']) ? $data['front_color'] : null;
        $this->container['is_private'] = isset($data['is_private']) ? $data['is_private'] : null;
        $this->container['category_type'] = isset($data['category_type']) ? $data['category_type'] : null;
        $this->container['minutes_before_reminder'] = isset($data['minutes_before_reminder']) ? $data['minutes_before_reminder'] : null;
        $this->container['needs_to_be_confirmed'] = isset($data['needs_to_be_confirmed']) ? $data['needs_to_be_confirmed'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['standard_duration_in_minutes'] = isset($data['standard_duration_in_minutes']) ? $data['standard_duration_in_minutes'] : null;
        $this->container['time_marker'] = isset($data['time_marker']) ? $data['time_marker'] : null;
        $this->container['use_reminder'] = isset($data['use_reminder']) ? $data['use_reminder'] : null;
        $this->container['date_time_created'] = isset($data['date_time_created']) ? $data['date_time_created'] : null;
        $this->container['date_time_modified'] = isset($data['date_time_modified']) ? $data['date_time_modified'] : null;
        $this->container['linked_created_by'] = isset($data['linked_created_by']) ? $data['linked_created_by'] : null;
        $this->container['linked_modified_by'] = isset($data['linked_modified_by']) ? $data['linked_modified_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all_day_event
     *
     * @return bool
     */
    public function getAllDayEvent()
    {
        return $this->container['all_day_event'];
    }

    /**
     * Sets all_day_event
     *
     * @param bool $all_day_event all_day_event
     *
     * @return $this
     */
    public function setAllDayEvent($all_day_event)
    {
        $this->container['all_day_event'] = $all_day_event;

        return $this;
    }

    /**
     * Gets back_color
     *
     * @return string
     */
    public function getBackColor()
    {
        return $this->container['back_color'];
    }

    /**
     * Sets back_color
     *
     * @param string $back_color back_color
     *
     * @return $this
     */
    public function setBackColor($back_color)
    {
        $this->container['back_color'] = $back_color;

        return $this;
    }

    /**
     * Gets description_hash
     *
     * @return string
     */
    public function getDescriptionHash()
    {
        return $this->container['description_hash'];
    }

    /**
     * Sets description_hash
     *
     * @param string $description_hash description_hash
     *
     * @return $this
     */
    public function setDescriptionHash($description_hash)
    {
        $this->container['description_hash'] = $description_hash;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets front_color
     *
     * @return string
     */
    public function getFrontColor()
    {
        return $this->container['front_color'];
    }

    /**
     * Sets front_color
     *
     * @param string $front_color front_color
     *
     * @return $this
     */
    public function setFrontColor($front_color)
    {
        $this->container['front_color'] = $front_color;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool $is_private is_private
     *
     * @return $this
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return \Swagger\Client\Model\AgendaItemCategoryType
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param \Swagger\Client\Model\AgendaItemCategoryType $category_type category_type
     *
     * @return $this
     */
    public function setCategoryType($category_type)
    {
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets minutes_before_reminder
     *
     * @return int
     */
    public function getMinutesBeforeReminder()
    {
        return $this->container['minutes_before_reminder'];
    }

    /**
     * Sets minutes_before_reminder
     *
     * @param int $minutes_before_reminder minutes_before_reminder
     *
     * @return $this
     */
    public function setMinutesBeforeReminder($minutes_before_reminder)
    {
        $this->container['minutes_before_reminder'] = $minutes_before_reminder;

        return $this;
    }

    /**
     * Gets needs_to_be_confirmed
     *
     * @return bool
     */
    public function getNeedsToBeConfirmed()
    {
        return $this->container['needs_to_be_confirmed'];
    }

    /**
     * Sets needs_to_be_confirmed
     *
     * @param bool $needs_to_be_confirmed needs_to_be_confirmed
     *
     * @return $this
     */
    public function setNeedsToBeConfirmed($needs_to_be_confirmed)
    {
        $this->container['needs_to_be_confirmed'] = $needs_to_be_confirmed;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return \Swagger\Client\Model\Priority
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param \Swagger\Client\Model\Priority $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets standard_duration_in_minutes
     *
     * @return int
     */
    public function getStandardDurationInMinutes()
    {
        return $this->container['standard_duration_in_minutes'];
    }

    /**
     * Sets standard_duration_in_minutes
     *
     * @param int $standard_duration_in_minutes standard_duration_in_minutes
     *
     * @return $this
     */
    public function setStandardDurationInMinutes($standard_duration_in_minutes)
    {
        $this->container['standard_duration_in_minutes'] = $standard_duration_in_minutes;

        return $this;
    }

    /**
     * Gets time_marker
     *
     * @return \Swagger\Client\Model\AgendaItemTimeMarker
     */
    public function getTimeMarker()
    {
        return $this->container['time_marker'];
    }

    /**
     * Sets time_marker
     *
     * @param \Swagger\Client\Model\AgendaItemTimeMarker $time_marker time_marker
     *
     * @return $this
     */
    public function setTimeMarker($time_marker)
    {
        $this->container['time_marker'] = $time_marker;

        return $this;
    }

    /**
     * Gets use_reminder
     *
     * @return bool
     */
    public function getUseReminder()
    {
        return $this->container['use_reminder'];
    }

    /**
     * Sets use_reminder
     *
     * @param bool $use_reminder use_reminder
     *
     * @return $this
     */
    public function setUseReminder($use_reminder)
    {
        $this->container['use_reminder'] = $use_reminder;

        return $this;
    }

    /**
     * Gets date_time_created
     *
     * @return \DateTime
     */
    public function getDateTimeCreated()
    {
        return $this->container['date_time_created'];
    }

    /**
     * Sets date_time_created
     *
     * @param \DateTime $date_time_created date_time_created
     *
     * @return $this
     */
    public function setDateTimeCreated($date_time_created)
    {
        $this->container['date_time_created'] = $date_time_created;

        return $this;
    }

    /**
     * Gets date_time_modified
     *
     * @return \DateTime
     */
    public function getDateTimeModified()
    {
        return $this->container['date_time_modified'];
    }

    /**
     * Sets date_time_modified
     *
     * @param \DateTime $date_time_modified date_time_modified
     *
     * @return $this
     */
    public function setDateTimeModified($date_time_modified)
    {
        $this->container['date_time_modified'] = $date_time_modified;

        return $this;
    }

    /**
     * Gets linked_created_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedCreatedBy()
    {
        return $this->container['linked_created_by'];
    }

    /**
     * Sets linked_created_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_created_by linked_created_by
     *
     * @return $this
     */
    public function setLinkedCreatedBy($linked_created_by)
    {
        $this->container['linked_created_by'] = $linked_created_by;

        return $this;
    }

    /**
     * Gets linked_modified_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedModifiedBy()
    {
        return $this->container['linked_modified_by'];
    }

    /**
     * Sets linked_modified_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_modified_by linked_modified_by
     *
     * @return $this
     */
    public function setLinkedModifiedBy($linked_modified_by)
    {
        $this->container['linked_modified_by'] = $linked_modified_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


