<?php
/**
 * MediaContractSnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * MediaContractSnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MediaContractSnapShot extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MediaContractSnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_favorite' => 'bool',
        'is_auto_publish' => 'bool',
        'category' => '\Swagger\Client\Model\MediaPartnerCategory',
        'status' => '\Swagger\Client\Model\MediaContractStatus',
        'media_partner_logo_url' => 'string',
        'media_partner_name' => 'string',
        'is_paid' => 'bool',
        'media_partner_website_url' => 'string',
        'media_partner_description' => 'string',
        'publication_count' => 'int',
        'auto_publish_available' => 'bool',
        'manual_publish_available' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_favorite' => null,
        'is_auto_publish' => null,
        'category' => null,
        'status' => null,
        'media_partner_logo_url' => null,
        'media_partner_name' => null,
        'is_paid' => null,
        'media_partner_website_url' => null,
        'media_partner_description' => null,
        'publication_count' => 'int32',
        'auto_publish_available' => null,
        'manual_publish_available' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_favorite' => 'isFavorite',
        'is_auto_publish' => 'isAutoPublish',
        'category' => 'category',
        'status' => 'status',
        'media_partner_logo_url' => 'mediaPartnerLogoUrl',
        'media_partner_name' => 'mediaPartnerName',
        'is_paid' => 'isPaid',
        'media_partner_website_url' => 'mediaPartnerWebsiteUrl',
        'media_partner_description' => 'mediaPartnerDescription',
        'publication_count' => 'publicationCount',
        'auto_publish_available' => 'autoPublishAvailable',
        'manual_publish_available' => 'manualPublishAvailable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_favorite' => 'setIsFavorite',
        'is_auto_publish' => 'setIsAutoPublish',
        'category' => 'setCategory',
        'status' => 'setStatus',
        'media_partner_logo_url' => 'setMediaPartnerLogoUrl',
        'media_partner_name' => 'setMediaPartnerName',
        'is_paid' => 'setIsPaid',
        'media_partner_website_url' => 'setMediaPartnerWebsiteUrl',
        'media_partner_description' => 'setMediaPartnerDescription',
        'publication_count' => 'setPublicationCount',
        'auto_publish_available' => 'setAutoPublishAvailable',
        'manual_publish_available' => 'setManualPublishAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_favorite' => 'getIsFavorite',
        'is_auto_publish' => 'getIsAutoPublish',
        'category' => 'getCategory',
        'status' => 'getStatus',
        'media_partner_logo_url' => 'getMediaPartnerLogoUrl',
        'media_partner_name' => 'getMediaPartnerName',
        'is_paid' => 'getIsPaid',
        'media_partner_website_url' => 'getMediaPartnerWebsiteUrl',
        'media_partner_description' => 'getMediaPartnerDescription',
        'publication_count' => 'getPublicationCount',
        'auto_publish_available' => 'getAutoPublishAvailable',
        'manual_publish_available' => 'getManualPublishAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['is_favorite'] = isset($data['is_favorite']) ? $data['is_favorite'] : null;
        $this->container['is_auto_publish'] = isset($data['is_auto_publish']) ? $data['is_auto_publish'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['media_partner_logo_url'] = isset($data['media_partner_logo_url']) ? $data['media_partner_logo_url'] : null;
        $this->container['media_partner_name'] = isset($data['media_partner_name']) ? $data['media_partner_name'] : null;
        $this->container['is_paid'] = isset($data['is_paid']) ? $data['is_paid'] : null;
        $this->container['media_partner_website_url'] = isset($data['media_partner_website_url']) ? $data['media_partner_website_url'] : null;
        $this->container['media_partner_description'] = isset($data['media_partner_description']) ? $data['media_partner_description'] : null;
        $this->container['publication_count'] = isset($data['publication_count']) ? $data['publication_count'] : null;
        $this->container['auto_publish_available'] = isset($data['auto_publish_available']) ? $data['auto_publish_available'] : null;
        $this->container['manual_publish_available'] = isset($data['manual_publish_available']) ? $data['manual_publish_available'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_favorite
     *
     * @return bool
     */
    public function getIsFavorite()
    {
        return $this->container['is_favorite'];
    }

    /**
     * Sets is_favorite
     *
     * @param bool $is_favorite is_favorite
     *
     * @return $this
     */
    public function setIsFavorite($is_favorite)
    {
        $this->container['is_favorite'] = $is_favorite;

        return $this;
    }

    /**
     * Gets is_auto_publish
     *
     * @return bool
     */
    public function getIsAutoPublish()
    {
        return $this->container['is_auto_publish'];
    }

    /**
     * Sets is_auto_publish
     *
     * @param bool $is_auto_publish is_auto_publish
     *
     * @return $this
     */
    public function setIsAutoPublish($is_auto_publish)
    {
        $this->container['is_auto_publish'] = $is_auto_publish;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\MediaPartnerCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\MediaPartnerCategory $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\MediaContractStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\MediaContractStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets media_partner_logo_url
     *
     * @return string
     */
    public function getMediaPartnerLogoUrl()
    {
        return $this->container['media_partner_logo_url'];
    }

    /**
     * Sets media_partner_logo_url
     *
     * @param string $media_partner_logo_url media_partner_logo_url
     *
     * @return $this
     */
    public function setMediaPartnerLogoUrl($media_partner_logo_url)
    {
        $this->container['media_partner_logo_url'] = $media_partner_logo_url;

        return $this;
    }

    /**
     * Gets media_partner_name
     *
     * @return string
     */
    public function getMediaPartnerName()
    {
        return $this->container['media_partner_name'];
    }

    /**
     * Sets media_partner_name
     *
     * @param string $media_partner_name media_partner_name
     *
     * @return $this
     */
    public function setMediaPartnerName($media_partner_name)
    {
        $this->container['media_partner_name'] = $media_partner_name;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool $is_paid is_paid
     *
     * @return $this
     */
    public function setIsPaid($is_paid)
    {
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets media_partner_website_url
     *
     * @return string
     */
    public function getMediaPartnerWebsiteUrl()
    {
        return $this->container['media_partner_website_url'];
    }

    /**
     * Sets media_partner_website_url
     *
     * @param string $media_partner_website_url media_partner_website_url
     *
     * @return $this
     */
    public function setMediaPartnerWebsiteUrl($media_partner_website_url)
    {
        $this->container['media_partner_website_url'] = $media_partner_website_url;

        return $this;
    }

    /**
     * Gets media_partner_description
     *
     * @return string
     */
    public function getMediaPartnerDescription()
    {
        return $this->container['media_partner_description'];
    }

    /**
     * Sets media_partner_description
     *
     * @param string $media_partner_description media_partner_description
     *
     * @return $this
     */
    public function setMediaPartnerDescription($media_partner_description)
    {
        $this->container['media_partner_description'] = $media_partner_description;

        return $this;
    }

    /**
     * Gets publication_count
     *
     * @return int
     */
    public function getPublicationCount()
    {
        return $this->container['publication_count'];
    }

    /**
     * Sets publication_count
     *
     * @param int $publication_count publication_count
     *
     * @return $this
     */
    public function setPublicationCount($publication_count)
    {
        $this->container['publication_count'] = $publication_count;

        return $this;
    }

    /**
     * Gets auto_publish_available
     *
     * @return bool
     */
    public function getAutoPublishAvailable()
    {
        return $this->container['auto_publish_available'];
    }

    /**
     * Sets auto_publish_available
     *
     * @param bool $auto_publish_available auto_publish_available
     *
     * @return $this
     */
    public function setAutoPublishAvailable($auto_publish_available)
    {
        $this->container['auto_publish_available'] = $auto_publish_available;

        return $this;
    }

    /**
     * Gets manual_publish_available
     *
     * @return bool
     */
    public function getManualPublishAvailable()
    {
        return $this->container['manual_publish_available'];
    }

    /**
     * Sets manual_publish_available
     *
     * @param bool $manual_publish_available manual_publish_available
     *
     * @return $this
     */
    public function setManualPublishAvailable($manual_publish_available)
    {
        $this->container['manual_publish_available'] = $manual_publish_available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


