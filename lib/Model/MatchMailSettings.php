<?php
/**
 * MatchMailSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MatchMailSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchMailSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MatchMailSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'has_match_mail' => 'bool',
        'website_provider' => '\Swagger\Client\Model\WebsiteProvider',
        'collegial_listing_needs_company_authorisation_token' => 'bool',
        'collegial_listings_link' => 'string',
        'collegial_listings_enabled' => 'bool',
        'collegial_listings_authorised_until' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'has_match_mail' => null,
        'website_provider' => null,
        'collegial_listing_needs_company_authorisation_token' => null,
        'collegial_listings_link' => null,
        'collegial_listings_enabled' => null,
        'collegial_listings_authorised_until' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_match_mail' => 'hasMatchMail',
        'website_provider' => 'websiteProvider',
        'collegial_listing_needs_company_authorisation_token' => 'collegialListingNeedsCompanyAuthorisationToken',
        'collegial_listings_link' => 'collegialListingsLink',
        'collegial_listings_enabled' => 'collegialListingsEnabled',
        'collegial_listings_authorised_until' => 'collegialListingsAuthorisedUntil'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_match_mail' => 'setHasMatchMail',
        'website_provider' => 'setWebsiteProvider',
        'collegial_listing_needs_company_authorisation_token' => 'setCollegialListingNeedsCompanyAuthorisationToken',
        'collegial_listings_link' => 'setCollegialListingsLink',
        'collegial_listings_enabled' => 'setCollegialListingsEnabled',
        'collegial_listings_authorised_until' => 'setCollegialListingsAuthorisedUntil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_match_mail' => 'getHasMatchMail',
        'website_provider' => 'getWebsiteProvider',
        'collegial_listing_needs_company_authorisation_token' => 'getCollegialListingNeedsCompanyAuthorisationToken',
        'collegial_listings_link' => 'getCollegialListingsLink',
        'collegial_listings_enabled' => 'getCollegialListingsEnabled',
        'collegial_listings_authorised_until' => 'getCollegialListingsAuthorisedUntil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_match_mail'] = isset($data['has_match_mail']) ? $data['has_match_mail'] : null;
        $this->container['website_provider'] = isset($data['website_provider']) ? $data['website_provider'] : null;
        $this->container['collegial_listing_needs_company_authorisation_token'] = isset($data['collegial_listing_needs_company_authorisation_token']) ? $data['collegial_listing_needs_company_authorisation_token'] : null;
        $this->container['collegial_listings_link'] = isset($data['collegial_listings_link']) ? $data['collegial_listings_link'] : null;
        $this->container['collegial_listings_enabled'] = isset($data['collegial_listings_enabled']) ? $data['collegial_listings_enabled'] : null;
        $this->container['collegial_listings_authorised_until'] = isset($data['collegial_listings_authorised_until']) ? $data['collegial_listings_authorised_until'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['collegial_listing_needs_company_authorisation_token'] === null) {
            $invalidProperties[] = "'collegial_listing_needs_company_authorisation_token' can't be null";
        }
        if ($this->container['collegial_listings_enabled'] === null) {
            $invalidProperties[] = "'collegial_listings_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_match_mail
     *
     * @return bool
     */
    public function getHasMatchMail()
    {
        return $this->container['has_match_mail'];
    }

    /**
     * Sets has_match_mail
     *
     * @param bool $has_match_mail has_match_mail
     *
     * @return $this
     */
    public function setHasMatchMail($has_match_mail)
    {
        $this->container['has_match_mail'] = $has_match_mail;

        return $this;
    }

    /**
     * Gets website_provider
     *
     * @return \Swagger\Client\Model\WebsiteProvider
     */
    public function getWebsiteProvider()
    {
        return $this->container['website_provider'];
    }

    /**
     * Sets website_provider
     *
     * @param \Swagger\Client\Model\WebsiteProvider $website_provider website_provider
     *
     * @return $this
     */
    public function setWebsiteProvider($website_provider)
    {
        $this->container['website_provider'] = $website_provider;

        return $this;
    }

    /**
     * Gets collegial_listing_needs_company_authorisation_token
     *
     * @return bool
     */
    public function getCollegialListingNeedsCompanyAuthorisationToken()
    {
        return $this->container['collegial_listing_needs_company_authorisation_token'];
    }

    /**
     * Sets collegial_listing_needs_company_authorisation_token
     *
     * @param bool $collegial_listing_needs_company_authorisation_token collegial_listing_needs_company_authorisation_token
     *
     * @return $this
     */
    public function setCollegialListingNeedsCompanyAuthorisationToken($collegial_listing_needs_company_authorisation_token)
    {
        $this->container['collegial_listing_needs_company_authorisation_token'] = $collegial_listing_needs_company_authorisation_token;

        return $this;
    }

    /**
     * Gets collegial_listings_link
     *
     * @return string
     */
    public function getCollegialListingsLink()
    {
        return $this->container['collegial_listings_link'];
    }

    /**
     * Sets collegial_listings_link
     *
     * @param string $collegial_listings_link collegial_listings_link
     *
     * @return $this
     */
    public function setCollegialListingsLink($collegial_listings_link)
    {
        $this->container['collegial_listings_link'] = $collegial_listings_link;

        return $this;
    }

    /**
     * Gets collegial_listings_enabled
     *
     * @return bool
     */
    public function getCollegialListingsEnabled()
    {
        return $this->container['collegial_listings_enabled'];
    }

    /**
     * Sets collegial_listings_enabled
     *
     * @param bool $collegial_listings_enabled collegial_listings_enabled
     *
     * @return $this
     */
    public function setCollegialListingsEnabled($collegial_listings_enabled)
    {
        $this->container['collegial_listings_enabled'] = $collegial_listings_enabled;

        return $this;
    }

    /**
     * Gets collegial_listings_authorised_until
     *
     * @return \DateTime
     */
    public function getCollegialListingsAuthorisedUntil()
    {
        return $this->container['collegial_listings_authorised_until'];
    }

    /**
     * Sets collegial_listings_authorised_until
     *
     * @param \DateTime $collegial_listings_authorised_until collegial_listings_authorised_until
     *
     * @return $this
     */
    public function setCollegialListingsAuthorisedUntil($collegial_listings_authorised_until)
    {
        $this->container['collegial_listings_authorised_until'] = $collegial_listings_authorised_until;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


