<?php
/**
 * FinancialAdministration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * FinancialAdministration Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinancialAdministration extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FinancialAdministration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'back_ground_image_first_page' => '\Swagger\Client\Model\ImageBlob',
        'back_ground_image_following_pages' => '\Swagger\Client\Model\ImageBlob',
        'debtor_number_format_post' => 'string',
        'debtor_number_format_pre' => 'string',
        'export_code' => 'string',
        'export_journal_code' => 'string',
        'groups' => '\Swagger\Client\Model\FinancialAdministrationGroup[]',
        'invoice_number_format_post' => 'string',
        'invoice_number_format_pre' => 'string',
        'default_business_invoice_template' => 'string',
        'default_consumer_invoice_template' => 'string',
        'is_linked_to_software_administration' => 'bool',
        'linked_expiration' => '\DateTime',
        'link_to_software_administration' => '\Swagger\Client\Model\SoftwareAdministration',
        'name' => 'string',
        'next_debtor_number' => 'string',
        'next_invoice_number' => 'string',
        'products' => '\Swagger\Client\Model\FinancialAdministrationProduct[]',
        'tax_rates' => '\Swagger\Client\Model\FinancialAdministrationTaxRate[]',
        'use_back_ground_images_by_default' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'back_ground_image_first_page' => null,
        'back_ground_image_following_pages' => null,
        'debtor_number_format_post' => null,
        'debtor_number_format_pre' => null,
        'export_code' => null,
        'export_journal_code' => null,
        'groups' => null,
        'invoice_number_format_post' => null,
        'invoice_number_format_pre' => null,
        'default_business_invoice_template' => null,
        'default_consumer_invoice_template' => null,
        'is_linked_to_software_administration' => null,
        'linked_expiration' => 'date-time',
        'link_to_software_administration' => null,
        'name' => null,
        'next_debtor_number' => null,
        'next_invoice_number' => null,
        'products' => null,
        'tax_rates' => null,
        'use_back_ground_images_by_default' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'back_ground_image_first_page' => 'backGroundImageFirstPage',
        'back_ground_image_following_pages' => 'backGroundImageFollowingPages',
        'debtor_number_format_post' => 'debtorNumberFormatPost',
        'debtor_number_format_pre' => 'debtorNumberFormatPre',
        'export_code' => 'exportCode',
        'export_journal_code' => 'exportJournalCode',
        'groups' => 'groups',
        'invoice_number_format_post' => 'invoiceNumberFormatPost',
        'invoice_number_format_pre' => 'invoiceNumberFormatPre',
        'default_business_invoice_template' => 'defaultBusinessInvoiceTemplate',
        'default_consumer_invoice_template' => 'defaultConsumerInvoiceTemplate',
        'is_linked_to_software_administration' => 'isLinkedToSoftwareAdministration',
        'linked_expiration' => 'linkedExpiration',
        'link_to_software_administration' => 'linkToSoftwareAdministration',
        'name' => 'name',
        'next_debtor_number' => 'nextDebtorNumber',
        'next_invoice_number' => 'nextInvoiceNumber',
        'products' => 'products',
        'tax_rates' => 'taxRates',
        'use_back_ground_images_by_default' => 'useBackGroundImagesByDefault'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'back_ground_image_first_page' => 'setBackGroundImageFirstPage',
        'back_ground_image_following_pages' => 'setBackGroundImageFollowingPages',
        'debtor_number_format_post' => 'setDebtorNumberFormatPost',
        'debtor_number_format_pre' => 'setDebtorNumberFormatPre',
        'export_code' => 'setExportCode',
        'export_journal_code' => 'setExportJournalCode',
        'groups' => 'setGroups',
        'invoice_number_format_post' => 'setInvoiceNumberFormatPost',
        'invoice_number_format_pre' => 'setInvoiceNumberFormatPre',
        'default_business_invoice_template' => 'setDefaultBusinessInvoiceTemplate',
        'default_consumer_invoice_template' => 'setDefaultConsumerInvoiceTemplate',
        'is_linked_to_software_administration' => 'setIsLinkedToSoftwareAdministration',
        'linked_expiration' => 'setLinkedExpiration',
        'link_to_software_administration' => 'setLinkToSoftwareAdministration',
        'name' => 'setName',
        'next_debtor_number' => 'setNextDebtorNumber',
        'next_invoice_number' => 'setNextInvoiceNumber',
        'products' => 'setProducts',
        'tax_rates' => 'setTaxRates',
        'use_back_ground_images_by_default' => 'setUseBackGroundImagesByDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'back_ground_image_first_page' => 'getBackGroundImageFirstPage',
        'back_ground_image_following_pages' => 'getBackGroundImageFollowingPages',
        'debtor_number_format_post' => 'getDebtorNumberFormatPost',
        'debtor_number_format_pre' => 'getDebtorNumberFormatPre',
        'export_code' => 'getExportCode',
        'export_journal_code' => 'getExportJournalCode',
        'groups' => 'getGroups',
        'invoice_number_format_post' => 'getInvoiceNumberFormatPost',
        'invoice_number_format_pre' => 'getInvoiceNumberFormatPre',
        'default_business_invoice_template' => 'getDefaultBusinessInvoiceTemplate',
        'default_consumer_invoice_template' => 'getDefaultConsumerInvoiceTemplate',
        'is_linked_to_software_administration' => 'getIsLinkedToSoftwareAdministration',
        'linked_expiration' => 'getLinkedExpiration',
        'link_to_software_administration' => 'getLinkToSoftwareAdministration',
        'name' => 'getName',
        'next_debtor_number' => 'getNextDebtorNumber',
        'next_invoice_number' => 'getNextInvoiceNumber',
        'products' => 'getProducts',
        'tax_rates' => 'getTaxRates',
        'use_back_ground_images_by_default' => 'getUseBackGroundImagesByDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['back_ground_image_first_page'] = isset($data['back_ground_image_first_page']) ? $data['back_ground_image_first_page'] : null;
        $this->container['back_ground_image_following_pages'] = isset($data['back_ground_image_following_pages']) ? $data['back_ground_image_following_pages'] : null;
        $this->container['debtor_number_format_post'] = isset($data['debtor_number_format_post']) ? $data['debtor_number_format_post'] : null;
        $this->container['debtor_number_format_pre'] = isset($data['debtor_number_format_pre']) ? $data['debtor_number_format_pre'] : null;
        $this->container['export_code'] = isset($data['export_code']) ? $data['export_code'] : null;
        $this->container['export_journal_code'] = isset($data['export_journal_code']) ? $data['export_journal_code'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['invoice_number_format_post'] = isset($data['invoice_number_format_post']) ? $data['invoice_number_format_post'] : null;
        $this->container['invoice_number_format_pre'] = isset($data['invoice_number_format_pre']) ? $data['invoice_number_format_pre'] : null;
        $this->container['default_business_invoice_template'] = isset($data['default_business_invoice_template']) ? $data['default_business_invoice_template'] : null;
        $this->container['default_consumer_invoice_template'] = isset($data['default_consumer_invoice_template']) ? $data['default_consumer_invoice_template'] : null;
        $this->container['is_linked_to_software_administration'] = isset($data['is_linked_to_software_administration']) ? $data['is_linked_to_software_administration'] : null;
        $this->container['linked_expiration'] = isset($data['linked_expiration']) ? $data['linked_expiration'] : null;
        $this->container['link_to_software_administration'] = isset($data['link_to_software_administration']) ? $data['link_to_software_administration'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['next_debtor_number'] = isset($data['next_debtor_number']) ? $data['next_debtor_number'] : null;
        $this->container['next_invoice_number'] = isset($data['next_invoice_number']) ? $data['next_invoice_number'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['tax_rates'] = isset($data['tax_rates']) ? $data['tax_rates'] : null;
        $this->container['use_back_ground_images_by_default'] = isset($data['use_back_ground_images_by_default']) ? $data['use_back_ground_images_by_default'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['debtor_number_format_post']) && (mb_strlen($this->container['debtor_number_format_post']) > 10)) {
            $invalidProperties[] = "invalid value for 'debtor_number_format_post', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['debtor_number_format_post']) && (mb_strlen($this->container['debtor_number_format_post']) < 0)) {
            $invalidProperties[] = "invalid value for 'debtor_number_format_post', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['debtor_number_format_pre']) && (mb_strlen($this->container['debtor_number_format_pre']) > 10)) {
            $invalidProperties[] = "invalid value for 'debtor_number_format_pre', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['debtor_number_format_pre']) && (mb_strlen($this->container['debtor_number_format_pre']) < 0)) {
            $invalidProperties[] = "invalid value for 'debtor_number_format_pre', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['export_code']) && (mb_strlen($this->container['export_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'export_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['export_code']) && (mb_strlen($this->container['export_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'export_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['export_journal_code']) && (mb_strlen($this->container['export_journal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'export_journal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['export_journal_code']) && (mb_strlen($this->container['export_journal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'export_journal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_number_format_post']) && (mb_strlen($this->container['invoice_number_format_post']) > 10)) {
            $invalidProperties[] = "invalid value for 'invoice_number_format_post', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['invoice_number_format_post']) && (mb_strlen($this->container['invoice_number_format_post']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_number_format_post', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_number_format_pre']) && (mb_strlen($this->container['invoice_number_format_pre']) > 10)) {
            $invalidProperties[] = "invalid value for 'invoice_number_format_pre', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['invoice_number_format_pre']) && (mb_strlen($this->container['invoice_number_format_pre']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_number_format_pre', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['default_business_invoice_template']) && (mb_strlen($this->container['default_business_invoice_template']) > 100)) {
            $invalidProperties[] = "invalid value for 'default_business_invoice_template', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['default_business_invoice_template']) && (mb_strlen($this->container['default_business_invoice_template']) < 0)) {
            $invalidProperties[] = "invalid value for 'default_business_invoice_template', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['default_consumer_invoice_template']) && (mb_strlen($this->container['default_consumer_invoice_template']) > 100)) {
            $invalidProperties[] = "invalid value for 'default_consumer_invoice_template', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['default_consumer_invoice_template']) && (mb_strlen($this->container['default_consumer_invoice_template']) < 0)) {
            $invalidProperties[] = "invalid value for 'default_consumer_invoice_template', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next_debtor_number']) && (mb_strlen($this->container['next_debtor_number']) > 15)) {
            $invalidProperties[] = "invalid value for 'next_debtor_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['next_debtor_number']) && (mb_strlen($this->container['next_debtor_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'next_debtor_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next_invoice_number']) && (mb_strlen($this->container['next_invoice_number']) > 15)) {
            $invalidProperties[] = "invalid value for 'next_invoice_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['next_invoice_number']) && (mb_strlen($this->container['next_invoice_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'next_invoice_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets back_ground_image_first_page
     *
     * @return \Swagger\Client\Model\ImageBlob
     */
    public function getBackGroundImageFirstPage()
    {
        return $this->container['back_ground_image_first_page'];
    }

    /**
     * Sets back_ground_image_first_page
     *
     * @param \Swagger\Client\Model\ImageBlob $back_ground_image_first_page back_ground_image_first_page
     *
     * @return $this
     */
    public function setBackGroundImageFirstPage($back_ground_image_first_page)
    {
        $this->container['back_ground_image_first_page'] = $back_ground_image_first_page;

        return $this;
    }

    /**
     * Gets back_ground_image_following_pages
     *
     * @return \Swagger\Client\Model\ImageBlob
     */
    public function getBackGroundImageFollowingPages()
    {
        return $this->container['back_ground_image_following_pages'];
    }

    /**
     * Sets back_ground_image_following_pages
     *
     * @param \Swagger\Client\Model\ImageBlob $back_ground_image_following_pages back_ground_image_following_pages
     *
     * @return $this
     */
    public function setBackGroundImageFollowingPages($back_ground_image_following_pages)
    {
        $this->container['back_ground_image_following_pages'] = $back_ground_image_following_pages;

        return $this;
    }

    /**
     * Gets debtor_number_format_post
     *
     * @return string
     */
    public function getDebtorNumberFormatPost()
    {
        return $this->container['debtor_number_format_post'];
    }

    /**
     * Sets debtor_number_format_post
     *
     * @param string $debtor_number_format_post debtor_number_format_post
     *
     * @return $this
     */
    public function setDebtorNumberFormatPost($debtor_number_format_post)
    {
        if (!is_null($debtor_number_format_post) && (mb_strlen($debtor_number_format_post) > 10)) {
            throw new \InvalidArgumentException('invalid length for $debtor_number_format_post when calling FinancialAdministration., must be smaller than or equal to 10.');
        }
        if (!is_null($debtor_number_format_post) && (mb_strlen($debtor_number_format_post) < 0)) {
            throw new \InvalidArgumentException('invalid length for $debtor_number_format_post when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['debtor_number_format_post'] = $debtor_number_format_post;

        return $this;
    }

    /**
     * Gets debtor_number_format_pre
     *
     * @return string
     */
    public function getDebtorNumberFormatPre()
    {
        return $this->container['debtor_number_format_pre'];
    }

    /**
     * Sets debtor_number_format_pre
     *
     * @param string $debtor_number_format_pre debtor_number_format_pre
     *
     * @return $this
     */
    public function setDebtorNumberFormatPre($debtor_number_format_pre)
    {
        if (!is_null($debtor_number_format_pre) && (mb_strlen($debtor_number_format_pre) > 10)) {
            throw new \InvalidArgumentException('invalid length for $debtor_number_format_pre when calling FinancialAdministration., must be smaller than or equal to 10.');
        }
        if (!is_null($debtor_number_format_pre) && (mb_strlen($debtor_number_format_pre) < 0)) {
            throw new \InvalidArgumentException('invalid length for $debtor_number_format_pre when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['debtor_number_format_pre'] = $debtor_number_format_pre;

        return $this;
    }

    /**
     * Gets export_code
     *
     * @return string
     */
    public function getExportCode()
    {
        return $this->container['export_code'];
    }

    /**
     * Sets export_code
     *
     * @param string $export_code export_code
     *
     * @return $this
     */
    public function setExportCode($export_code)
    {
        if (!is_null($export_code) && (mb_strlen($export_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $export_code when calling FinancialAdministration., must be smaller than or equal to 10.');
        }
        if (!is_null($export_code) && (mb_strlen($export_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $export_code when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['export_code'] = $export_code;

        return $this;
    }

    /**
     * Gets export_journal_code
     *
     * @return string
     */
    public function getExportJournalCode()
    {
        return $this->container['export_journal_code'];
    }

    /**
     * Sets export_journal_code
     *
     * @param string $export_journal_code export_journal_code
     *
     * @return $this
     */
    public function setExportJournalCode($export_journal_code)
    {
        if (!is_null($export_journal_code) && (mb_strlen($export_journal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $export_journal_code when calling FinancialAdministration., must be smaller than or equal to 10.');
        }
        if (!is_null($export_journal_code) && (mb_strlen($export_journal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $export_journal_code when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['export_journal_code'] = $export_journal_code;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Swagger\Client\Model\FinancialAdministrationGroup[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Swagger\Client\Model\FinancialAdministrationGroup[] $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets invoice_number_format_post
     *
     * @return string
     */
    public function getInvoiceNumberFormatPost()
    {
        return $this->container['invoice_number_format_post'];
    }

    /**
     * Sets invoice_number_format_post
     *
     * @param string $invoice_number_format_post invoice_number_format_post
     *
     * @return $this
     */
    public function setInvoiceNumberFormatPost($invoice_number_format_post)
    {
        if (!is_null($invoice_number_format_post) && (mb_strlen($invoice_number_format_post) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number_format_post when calling FinancialAdministration., must be smaller than or equal to 10.');
        }
        if (!is_null($invoice_number_format_post) && (mb_strlen($invoice_number_format_post) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number_format_post when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['invoice_number_format_post'] = $invoice_number_format_post;

        return $this;
    }

    /**
     * Gets invoice_number_format_pre
     *
     * @return string
     */
    public function getInvoiceNumberFormatPre()
    {
        return $this->container['invoice_number_format_pre'];
    }

    /**
     * Sets invoice_number_format_pre
     *
     * @param string $invoice_number_format_pre invoice_number_format_pre
     *
     * @return $this
     */
    public function setInvoiceNumberFormatPre($invoice_number_format_pre)
    {
        if (!is_null($invoice_number_format_pre) && (mb_strlen($invoice_number_format_pre) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number_format_pre when calling FinancialAdministration., must be smaller than or equal to 10.');
        }
        if (!is_null($invoice_number_format_pre) && (mb_strlen($invoice_number_format_pre) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number_format_pre when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['invoice_number_format_pre'] = $invoice_number_format_pre;

        return $this;
    }

    /**
     * Gets default_business_invoice_template
     *
     * @return string
     */
    public function getDefaultBusinessInvoiceTemplate()
    {
        return $this->container['default_business_invoice_template'];
    }

    /**
     * Sets default_business_invoice_template
     *
     * @param string $default_business_invoice_template default_business_invoice_template
     *
     * @return $this
     */
    public function setDefaultBusinessInvoiceTemplate($default_business_invoice_template)
    {
        if (!is_null($default_business_invoice_template) && (mb_strlen($default_business_invoice_template) > 100)) {
            throw new \InvalidArgumentException('invalid length for $default_business_invoice_template when calling FinancialAdministration., must be smaller than or equal to 100.');
        }
        if (!is_null($default_business_invoice_template) && (mb_strlen($default_business_invoice_template) < 0)) {
            throw new \InvalidArgumentException('invalid length for $default_business_invoice_template when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['default_business_invoice_template'] = $default_business_invoice_template;

        return $this;
    }

    /**
     * Gets default_consumer_invoice_template
     *
     * @return string
     */
    public function getDefaultConsumerInvoiceTemplate()
    {
        return $this->container['default_consumer_invoice_template'];
    }

    /**
     * Sets default_consumer_invoice_template
     *
     * @param string $default_consumer_invoice_template default_consumer_invoice_template
     *
     * @return $this
     */
    public function setDefaultConsumerInvoiceTemplate($default_consumer_invoice_template)
    {
        if (!is_null($default_consumer_invoice_template) && (mb_strlen($default_consumer_invoice_template) > 100)) {
            throw new \InvalidArgumentException('invalid length for $default_consumer_invoice_template when calling FinancialAdministration., must be smaller than or equal to 100.');
        }
        if (!is_null($default_consumer_invoice_template) && (mb_strlen($default_consumer_invoice_template) < 0)) {
            throw new \InvalidArgumentException('invalid length for $default_consumer_invoice_template when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['default_consumer_invoice_template'] = $default_consumer_invoice_template;

        return $this;
    }

    /**
     * Gets is_linked_to_software_administration
     *
     * @return bool
     */
    public function getIsLinkedToSoftwareAdministration()
    {
        return $this->container['is_linked_to_software_administration'];
    }

    /**
     * Sets is_linked_to_software_administration
     *
     * @param bool $is_linked_to_software_administration is_linked_to_software_administration
     *
     * @return $this
     */
    public function setIsLinkedToSoftwareAdministration($is_linked_to_software_administration)
    {
        $this->container['is_linked_to_software_administration'] = $is_linked_to_software_administration;

        return $this;
    }

    /**
     * Gets linked_expiration
     *
     * @return \DateTime
     */
    public function getLinkedExpiration()
    {
        return $this->container['linked_expiration'];
    }

    /**
     * Sets linked_expiration
     *
     * @param \DateTime $linked_expiration linked_expiration
     *
     * @return $this
     */
    public function setLinkedExpiration($linked_expiration)
    {
        $this->container['linked_expiration'] = $linked_expiration;

        return $this;
    }

    /**
     * Gets link_to_software_administration
     *
     * @return \Swagger\Client\Model\SoftwareAdministration
     */
    public function getLinkToSoftwareAdministration()
    {
        return $this->container['link_to_software_administration'];
    }

    /**
     * Sets link_to_software_administration
     *
     * @param \Swagger\Client\Model\SoftwareAdministration $link_to_software_administration link_to_software_administration
     *
     * @return $this
     */
    public function setLinkToSoftwareAdministration($link_to_software_administration)
    {
        $this->container['link_to_software_administration'] = $link_to_software_administration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling FinancialAdministration., must be smaller than or equal to 100.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_debtor_number
     *
     * @return string
     */
    public function getNextDebtorNumber()
    {
        return $this->container['next_debtor_number'];
    }

    /**
     * Sets next_debtor_number
     *
     * @param string $next_debtor_number next_debtor_number
     *
     * @return $this
     */
    public function setNextDebtorNumber($next_debtor_number)
    {
        if (!is_null($next_debtor_number) && (mb_strlen($next_debtor_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $next_debtor_number when calling FinancialAdministration., must be smaller than or equal to 15.');
        }
        if (!is_null($next_debtor_number) && (mb_strlen($next_debtor_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $next_debtor_number when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['next_debtor_number'] = $next_debtor_number;

        return $this;
    }

    /**
     * Gets next_invoice_number
     *
     * @return string
     */
    public function getNextInvoiceNumber()
    {
        return $this->container['next_invoice_number'];
    }

    /**
     * Sets next_invoice_number
     *
     * @param string $next_invoice_number next_invoice_number
     *
     * @return $this
     */
    public function setNextInvoiceNumber($next_invoice_number)
    {
        if (!is_null($next_invoice_number) && (mb_strlen($next_invoice_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $next_invoice_number when calling FinancialAdministration., must be smaller than or equal to 15.');
        }
        if (!is_null($next_invoice_number) && (mb_strlen($next_invoice_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $next_invoice_number when calling FinancialAdministration., must be bigger than or equal to 0.');
        }

        $this->container['next_invoice_number'] = $next_invoice_number;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Swagger\Client\Model\FinancialAdministrationProduct[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Swagger\Client\Model\FinancialAdministrationProduct[] $products products
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets tax_rates
     *
     * @return \Swagger\Client\Model\FinancialAdministrationTaxRate[]
     */
    public function getTaxRates()
    {
        return $this->container['tax_rates'];
    }

    /**
     * Sets tax_rates
     *
     * @param \Swagger\Client\Model\FinancialAdministrationTaxRate[] $tax_rates tax_rates
     *
     * @return $this
     */
    public function setTaxRates($tax_rates)
    {
        $this->container['tax_rates'] = $tax_rates;

        return $this;
    }

    /**
     * Gets use_back_ground_images_by_default
     *
     * @return bool
     */
    public function getUseBackGroundImagesByDefault()
    {
        return $this->container['use_back_ground_images_by_default'];
    }

    /**
     * Sets use_back_ground_images_by_default
     *
     * @param bool $use_back_ground_images_by_default use_back_ground_images_by_default
     *
     * @return $this
     */
    public function setUseBackGroundImagesByDefault($use_back_ground_images_by_default)
    {
        $this->container['use_back_ground_images_by_default'] = $use_back_ground_images_by_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


