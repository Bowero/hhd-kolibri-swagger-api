<?php
/**
 * LinkedAgendaItemCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * LinkedAgendaItemCategory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinkedAgendaItemCategory extends LinkedItem 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LinkedAgendaItemCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'back_color' => 'string',
        'front_color' => 'string',
        'display_name' => 'string',
        'needs_to_be_confirmed' => 'bool',
        'category_type' => '\Swagger\Client\Model\AgendaItemCategoryType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'back_color' => null,
        'front_color' => null,
        'display_name' => null,
        'needs_to_be_confirmed' => null,
        'category_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'back_color' => 'backColor',
        'front_color' => 'frontColor',
        'display_name' => 'displayName',
        'needs_to_be_confirmed' => 'needsToBeConfirmed',
        'category_type' => 'categoryType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'back_color' => 'setBackColor',
        'front_color' => 'setFrontColor',
        'display_name' => 'setDisplayName',
        'needs_to_be_confirmed' => 'setNeedsToBeConfirmed',
        'category_type' => 'setCategoryType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'back_color' => 'getBackColor',
        'front_color' => 'getFrontColor',
        'display_name' => 'getDisplayName',
        'needs_to_be_confirmed' => 'getNeedsToBeConfirmed',
        'category_type' => 'getCategoryType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['back_color'] = isset($data['back_color']) ? $data['back_color'] : null;
        $this->container['front_color'] = isset($data['front_color']) ? $data['front_color'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['needs_to_be_confirmed'] = isset($data['needs_to_be_confirmed']) ? $data['needs_to_be_confirmed'] : null;
        $this->container['category_type'] = isset($data['category_type']) ? $data['category_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets back_color
     *
     * @return string
     */
    public function getBackColor()
    {
        return $this->container['back_color'];
    }

    /**
     * Sets back_color
     *
     * @param string $back_color back_color
     *
     * @return $this
     */
    public function setBackColor($back_color)
    {
        $this->container['back_color'] = $back_color;

        return $this;
    }

    /**
     * Gets front_color
     *
     * @return string
     */
    public function getFrontColor()
    {
        return $this->container['front_color'];
    }

    /**
     * Sets front_color
     *
     * @param string $front_color front_color
     *
     * @return $this
     */
    public function setFrontColor($front_color)
    {
        $this->container['front_color'] = $front_color;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets needs_to_be_confirmed
     *
     * @return bool
     */
    public function getNeedsToBeConfirmed()
    {
        return $this->container['needs_to_be_confirmed'];
    }

    /**
     * Sets needs_to_be_confirmed
     *
     * @param bool $needs_to_be_confirmed needs_to_be_confirmed
     *
     * @return $this
     */
    public function setNeedsToBeConfirmed($needs_to_be_confirmed)
    {
        $this->container['needs_to_be_confirmed'] = $needs_to_be_confirmed;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return \Swagger\Client\Model\AgendaItemCategoryType
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param \Swagger\Client\Model\AgendaItemCategoryType $category_type category_type
     *
     * @return $this
     */
    public function setCategoryType($category_type)
    {
        $this->container['category_type'] = $category_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


