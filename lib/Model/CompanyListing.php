<?php
/**
 * CompanyListing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * CompanyListing Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyListing extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyListing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bedroom_number' => 'int',
        'building_layer_number' => 'int',
        'content' => '\Swagger\Client\Model\Size',
        'garage' => '\Swagger\Client\Model\Garage',
        'garden' => '\Swagger\Client\Model\Garden',
        'house_type' => '\Swagger\Client\Model\HouseType',
        'parcel_surface' => '\Swagger\Client\Model\Size',
        'room_number' => 'int',
        'situated_type' => '\Swagger\Client\Model\SituatedType',
        'use_surface' => '\Swagger\Client\Model\Size',
        'year_of_construction' => '\Swagger\Client\Model\YearOfConstruction',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'object_assignment_id' => 'string',
        'is_main_building' => 'bool',
        'maintenance_inside' => '\Swagger\Client\Model\Maintenance',
        'maintenance_outside' => '\Swagger\Client\Model\Maintenance'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bedroom_number' => 'int32',
        'building_layer_number' => 'int32',
        'content' => null,
        'garage' => null,
        'garden' => null,
        'house_type' => null,
        'parcel_surface' => null,
        'room_number' => 'int32',
        'situated_type' => null,
        'use_surface' => null,
        'year_of_construction' => null,
        'linked_assignment' => null,
        'object_assignment_id' => 'guid',
        'is_main_building' => null,
        'maintenance_inside' => null,
        'maintenance_outside' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bedroom_number' => 'bedroomNumber',
        'building_layer_number' => 'buildingLayerNumber',
        'content' => 'content',
        'garage' => 'garage',
        'garden' => 'garden',
        'house_type' => 'houseType',
        'parcel_surface' => 'parcelSurface',
        'room_number' => 'roomNumber',
        'situated_type' => 'situatedType',
        'use_surface' => 'useSurface',
        'year_of_construction' => 'yearOfConstruction',
        'linked_assignment' => 'linkedAssignment',
        'object_assignment_id' => 'objectAssignmentId',
        'is_main_building' => 'isMainBuilding',
        'maintenance_inside' => 'maintenanceInside',
        'maintenance_outside' => 'maintenanceOutside'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bedroom_number' => 'setBedroomNumber',
        'building_layer_number' => 'setBuildingLayerNumber',
        'content' => 'setContent',
        'garage' => 'setGarage',
        'garden' => 'setGarden',
        'house_type' => 'setHouseType',
        'parcel_surface' => 'setParcelSurface',
        'room_number' => 'setRoomNumber',
        'situated_type' => 'setSituatedType',
        'use_surface' => 'setUseSurface',
        'year_of_construction' => 'setYearOfConstruction',
        'linked_assignment' => 'setLinkedAssignment',
        'object_assignment_id' => 'setObjectAssignmentId',
        'is_main_building' => 'setIsMainBuilding',
        'maintenance_inside' => 'setMaintenanceInside',
        'maintenance_outside' => 'setMaintenanceOutside'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bedroom_number' => 'getBedroomNumber',
        'building_layer_number' => 'getBuildingLayerNumber',
        'content' => 'getContent',
        'garage' => 'getGarage',
        'garden' => 'getGarden',
        'house_type' => 'getHouseType',
        'parcel_surface' => 'getParcelSurface',
        'room_number' => 'getRoomNumber',
        'situated_type' => 'getSituatedType',
        'use_surface' => 'getUseSurface',
        'year_of_construction' => 'getYearOfConstruction',
        'linked_assignment' => 'getLinkedAssignment',
        'object_assignment_id' => 'getObjectAssignmentId',
        'is_main_building' => 'getIsMainBuilding',
        'maintenance_inside' => 'getMaintenanceInside',
        'maintenance_outside' => 'getMaintenanceOutside'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['bedroom_number'] = isset($data['bedroom_number']) ? $data['bedroom_number'] : null;
        $this->container['building_layer_number'] = isset($data['building_layer_number']) ? $data['building_layer_number'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['garage'] = isset($data['garage']) ? $data['garage'] : null;
        $this->container['garden'] = isset($data['garden']) ? $data['garden'] : null;
        $this->container['house_type'] = isset($data['house_type']) ? $data['house_type'] : null;
        $this->container['parcel_surface'] = isset($data['parcel_surface']) ? $data['parcel_surface'] : null;
        $this->container['room_number'] = isset($data['room_number']) ? $data['room_number'] : null;
        $this->container['situated_type'] = isset($data['situated_type']) ? $data['situated_type'] : null;
        $this->container['use_surface'] = isset($data['use_surface']) ? $data['use_surface'] : null;
        $this->container['year_of_construction'] = isset($data['year_of_construction']) ? $data['year_of_construction'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['object_assignment_id'] = isset($data['object_assignment_id']) ? $data['object_assignment_id'] : null;
        $this->container['is_main_building'] = isset($data['is_main_building']) ? $data['is_main_building'] : null;
        $this->container['maintenance_inside'] = isset($data['maintenance_inside']) ? $data['maintenance_inside'] : null;
        $this->container['maintenance_outside'] = isset($data['maintenance_outside']) ? $data['maintenance_outside'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['object_assignment_id']) && (mb_strlen($this->container['object_assignment_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'object_assignment_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bedroom_number
     *
     * @return int
     */
    public function getBedroomNumber()
    {
        return $this->container['bedroom_number'];
    }

    /**
     * Sets bedroom_number
     *
     * @param int $bedroom_number bedroom_number
     *
     * @return $this
     */
    public function setBedroomNumber($bedroom_number)
    {
        $this->container['bedroom_number'] = $bedroom_number;

        return $this;
    }

    /**
     * Gets building_layer_number
     *
     * @return int
     */
    public function getBuildingLayerNumber()
    {
        return $this->container['building_layer_number'];
    }

    /**
     * Sets building_layer_number
     *
     * @param int $building_layer_number building_layer_number
     *
     * @return $this
     */
    public function setBuildingLayerNumber($building_layer_number)
    {
        $this->container['building_layer_number'] = $building_layer_number;

        return $this;
    }

    /**
     * Gets content
     *
     * @return \Swagger\Client\Model\Size
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param \Swagger\Client\Model\Size $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets garage
     *
     * @return \Swagger\Client\Model\Garage
     */
    public function getGarage()
    {
        return $this->container['garage'];
    }

    /**
     * Sets garage
     *
     * @param \Swagger\Client\Model\Garage $garage garage
     *
     * @return $this
     */
    public function setGarage($garage)
    {
        $this->container['garage'] = $garage;

        return $this;
    }

    /**
     * Gets garden
     *
     * @return \Swagger\Client\Model\Garden
     */
    public function getGarden()
    {
        return $this->container['garden'];
    }

    /**
     * Sets garden
     *
     * @param \Swagger\Client\Model\Garden $garden garden
     *
     * @return $this
     */
    public function setGarden($garden)
    {
        $this->container['garden'] = $garden;

        return $this;
    }

    /**
     * Gets house_type
     *
     * @return \Swagger\Client\Model\HouseType
     */
    public function getHouseType()
    {
        return $this->container['house_type'];
    }

    /**
     * Sets house_type
     *
     * @param \Swagger\Client\Model\HouseType $house_type house_type
     *
     * @return $this
     */
    public function setHouseType($house_type)
    {
        $this->container['house_type'] = $house_type;

        return $this;
    }

    /**
     * Gets parcel_surface
     *
     * @return \Swagger\Client\Model\Size
     */
    public function getParcelSurface()
    {
        return $this->container['parcel_surface'];
    }

    /**
     * Sets parcel_surface
     *
     * @param \Swagger\Client\Model\Size $parcel_surface parcel_surface
     *
     * @return $this
     */
    public function setParcelSurface($parcel_surface)
    {
        $this->container['parcel_surface'] = $parcel_surface;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return int
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param int $room_number room_number
     *
     * @return $this
     */
    public function setRoomNumber($room_number)
    {
        $this->container['room_number'] = $room_number;

        return $this;
    }

    /**
     * Gets situated_type
     *
     * @return \Swagger\Client\Model\SituatedType
     */
    public function getSituatedType()
    {
        return $this->container['situated_type'];
    }

    /**
     * Sets situated_type
     *
     * @param \Swagger\Client\Model\SituatedType $situated_type situated_type
     *
     * @return $this
     */
    public function setSituatedType($situated_type)
    {
        $this->container['situated_type'] = $situated_type;

        return $this;
    }

    /**
     * Gets use_surface
     *
     * @return \Swagger\Client\Model\Size
     */
    public function getUseSurface()
    {
        return $this->container['use_surface'];
    }

    /**
     * Sets use_surface
     *
     * @param \Swagger\Client\Model\Size $use_surface use_surface
     *
     * @return $this
     */
    public function setUseSurface($use_surface)
    {
        $this->container['use_surface'] = $use_surface;

        return $this;
    }

    /**
     * Gets year_of_construction
     *
     * @return \Swagger\Client\Model\YearOfConstruction
     */
    public function getYearOfConstruction()
    {
        return $this->container['year_of_construction'];
    }

    /**
     * Sets year_of_construction
     *
     * @param \Swagger\Client\Model\YearOfConstruction $year_of_construction year_of_construction
     *
     * @return $this
     */
    public function setYearOfConstruction($year_of_construction)
    {
        $this->container['year_of_construction'] = $year_of_construction;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets object_assignment_id
     *
     * @return string
     */
    public function getObjectAssignmentId()
    {
        return $this->container['object_assignment_id'];
    }

    /**
     * Sets object_assignment_id
     *
     * @param string $object_assignment_id object_assignment_id
     *
     * @return $this
     */
    public function setObjectAssignmentId($object_assignment_id)
    {

        if (!is_null($object_assignment_id) && (mb_strlen($object_assignment_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $object_assignment_id when calling CompanyListing., must be bigger than or equal to 1.');
        }

        $this->container['object_assignment_id'] = $object_assignment_id;

        return $this;
    }

    /**
     * Gets is_main_building
     *
     * @return bool
     */
    public function getIsMainBuilding()
    {
        return $this->container['is_main_building'];
    }

    /**
     * Sets is_main_building
     *
     * @param bool $is_main_building is_main_building
     *
     * @return $this
     */
    public function setIsMainBuilding($is_main_building)
    {
        $this->container['is_main_building'] = $is_main_building;

        return $this;
    }

    /**
     * Gets maintenance_inside
     *
     * @return \Swagger\Client\Model\Maintenance
     */
    public function getMaintenanceInside()
    {
        return $this->container['maintenance_inside'];
    }

    /**
     * Sets maintenance_inside
     *
     * @param \Swagger\Client\Model\Maintenance $maintenance_inside maintenance_inside
     *
     * @return $this
     */
    public function setMaintenanceInside($maintenance_inside)
    {
        $this->container['maintenance_inside'] = $maintenance_inside;

        return $this;
    }

    /**
     * Gets maintenance_outside
     *
     * @return \Swagger\Client\Model\Maintenance
     */
    public function getMaintenanceOutside()
    {
        return $this->container['maintenance_outside'];
    }

    /**
     * Sets maintenance_outside
     *
     * @param \Swagger\Client\Model\Maintenance $maintenance_outside maintenance_outside
     *
     * @return $this
     */
    public function setMaintenanceOutside($maintenance_outside)
    {
        $this->container['maintenance_outside'] = $maintenance_outside;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


