<?php
/**
 * GlobalSearchSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GlobalSearchSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobalSearchSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GlobalSearchSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'filter_by_active' => '\Swagger\Client\Model\SearchRequestFilterByActive',
        'filter_by_relation_types' => '\Swagger\Client\Model\RelationType[]',
        'filter_by_assignment_types' => '\Swagger\Client\Model\AssignmentType[]',
        'filter_by_real_estate_groups' => '\Swagger\Client\Model\RealEstateGroup[]',
        'filter_by_types' => '\Swagger\Client\Model\GlobalSearchType[]',
        'take_per_type' => 'int',
        'term' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'filter_by_active' => null,
        'filter_by_relation_types' => null,
        'filter_by_assignment_types' => null,
        'filter_by_real_estate_groups' => null,
        'filter_by_types' => null,
        'take_per_type' => 'int32',
        'term' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filter_by_active' => 'filterByActive',
        'filter_by_relation_types' => 'filterByRelationTypes',
        'filter_by_assignment_types' => 'filterByAssignmentTypes',
        'filter_by_real_estate_groups' => 'filterByRealEstateGroups',
        'filter_by_types' => 'filterByTypes',
        'take_per_type' => 'takePerType',
        'term' => 'term'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filter_by_active' => 'setFilterByActive',
        'filter_by_relation_types' => 'setFilterByRelationTypes',
        'filter_by_assignment_types' => 'setFilterByAssignmentTypes',
        'filter_by_real_estate_groups' => 'setFilterByRealEstateGroups',
        'filter_by_types' => 'setFilterByTypes',
        'take_per_type' => 'setTakePerType',
        'term' => 'setTerm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filter_by_active' => 'getFilterByActive',
        'filter_by_relation_types' => 'getFilterByRelationTypes',
        'filter_by_assignment_types' => 'getFilterByAssignmentTypes',
        'filter_by_real_estate_groups' => 'getFilterByRealEstateGroups',
        'filter_by_types' => 'getFilterByTypes',
        'take_per_type' => 'getTakePerType',
        'term' => 'getTerm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['filter_by_active'] = isset($data['filter_by_active']) ? $data['filter_by_active'] : null;
        $this->container['filter_by_relation_types'] = isset($data['filter_by_relation_types']) ? $data['filter_by_relation_types'] : null;
        $this->container['filter_by_assignment_types'] = isset($data['filter_by_assignment_types']) ? $data['filter_by_assignment_types'] : null;
        $this->container['filter_by_real_estate_groups'] = isset($data['filter_by_real_estate_groups']) ? $data['filter_by_real_estate_groups'] : null;
        $this->container['filter_by_types'] = isset($data['filter_by_types']) ? $data['filter_by_types'] : null;
        $this->container['take_per_type'] = isset($data['take_per_type']) ? $data['take_per_type'] : null;
        $this->container['term'] = isset($data['term']) ? $data['term'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['filter_by_active'] === null) {
            $invalidProperties[] = "'filter_by_active' can't be null";
        }
        if ($this->container['take_per_type'] === null) {
            $invalidProperties[] = "'take_per_type' can't be null";
        }
        if (($this->container['take_per_type'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'take_per_type', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['take_per_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'take_per_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['term']) && (mb_strlen($this->container['term']) > 50)) {
            $invalidProperties[] = "invalid value for 'term', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['term']) && (mb_strlen($this->container['term']) < 0)) {
            $invalidProperties[] = "invalid value for 'term', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filter_by_active
     *
     * @return \Swagger\Client\Model\SearchRequestFilterByActive
     */
    public function getFilterByActive()
    {
        return $this->container['filter_by_active'];
    }

    /**
     * Sets filter_by_active
     *
     * @param \Swagger\Client\Model\SearchRequestFilterByActive $filter_by_active filter_by_active
     *
     * @return $this
     */
    public function setFilterByActive($filter_by_active)
    {
        $this->container['filter_by_active'] = $filter_by_active;

        return $this;
    }

    /**
     * Gets filter_by_relation_types
     *
     * @return \Swagger\Client\Model\RelationType[]
     */
    public function getFilterByRelationTypes()
    {
        return $this->container['filter_by_relation_types'];
    }

    /**
     * Sets filter_by_relation_types
     *
     * @param \Swagger\Client\Model\RelationType[] $filter_by_relation_types Filter by selected relation types.
     *
     * @return $this
     */
    public function setFilterByRelationTypes($filter_by_relation_types)
    {
        $this->container['filter_by_relation_types'] = $filter_by_relation_types;

        return $this;
    }

    /**
     * Gets filter_by_assignment_types
     *
     * @return \Swagger\Client\Model\AssignmentType[]
     */
    public function getFilterByAssignmentTypes()
    {
        return $this->container['filter_by_assignment_types'];
    }

    /**
     * Sets filter_by_assignment_types
     *
     * @param \Swagger\Client\Model\AssignmentType[] $filter_by_assignment_types Filter by selected assignment types.
     *
     * @return $this
     */
    public function setFilterByAssignmentTypes($filter_by_assignment_types)
    {
        $this->container['filter_by_assignment_types'] = $filter_by_assignment_types;

        return $this;
    }

    /**
     * Gets filter_by_real_estate_groups
     *
     * @return \Swagger\Client\Model\RealEstateGroup[]
     */
    public function getFilterByRealEstateGroups()
    {
        return $this->container['filter_by_real_estate_groups'];
    }

    /**
     * Sets filter_by_real_estate_groups
     *
     * @param \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...).
     *
     * @return $this
     */
    public function setFilterByRealEstateGroups($filter_by_real_estate_groups)
    {
        $this->container['filter_by_real_estate_groups'] = $filter_by_real_estate_groups;

        return $this;
    }

    /**
     * Gets filter_by_types
     *
     * @return \Swagger\Client\Model\GlobalSearchType[]
     */
    public function getFilterByTypes()
    {
        return $this->container['filter_by_types'];
    }

    /**
     * Sets filter_by_types
     *
     * @param \Swagger\Client\Model\GlobalSearchType[] $filter_by_types Filter by types.
     *
     * @return $this
     */
    public function setFilterByTypes($filter_by_types)
    {
        $this->container['filter_by_types'] = $filter_by_types;

        return $this;
    }

    /**
     * Gets take_per_type
     *
     * @return int
     */
    public function getTakePerType()
    {
        return $this->container['take_per_type'];
    }

    /**
     * Sets take_per_type
     *
     * @param int $take_per_type Number of results to return per type.
     *
     * @return $this
     */
    public function setTakePerType($take_per_type)
    {

        if (($take_per_type > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $take_per_type when calling GlobalSearchSearchRequest., must be smaller than or equal to 2147483647.');
        }
        if (($take_per_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $take_per_type when calling GlobalSearchSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['take_per_type'] = $take_per_type;

        return $this;
    }

    /**
     * Gets term
     *
     * @return string
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param string $term Search by given text term.
     *
     * @return $this
     */
    public function setTerm($term)
    {
        if (!is_null($term) && (mb_strlen($term) > 50)) {
            throw new \InvalidArgumentException('invalid length for $term when calling GlobalSearchSearchRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($term) && (mb_strlen($term) < 0)) {
            throw new \InvalidArgumentException('invalid length for $term when calling GlobalSearchSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['term'] = $term;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


