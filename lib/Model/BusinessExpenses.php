<?php
/**
 * BusinessExpenses
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BusinessExpenses Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessExpenses implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BusinessExpenses';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'land_consolidation_rent' => 'float',
        'o_zb_business_share' => 'float',
        'o_zb_occupiers_share' => 'float',
        'sewerage_charges' => 'float',
        'water_authority_charges' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'land_consolidation_rent' => 'decimal',
        'o_zb_business_share' => 'decimal',
        'o_zb_occupiers_share' => 'decimal',
        'sewerage_charges' => 'decimal',
        'water_authority_charges' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'land_consolidation_rent' => 'landConsolidationRent',
        'o_zb_business_share' => 'oZBBusinessShare',
        'o_zb_occupiers_share' => 'oZBOccupiersShare',
        'sewerage_charges' => 'sewerageCharges',
        'water_authority_charges' => 'waterAuthorityCharges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'land_consolidation_rent' => 'setLandConsolidationRent',
        'o_zb_business_share' => 'setOZbBusinessShare',
        'o_zb_occupiers_share' => 'setOZbOccupiersShare',
        'sewerage_charges' => 'setSewerageCharges',
        'water_authority_charges' => 'setWaterAuthorityCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'land_consolidation_rent' => 'getLandConsolidationRent',
        'o_zb_business_share' => 'getOZbBusinessShare',
        'o_zb_occupiers_share' => 'getOZbOccupiersShare',
        'sewerage_charges' => 'getSewerageCharges',
        'water_authority_charges' => 'getWaterAuthorityCharges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['land_consolidation_rent'] = isset($data['land_consolidation_rent']) ? $data['land_consolidation_rent'] : null;
        $this->container['o_zb_business_share'] = isset($data['o_zb_business_share']) ? $data['o_zb_business_share'] : null;
        $this->container['o_zb_occupiers_share'] = isset($data['o_zb_occupiers_share']) ? $data['o_zb_occupiers_share'] : null;
        $this->container['sewerage_charges'] = isset($data['sewerage_charges']) ? $data['sewerage_charges'] : null;
        $this->container['water_authority_charges'] = isset($data['water_authority_charges']) ? $data['water_authority_charges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets land_consolidation_rent
     *
     * @return float
     */
    public function getLandConsolidationRent()
    {
        return $this->container['land_consolidation_rent'];
    }

    /**
     * Sets land_consolidation_rent
     *
     * @param float $land_consolidation_rent land_consolidation_rent
     *
     * @return $this
     */
    public function setLandConsolidationRent($land_consolidation_rent)
    {
        $this->container['land_consolidation_rent'] = $land_consolidation_rent;

        return $this;
    }

    /**
     * Gets o_zb_business_share
     *
     * @return float
     */
    public function getOZbBusinessShare()
    {
        return $this->container['o_zb_business_share'];
    }

    /**
     * Sets o_zb_business_share
     *
     * @param float $o_zb_business_share o_zb_business_share
     *
     * @return $this
     */
    public function setOZbBusinessShare($o_zb_business_share)
    {
        $this->container['o_zb_business_share'] = $o_zb_business_share;

        return $this;
    }

    /**
     * Gets o_zb_occupiers_share
     *
     * @return float
     */
    public function getOZbOccupiersShare()
    {
        return $this->container['o_zb_occupiers_share'];
    }

    /**
     * Sets o_zb_occupiers_share
     *
     * @param float $o_zb_occupiers_share o_zb_occupiers_share
     *
     * @return $this
     */
    public function setOZbOccupiersShare($o_zb_occupiers_share)
    {
        $this->container['o_zb_occupiers_share'] = $o_zb_occupiers_share;

        return $this;
    }

    /**
     * Gets sewerage_charges
     *
     * @return float
     */
    public function getSewerageCharges()
    {
        return $this->container['sewerage_charges'];
    }

    /**
     * Sets sewerage_charges
     *
     * @param float $sewerage_charges sewerage_charges
     *
     * @return $this
     */
    public function setSewerageCharges($sewerage_charges)
    {
        $this->container['sewerage_charges'] = $sewerage_charges;

        return $this;
    }

    /**
     * Gets water_authority_charges
     *
     * @return float
     */
    public function getWaterAuthorityCharges()
    {
        return $this->container['water_authority_charges'];
    }

    /**
     * Sets water_authority_charges
     *
     * @param float $water_authority_charges water_authority_charges
     *
     * @return $this
     */
    public function setWaterAuthorityCharges($water_authority_charges)
    {
        $this->container['water_authority_charges'] = $water_authority_charges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


