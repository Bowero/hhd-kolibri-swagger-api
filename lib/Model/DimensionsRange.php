<?php
/**
 * DimensionsRange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DimensionsRange Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DimensionsRange implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DimensionsRange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_area' => 'float',
        'max_height' => 'float',
        'max_length' => 'float',
        'max_volume' => 'float',
        'max_width' => 'float',
        'min_area' => 'float',
        'min_height' => 'float',
        'min_length' => 'float',
        'min_volume' => 'float',
        'min_width' => 'float',
        'unit_of_measurement' => '\Swagger\Client\Model\UnitOfMeasurement',
        'unit_of_volume' => '\Swagger\Client\Model\UnitOfVolume'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_area' => 'decimal',
        'max_height' => 'decimal',
        'max_length' => 'decimal',
        'max_volume' => 'decimal',
        'max_width' => 'decimal',
        'min_area' => 'decimal',
        'min_height' => 'decimal',
        'min_length' => 'decimal',
        'min_volume' => 'decimal',
        'min_width' => 'decimal',
        'unit_of_measurement' => null,
        'unit_of_volume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_area' => 'maxArea',
        'max_height' => 'maxHeight',
        'max_length' => 'maxLength',
        'max_volume' => 'maxVolume',
        'max_width' => 'maxWidth',
        'min_area' => 'minArea',
        'min_height' => 'minHeight',
        'min_length' => 'minLength',
        'min_volume' => 'minVolume',
        'min_width' => 'minWidth',
        'unit_of_measurement' => 'unitOfMeasurement',
        'unit_of_volume' => 'unitOfVolume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_area' => 'setMaxArea',
        'max_height' => 'setMaxHeight',
        'max_length' => 'setMaxLength',
        'max_volume' => 'setMaxVolume',
        'max_width' => 'setMaxWidth',
        'min_area' => 'setMinArea',
        'min_height' => 'setMinHeight',
        'min_length' => 'setMinLength',
        'min_volume' => 'setMinVolume',
        'min_width' => 'setMinWidth',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'unit_of_volume' => 'setUnitOfVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_area' => 'getMaxArea',
        'max_height' => 'getMaxHeight',
        'max_length' => 'getMaxLength',
        'max_volume' => 'getMaxVolume',
        'max_width' => 'getMaxWidth',
        'min_area' => 'getMinArea',
        'min_height' => 'getMinHeight',
        'min_length' => 'getMinLength',
        'min_volume' => 'getMinVolume',
        'min_width' => 'getMinWidth',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'unit_of_volume' => 'getUnitOfVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_area'] = isset($data['max_area']) ? $data['max_area'] : null;
        $this->container['max_height'] = isset($data['max_height']) ? $data['max_height'] : null;
        $this->container['max_length'] = isset($data['max_length']) ? $data['max_length'] : null;
        $this->container['max_volume'] = isset($data['max_volume']) ? $data['max_volume'] : null;
        $this->container['max_width'] = isset($data['max_width']) ? $data['max_width'] : null;
        $this->container['min_area'] = isset($data['min_area']) ? $data['min_area'] : null;
        $this->container['min_height'] = isset($data['min_height']) ? $data['min_height'] : null;
        $this->container['min_length'] = isset($data['min_length']) ? $data['min_length'] : null;
        $this->container['min_volume'] = isset($data['min_volume']) ? $data['min_volume'] : null;
        $this->container['min_width'] = isset($data['min_width']) ? $data['min_width'] : null;
        $this->container['unit_of_measurement'] = isset($data['unit_of_measurement']) ? $data['unit_of_measurement'] : null;
        $this->container['unit_of_volume'] = isset($data['unit_of_volume']) ? $data['unit_of_volume'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_area
     *
     * @return float
     */
    public function getMaxArea()
    {
        return $this->container['max_area'];
    }

    /**
     * Sets max_area
     *
     * @param float $max_area max_area
     *
     * @return $this
     */
    public function setMaxArea($max_area)
    {
        $this->container['max_area'] = $max_area;

        return $this;
    }

    /**
     * Gets max_height
     *
     * @return float
     */
    public function getMaxHeight()
    {
        return $this->container['max_height'];
    }

    /**
     * Sets max_height
     *
     * @param float $max_height max_height
     *
     * @return $this
     */
    public function setMaxHeight($max_height)
    {
        $this->container['max_height'] = $max_height;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return float
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param float $max_length max_length
     *
     * @return $this
     */
    public function setMaxLength($max_length)
    {
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets max_volume
     *
     * @return float
     */
    public function getMaxVolume()
    {
        return $this->container['max_volume'];
    }

    /**
     * Sets max_volume
     *
     * @param float $max_volume max_volume
     *
     * @return $this
     */
    public function setMaxVolume($max_volume)
    {
        $this->container['max_volume'] = $max_volume;

        return $this;
    }

    /**
     * Gets max_width
     *
     * @return float
     */
    public function getMaxWidth()
    {
        return $this->container['max_width'];
    }

    /**
     * Sets max_width
     *
     * @param float $max_width max_width
     *
     * @return $this
     */
    public function setMaxWidth($max_width)
    {
        $this->container['max_width'] = $max_width;

        return $this;
    }

    /**
     * Gets min_area
     *
     * @return float
     */
    public function getMinArea()
    {
        return $this->container['min_area'];
    }

    /**
     * Sets min_area
     *
     * @param float $min_area min_area
     *
     * @return $this
     */
    public function setMinArea($min_area)
    {
        $this->container['min_area'] = $min_area;

        return $this;
    }

    /**
     * Gets min_height
     *
     * @return float
     */
    public function getMinHeight()
    {
        return $this->container['min_height'];
    }

    /**
     * Sets min_height
     *
     * @param float $min_height min_height
     *
     * @return $this
     */
    public function setMinHeight($min_height)
    {
        $this->container['min_height'] = $min_height;

        return $this;
    }

    /**
     * Gets min_length
     *
     * @return float
     */
    public function getMinLength()
    {
        return $this->container['min_length'];
    }

    /**
     * Sets min_length
     *
     * @param float $min_length min_length
     *
     * @return $this
     */
    public function setMinLength($min_length)
    {
        $this->container['min_length'] = $min_length;

        return $this;
    }

    /**
     * Gets min_volume
     *
     * @return float
     */
    public function getMinVolume()
    {
        return $this->container['min_volume'];
    }

    /**
     * Sets min_volume
     *
     * @param float $min_volume min_volume
     *
     * @return $this
     */
    public function setMinVolume($min_volume)
    {
        $this->container['min_volume'] = $min_volume;

        return $this;
    }

    /**
     * Gets min_width
     *
     * @return float
     */
    public function getMinWidth()
    {
        return $this->container['min_width'];
    }

    /**
     * Sets min_width
     *
     * @param float $min_width min_width
     *
     * @return $this
     */
    public function setMinWidth($min_width)
    {
        $this->container['min_width'] = $min_width;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return \Swagger\Client\Model\UnitOfMeasurement
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param \Swagger\Client\Model\UnitOfMeasurement $unit_of_measurement unit_of_measurement
     *
     * @return $this
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets unit_of_volume
     *
     * @return \Swagger\Client\Model\UnitOfVolume
     */
    public function getUnitOfVolume()
    {
        return $this->container['unit_of_volume'];
    }

    /**
     * Sets unit_of_volume
     *
     * @param \Swagger\Client\Model\UnitOfVolume $unit_of_volume unit_of_volume
     *
     * @return $this
     */
    public function setUnitOfVolume($unit_of_volume)
    {
        $this->container['unit_of_volume'] = $unit_of_volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


