<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_number_broker' => 'string',
        'tax_number_customer' => 'string',
        'currency' => 'string',
        'customer_address' => '\Swagger\Client\Model\Address',
        'customer_name' => 'string',
        'debtor_number_format_pre' => 'string',
        'debtor_number' => 'string',
        'debtor_number_format_post' => 'string',
        'due_date' => '\DateTime',
        'due_date_text' => 'string',
        'financial_administration_export_batch_id' => 'string',
        'financial_administration_id' => 'string',
        'invoice_date' => '\DateTime',
        'display_name' => 'string',
        'invoice_type' => '\Swagger\Client\Model\InvoiceType',
        'kvk_number' => 'string',
        'lines' => '\Swagger\Client\Model\InvoiceLine[]',
        'products_to_pass_on' => '\Swagger\Client\Model\ProductOrder[]',
        'purpose' => 'string',
        'reference' => 'string',
        'remarks' => 'string',
        'status' => '\Swagger\Client\Model\InvoiceStatus',
        'tav_customer' => 'string',
        'total_price_gross' => 'float',
        'total_price_net' => 'float',
        'total_tax' => 'float',
        'is_overdue' => 'bool',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'linked_relation' => '\Swagger\Client\Model\LinkedRelation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_number_broker' => null,
        'tax_number_customer' => null,
        'currency' => null,
        'customer_address' => null,
        'customer_name' => null,
        'debtor_number_format_pre' => null,
        'debtor_number' => null,
        'debtor_number_format_post' => null,
        'due_date' => 'date-time',
        'due_date_text' => null,
        'financial_administration_export_batch_id' => 'guid',
        'financial_administration_id' => 'guid',
        'invoice_date' => 'date-time',
        'display_name' => null,
        'invoice_type' => null,
        'kvk_number' => null,
        'lines' => null,
        'products_to_pass_on' => null,
        'purpose' => null,
        'reference' => null,
        'remarks' => null,
        'status' => null,
        'tav_customer' => null,
        'total_price_gross' => 'decimal',
        'total_price_net' => 'decimal',
        'total_tax' => 'decimal',
        'is_overdue' => null,
        'linked_assignment' => null,
        'linked_relation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_number_broker' => 'taxNumberBroker',
        'tax_number_customer' => 'taxNumberCustomer',
        'currency' => 'currency',
        'customer_address' => 'customerAddress',
        'customer_name' => 'customerName',
        'debtor_number_format_pre' => 'debtorNumberFormatPre',
        'debtor_number' => 'debtorNumber',
        'debtor_number_format_post' => 'debtorNumberFormatPost',
        'due_date' => 'dueDate',
        'due_date_text' => 'dueDateText',
        'financial_administration_export_batch_id' => 'financialAdministrationExportBatchID',
        'financial_administration_id' => 'financialAdministrationID',
        'invoice_date' => 'invoiceDate',
        'display_name' => 'displayName',
        'invoice_type' => 'invoiceType',
        'kvk_number' => 'kvkNumber',
        'lines' => 'lines',
        'products_to_pass_on' => 'productsToPassOn',
        'purpose' => 'purpose',
        'reference' => 'reference',
        'remarks' => 'remarks',
        'status' => 'status',
        'tav_customer' => 'tavCustomer',
        'total_price_gross' => 'totalPriceGross',
        'total_price_net' => 'totalPriceNet',
        'total_tax' => 'totalTax',
        'is_overdue' => 'isOverdue',
        'linked_assignment' => 'linkedAssignment',
        'linked_relation' => 'linkedRelation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_number_broker' => 'setTaxNumberBroker',
        'tax_number_customer' => 'setTaxNumberCustomer',
        'currency' => 'setCurrency',
        'customer_address' => 'setCustomerAddress',
        'customer_name' => 'setCustomerName',
        'debtor_number_format_pre' => 'setDebtorNumberFormatPre',
        'debtor_number' => 'setDebtorNumber',
        'debtor_number_format_post' => 'setDebtorNumberFormatPost',
        'due_date' => 'setDueDate',
        'due_date_text' => 'setDueDateText',
        'financial_administration_export_batch_id' => 'setFinancialAdministrationExportBatchId',
        'financial_administration_id' => 'setFinancialAdministrationId',
        'invoice_date' => 'setInvoiceDate',
        'display_name' => 'setDisplayName',
        'invoice_type' => 'setInvoiceType',
        'kvk_number' => 'setKvkNumber',
        'lines' => 'setLines',
        'products_to_pass_on' => 'setProductsToPassOn',
        'purpose' => 'setPurpose',
        'reference' => 'setReference',
        'remarks' => 'setRemarks',
        'status' => 'setStatus',
        'tav_customer' => 'setTavCustomer',
        'total_price_gross' => 'setTotalPriceGross',
        'total_price_net' => 'setTotalPriceNet',
        'total_tax' => 'setTotalTax',
        'is_overdue' => 'setIsOverdue',
        'linked_assignment' => 'setLinkedAssignment',
        'linked_relation' => 'setLinkedRelation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_number_broker' => 'getTaxNumberBroker',
        'tax_number_customer' => 'getTaxNumberCustomer',
        'currency' => 'getCurrency',
        'customer_address' => 'getCustomerAddress',
        'customer_name' => 'getCustomerName',
        'debtor_number_format_pre' => 'getDebtorNumberFormatPre',
        'debtor_number' => 'getDebtorNumber',
        'debtor_number_format_post' => 'getDebtorNumberFormatPost',
        'due_date' => 'getDueDate',
        'due_date_text' => 'getDueDateText',
        'financial_administration_export_batch_id' => 'getFinancialAdministrationExportBatchId',
        'financial_administration_id' => 'getFinancialAdministrationId',
        'invoice_date' => 'getInvoiceDate',
        'display_name' => 'getDisplayName',
        'invoice_type' => 'getInvoiceType',
        'kvk_number' => 'getKvkNumber',
        'lines' => 'getLines',
        'products_to_pass_on' => 'getProductsToPassOn',
        'purpose' => 'getPurpose',
        'reference' => 'getReference',
        'remarks' => 'getRemarks',
        'status' => 'getStatus',
        'tav_customer' => 'getTavCustomer',
        'total_price_gross' => 'getTotalPriceGross',
        'total_price_net' => 'getTotalPriceNet',
        'total_tax' => 'getTotalTax',
        'is_overdue' => 'getIsOverdue',
        'linked_assignment' => 'getLinkedAssignment',
        'linked_relation' => 'getLinkedRelation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['tax_number_broker'] = isset($data['tax_number_broker']) ? $data['tax_number_broker'] : null;
        $this->container['tax_number_customer'] = isset($data['tax_number_customer']) ? $data['tax_number_customer'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['customer_address'] = isset($data['customer_address']) ? $data['customer_address'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['debtor_number_format_pre'] = isset($data['debtor_number_format_pre']) ? $data['debtor_number_format_pre'] : null;
        $this->container['debtor_number'] = isset($data['debtor_number']) ? $data['debtor_number'] : null;
        $this->container['debtor_number_format_post'] = isset($data['debtor_number_format_post']) ? $data['debtor_number_format_post'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['due_date_text'] = isset($data['due_date_text']) ? $data['due_date_text'] : null;
        $this->container['financial_administration_export_batch_id'] = isset($data['financial_administration_export_batch_id']) ? $data['financial_administration_export_batch_id'] : null;
        $this->container['financial_administration_id'] = isset($data['financial_administration_id']) ? $data['financial_administration_id'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['kvk_number'] = isset($data['kvk_number']) ? $data['kvk_number'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['products_to_pass_on'] = isset($data['products_to_pass_on']) ? $data['products_to_pass_on'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tav_customer'] = isset($data['tav_customer']) ? $data['tav_customer'] : null;
        $this->container['total_price_gross'] = isset($data['total_price_gross']) ? $data['total_price_gross'] : null;
        $this->container['total_price_net'] = isset($data['total_price_net']) ? $data['total_price_net'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['is_overdue'] = isset($data['is_overdue']) ? $data['is_overdue'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['linked_relation'] = isset($data['linked_relation']) ? $data['linked_relation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['due_date_text']) && (mb_strlen($this->container['due_date_text']) > 1024)) {
            $invalidProperties[] = "invalid value for 'due_date_text', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['due_date_text']) && (mb_strlen($this->container['due_date_text']) < 0)) {
            $invalidProperties[] = "invalid value for 'due_date_text', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_number_broker
     *
     * @return string
     */
    public function getTaxNumberBroker()
    {
        return $this->container['tax_number_broker'];
    }

    /**
     * Sets tax_number_broker
     *
     * @param string $tax_number_broker tax_number_broker
     *
     * @return $this
     */
    public function setTaxNumberBroker($tax_number_broker)
    {
        $this->container['tax_number_broker'] = $tax_number_broker;

        return $this;
    }

    /**
     * Gets tax_number_customer
     *
     * @return string
     */
    public function getTaxNumberCustomer()
    {
        return $this->container['tax_number_customer'];
    }

    /**
     * Sets tax_number_customer
     *
     * @param string $tax_number_customer tax_number_customer
     *
     * @return $this
     */
    public function setTaxNumberCustomer($tax_number_customer)
    {
        $this->container['tax_number_customer'] = $tax_number_customer;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getCustomerAddress()
    {
        return $this->container['customer_address'];
    }

    /**
     * Sets customer_address
     *
     * @param \Swagger\Client\Model\Address $customer_address customer_address
     *
     * @return $this
     */
    public function setCustomerAddress($customer_address)
    {
        $this->container['customer_address'] = $customer_address;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets debtor_number_format_pre
     *
     * @return string
     */
    public function getDebtorNumberFormatPre()
    {
        return $this->container['debtor_number_format_pre'];
    }

    /**
     * Sets debtor_number_format_pre
     *
     * @param string $debtor_number_format_pre debtor_number_format_pre
     *
     * @return $this
     */
    public function setDebtorNumberFormatPre($debtor_number_format_pre)
    {
        $this->container['debtor_number_format_pre'] = $debtor_number_format_pre;

        return $this;
    }

    /**
     * Gets debtor_number
     *
     * @return string
     */
    public function getDebtorNumber()
    {
        return $this->container['debtor_number'];
    }

    /**
     * Sets debtor_number
     *
     * @param string $debtor_number debtor_number
     *
     * @return $this
     */
    public function setDebtorNumber($debtor_number)
    {
        $this->container['debtor_number'] = $debtor_number;

        return $this;
    }

    /**
     * Gets debtor_number_format_post
     *
     * @return string
     */
    public function getDebtorNumberFormatPost()
    {
        return $this->container['debtor_number_format_post'];
    }

    /**
     * Sets debtor_number_format_post
     *
     * @param string $debtor_number_format_post debtor_number_format_post
     *
     * @return $this
     */
    public function setDebtorNumberFormatPost($debtor_number_format_post)
    {
        $this->container['debtor_number_format_post'] = $debtor_number_format_post;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets due_date_text
     *
     * @return string
     */
    public function getDueDateText()
    {
        return $this->container['due_date_text'];
    }

    /**
     * Sets due_date_text
     *
     * @param string $due_date_text due_date_text
     *
     * @return $this
     */
    public function setDueDateText($due_date_text)
    {
        if (!is_null($due_date_text) && (mb_strlen($due_date_text) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $due_date_text when calling Invoice., must be smaller than or equal to 1024.');
        }
        if (!is_null($due_date_text) && (mb_strlen($due_date_text) < 0)) {
            throw new \InvalidArgumentException('invalid length for $due_date_text when calling Invoice., must be bigger than or equal to 0.');
        }

        $this->container['due_date_text'] = $due_date_text;

        return $this;
    }

    /**
     * Gets financial_administration_export_batch_id
     *
     * @return string
     */
    public function getFinancialAdministrationExportBatchId()
    {
        return $this->container['financial_administration_export_batch_id'];
    }

    /**
     * Sets financial_administration_export_batch_id
     *
     * @param string $financial_administration_export_batch_id financial_administration_export_batch_id
     *
     * @return $this
     */
    public function setFinancialAdministrationExportBatchId($financial_administration_export_batch_id)
    {
        $this->container['financial_administration_export_batch_id'] = $financial_administration_export_batch_id;

        return $this;
    }

    /**
     * Gets financial_administration_id
     *
     * @return string
     */
    public function getFinancialAdministrationId()
    {
        return $this->container['financial_administration_id'];
    }

    /**
     * Sets financial_administration_id
     *
     * @param string $financial_administration_id financial_administration_id
     *
     * @return $this
     */
    public function setFinancialAdministrationId($financial_administration_id)
    {
        $this->container['financial_administration_id'] = $financial_administration_id;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return \Swagger\Client\Model\InvoiceType
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param \Swagger\Client\Model\InvoiceType $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets kvk_number
     *
     * @return string
     */
    public function getKvkNumber()
    {
        return $this->container['kvk_number'];
    }

    /**
     * Sets kvk_number
     *
     * @param string $kvk_number kvk_number
     *
     * @return $this
     */
    public function setKvkNumber($kvk_number)
    {
        $this->container['kvk_number'] = $kvk_number;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Swagger\Client\Model\InvoiceLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Swagger\Client\Model\InvoiceLine[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets products_to_pass_on
     *
     * @return \Swagger\Client\Model\ProductOrder[]
     */
    public function getProductsToPassOn()
    {
        return $this->container['products_to_pass_on'];
    }

    /**
     * Sets products_to_pass_on
     *
     * @param \Swagger\Client\Model\ProductOrder[] $products_to_pass_on products_to_pass_on
     *
     * @return $this
     */
    public function setProductsToPassOn($products_to_pass_on)
    {
        $this->container['products_to_pass_on'] = $products_to_pass_on;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string $remarks remarks
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\InvoiceStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\InvoiceStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tav_customer
     *
     * @return string
     */
    public function getTavCustomer()
    {
        return $this->container['tav_customer'];
    }

    /**
     * Sets tav_customer
     *
     * @param string $tav_customer tav_customer
     *
     * @return $this
     */
    public function setTavCustomer($tav_customer)
    {
        $this->container['tav_customer'] = $tav_customer;

        return $this;
    }

    /**
     * Gets total_price_gross
     *
     * @return float
     */
    public function getTotalPriceGross()
    {
        return $this->container['total_price_gross'];
    }

    /**
     * Sets total_price_gross
     *
     * @param float $total_price_gross total_price_gross
     *
     * @return $this
     */
    public function setTotalPriceGross($total_price_gross)
    {
        $this->container['total_price_gross'] = $total_price_gross;

        return $this;
    }

    /**
     * Gets total_price_net
     *
     * @return float
     */
    public function getTotalPriceNet()
    {
        return $this->container['total_price_net'];
    }

    /**
     * Sets total_price_net
     *
     * @param float $total_price_net total_price_net
     *
     * @return $this
     */
    public function setTotalPriceNet($total_price_net)
    {
        $this->container['total_price_net'] = $total_price_net;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return float
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param float $total_tax total_tax
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets is_overdue
     *
     * @return bool
     */
    public function getIsOverdue()
    {
        return $this->container['is_overdue'];
    }

    /**
     * Sets is_overdue
     *
     * @param bool $is_overdue is_overdue
     *
     * @return $this
     */
    public function setIsOverdue($is_overdue)
    {
        $this->container['is_overdue'] = $is_overdue;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets linked_relation
     *
     * @return \Swagger\Client\Model\LinkedRelation
     */
    public function getLinkedRelation()
    {
        return $this->container['linked_relation'];
    }

    /**
     * Sets linked_relation
     *
     * @param \Swagger\Client\Model\LinkedRelation $linked_relation linked_relation
     *
     * @return $this
     */
    public function setLinkedRelation($linked_relation)
    {
        $this->container['linked_relation'] = $linked_relation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


