<?php
/**
 * AssignmentsSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * AssignmentsSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssignmentsSearchRequest extends SearchRequest 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssignmentsSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assignment_ids' => 'string[]',
        'assignment_phases' => '\Swagger\Client\Model\AssignmentPhase[]',
        'availabilty_statuses' => '\Swagger\Client\Model\AvailabilityStatus[]',
        'country_code' => 'string',
        'employee_ids' => 'string[]',
        'filter_by_assignment_types' => '\Swagger\Client\Model\AssignmentType[]',
        'filter_by_real_estate_groups' => '\Swagger\Client\Model\RealEstateGroup[]',
        'for_rent' => 'bool',
        'for_sale' => 'bool',
        'include_statistics' => 'bool',
        'listing_types' => '\Swagger\Client\Model\ListingType[]',
        'localities' => 'string[]',
        'office_ids' => 'string[]',
        'order_by' => 'object',
        'relation_ids' => 'string[]',
        'term_fields' => '\Swagger\Client\Model\AssignmentTermField[]',
        'culture' => 'string',
        'filter_by_project_assignment_ids' => 'string[]',
        'filter_by_object_type_assignment_ids' => 'string[]',
        'filter_by_acquisition_assignment_ids' => 'string[]',
        'ignore_old_versions' => 'bool',
        'has_key' => 'bool',
        'filter_by_key_numbers' => 'int[]',
        'filter_by_furnishings' => '\Swagger\Client\Model\Furnishing[]',
        'filter_by_min_price' => 'float',
        'filter_by_max_price' => 'float',
        'filter_by_number_of_bedrooms_min' => 'int',
        'filter_by_number_of_bedrooms_max' => 'int',
        'is_cancelled' => 'bool',
        'acquisition_statuses' => '\Swagger\Client\Model\AcquisitionStatus[]',
        'available_from_min' => '\DateTime',
        'available_from_max' => '\DateTime',
        'available_until_min' => '\DateTime',
        'available_until_max' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assignment_ids' => 'guid',
        'assignment_phases' => null,
        'availabilty_statuses' => null,
        'country_code' => null,
        'employee_ids' => 'guid',
        'filter_by_assignment_types' => null,
        'filter_by_real_estate_groups' => null,
        'for_rent' => null,
        'for_sale' => null,
        'include_statistics' => null,
        'listing_types' => null,
        'localities' => null,
        'office_ids' => 'guid',
        'order_by' => null,
        'relation_ids' => 'guid',
        'term_fields' => null,
        'culture' => null,
        'filter_by_project_assignment_ids' => 'guid',
        'filter_by_object_type_assignment_ids' => 'guid',
        'filter_by_acquisition_assignment_ids' => 'guid',
        'ignore_old_versions' => null,
        'has_key' => null,
        'filter_by_key_numbers' => 'int32',
        'filter_by_furnishings' => null,
        'filter_by_min_price' => 'decimal',
        'filter_by_max_price' => 'decimal',
        'filter_by_number_of_bedrooms_min' => 'int32',
        'filter_by_number_of_bedrooms_max' => 'int32',
        'is_cancelled' => null,
        'acquisition_statuses' => null,
        'available_from_min' => 'date-time',
        'available_from_max' => 'date-time',
        'available_until_min' => 'date-time',
        'available_until_max' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignment_ids' => 'assignmentIds',
        'assignment_phases' => 'assignmentPhases',
        'availabilty_statuses' => 'availabiltyStatuses',
        'country_code' => 'countryCode',
        'employee_ids' => 'employeeIds',
        'filter_by_assignment_types' => 'filterByAssignmentTypes',
        'filter_by_real_estate_groups' => 'filterByRealEstateGroups',
        'for_rent' => 'forRent',
        'for_sale' => 'forSale',
        'include_statistics' => 'includeStatistics',
        'listing_types' => 'listingTypes',
        'localities' => 'localities',
        'office_ids' => 'officeIds',
        'order_by' => 'orderBy',
        'relation_ids' => 'relationIds',
        'term_fields' => 'termFields',
        'culture' => 'culture',
        'filter_by_project_assignment_ids' => 'filterByProjectAssignmentIds',
        'filter_by_object_type_assignment_ids' => 'filterByObjectTypeAssignmentIds',
        'filter_by_acquisition_assignment_ids' => 'filterByAcquisitionAssignmentIds',
        'ignore_old_versions' => 'ignoreOldVersions',
        'has_key' => 'hasKey',
        'filter_by_key_numbers' => 'filterByKeyNumbers',
        'filter_by_furnishings' => 'filterByFurnishings',
        'filter_by_min_price' => 'filterByMinPrice',
        'filter_by_max_price' => 'filterByMaxPrice',
        'filter_by_number_of_bedrooms_min' => 'filterByNumberOfBedroomsMin',
        'filter_by_number_of_bedrooms_max' => 'filterByNumberOfBedroomsMax',
        'is_cancelled' => 'isCancelled',
        'acquisition_statuses' => 'acquisitionStatuses',
        'available_from_min' => 'availableFromMin',
        'available_from_max' => 'availableFromMax',
        'available_until_min' => 'availableUntilMin',
        'available_until_max' => 'availableUntilMax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignment_ids' => 'setAssignmentIds',
        'assignment_phases' => 'setAssignmentPhases',
        'availabilty_statuses' => 'setAvailabiltyStatuses',
        'country_code' => 'setCountryCode',
        'employee_ids' => 'setEmployeeIds',
        'filter_by_assignment_types' => 'setFilterByAssignmentTypes',
        'filter_by_real_estate_groups' => 'setFilterByRealEstateGroups',
        'for_rent' => 'setForRent',
        'for_sale' => 'setForSale',
        'include_statistics' => 'setIncludeStatistics',
        'listing_types' => 'setListingTypes',
        'localities' => 'setLocalities',
        'office_ids' => 'setOfficeIds',
        'order_by' => 'setOrderBy',
        'relation_ids' => 'setRelationIds',
        'term_fields' => 'setTermFields',
        'culture' => 'setCulture',
        'filter_by_project_assignment_ids' => 'setFilterByProjectAssignmentIds',
        'filter_by_object_type_assignment_ids' => 'setFilterByObjectTypeAssignmentIds',
        'filter_by_acquisition_assignment_ids' => 'setFilterByAcquisitionAssignmentIds',
        'ignore_old_versions' => 'setIgnoreOldVersions',
        'has_key' => 'setHasKey',
        'filter_by_key_numbers' => 'setFilterByKeyNumbers',
        'filter_by_furnishings' => 'setFilterByFurnishings',
        'filter_by_min_price' => 'setFilterByMinPrice',
        'filter_by_max_price' => 'setFilterByMaxPrice',
        'filter_by_number_of_bedrooms_min' => 'setFilterByNumberOfBedroomsMin',
        'filter_by_number_of_bedrooms_max' => 'setFilterByNumberOfBedroomsMax',
        'is_cancelled' => 'setIsCancelled',
        'acquisition_statuses' => 'setAcquisitionStatuses',
        'available_from_min' => 'setAvailableFromMin',
        'available_from_max' => 'setAvailableFromMax',
        'available_until_min' => 'setAvailableUntilMin',
        'available_until_max' => 'setAvailableUntilMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignment_ids' => 'getAssignmentIds',
        'assignment_phases' => 'getAssignmentPhases',
        'availabilty_statuses' => 'getAvailabiltyStatuses',
        'country_code' => 'getCountryCode',
        'employee_ids' => 'getEmployeeIds',
        'filter_by_assignment_types' => 'getFilterByAssignmentTypes',
        'filter_by_real_estate_groups' => 'getFilterByRealEstateGroups',
        'for_rent' => 'getForRent',
        'for_sale' => 'getForSale',
        'include_statistics' => 'getIncludeStatistics',
        'listing_types' => 'getListingTypes',
        'localities' => 'getLocalities',
        'office_ids' => 'getOfficeIds',
        'order_by' => 'getOrderBy',
        'relation_ids' => 'getRelationIds',
        'term_fields' => 'getTermFields',
        'culture' => 'getCulture',
        'filter_by_project_assignment_ids' => 'getFilterByProjectAssignmentIds',
        'filter_by_object_type_assignment_ids' => 'getFilterByObjectTypeAssignmentIds',
        'filter_by_acquisition_assignment_ids' => 'getFilterByAcquisitionAssignmentIds',
        'ignore_old_versions' => 'getIgnoreOldVersions',
        'has_key' => 'getHasKey',
        'filter_by_key_numbers' => 'getFilterByKeyNumbers',
        'filter_by_furnishings' => 'getFilterByFurnishings',
        'filter_by_min_price' => 'getFilterByMinPrice',
        'filter_by_max_price' => 'getFilterByMaxPrice',
        'filter_by_number_of_bedrooms_min' => 'getFilterByNumberOfBedroomsMin',
        'filter_by_number_of_bedrooms_max' => 'getFilterByNumberOfBedroomsMax',
        'is_cancelled' => 'getIsCancelled',
        'acquisition_statuses' => 'getAcquisitionStatuses',
        'available_from_min' => 'getAvailableFromMin',
        'available_from_max' => 'getAvailableFromMax',
        'available_until_min' => 'getAvailableUntilMin',
        'available_until_max' => 'getAvailableUntilMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['assignment_ids'] = isset($data['assignment_ids']) ? $data['assignment_ids'] : null;
        $this->container['assignment_phases'] = isset($data['assignment_phases']) ? $data['assignment_phases'] : null;
        $this->container['availabilty_statuses'] = isset($data['availabilty_statuses']) ? $data['availabilty_statuses'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['employee_ids'] = isset($data['employee_ids']) ? $data['employee_ids'] : null;
        $this->container['filter_by_assignment_types'] = isset($data['filter_by_assignment_types']) ? $data['filter_by_assignment_types'] : null;
        $this->container['filter_by_real_estate_groups'] = isset($data['filter_by_real_estate_groups']) ? $data['filter_by_real_estate_groups'] : null;
        $this->container['for_rent'] = isset($data['for_rent']) ? $data['for_rent'] : null;
        $this->container['for_sale'] = isset($data['for_sale']) ? $data['for_sale'] : null;
        $this->container['include_statistics'] = isset($data['include_statistics']) ? $data['include_statistics'] : null;
        $this->container['listing_types'] = isset($data['listing_types']) ? $data['listing_types'] : null;
        $this->container['localities'] = isset($data['localities']) ? $data['localities'] : null;
        $this->container['office_ids'] = isset($data['office_ids']) ? $data['office_ids'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['relation_ids'] = isset($data['relation_ids']) ? $data['relation_ids'] : null;
        $this->container['term_fields'] = isset($data['term_fields']) ? $data['term_fields'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['filter_by_project_assignment_ids'] = isset($data['filter_by_project_assignment_ids']) ? $data['filter_by_project_assignment_ids'] : null;
        $this->container['filter_by_object_type_assignment_ids'] = isset($data['filter_by_object_type_assignment_ids']) ? $data['filter_by_object_type_assignment_ids'] : null;
        $this->container['filter_by_acquisition_assignment_ids'] = isset($data['filter_by_acquisition_assignment_ids']) ? $data['filter_by_acquisition_assignment_ids'] : null;
        $this->container['ignore_old_versions'] = isset($data['ignore_old_versions']) ? $data['ignore_old_versions'] : null;
        $this->container['has_key'] = isset($data['has_key']) ? $data['has_key'] : null;
        $this->container['filter_by_key_numbers'] = isset($data['filter_by_key_numbers']) ? $data['filter_by_key_numbers'] : null;
        $this->container['filter_by_furnishings'] = isset($data['filter_by_furnishings']) ? $data['filter_by_furnishings'] : null;
        $this->container['filter_by_min_price'] = isset($data['filter_by_min_price']) ? $data['filter_by_min_price'] : null;
        $this->container['filter_by_max_price'] = isset($data['filter_by_max_price']) ? $data['filter_by_max_price'] : null;
        $this->container['filter_by_number_of_bedrooms_min'] = isset($data['filter_by_number_of_bedrooms_min']) ? $data['filter_by_number_of_bedrooms_min'] : null;
        $this->container['filter_by_number_of_bedrooms_max'] = isset($data['filter_by_number_of_bedrooms_max']) ? $data['filter_by_number_of_bedrooms_max'] : null;
        $this->container['is_cancelled'] = isset($data['is_cancelled']) ? $data['is_cancelled'] : null;
        $this->container['acquisition_statuses'] = isset($data['acquisition_statuses']) ? $data['acquisition_statuses'] : null;
        $this->container['available_from_min'] = isset($data['available_from_min']) ? $data['available_from_min'] : null;
        $this->container['available_from_max'] = isset($data['available_from_max']) ? $data['available_from_max'] : null;
        $this->container['available_until_min'] = isset($data['available_until_min']) ? $data['available_until_min'] : null;
        $this->container['available_until_max'] = isset($data['available_until_max']) ? $data['available_until_max'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['culture']) && (mb_strlen($this->container['culture']) > 5)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['culture']) && (mb_strlen($this->container['culture']) < 0)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignment_ids
     *
     * @return string[]
     */
    public function getAssignmentIds()
    {
        return $this->container['assignment_ids'];
    }

    /**
     * Sets assignment_ids
     *
     * @param string[] $assignment_ids Search by specific assignment Ids. Used to return/refresh one search result.
     *
     * @return $this
     */
    public function setAssignmentIds($assignment_ids)
    {
        $this->container['assignment_ids'] = $assignment_ids;

        return $this;
    }

    /**
     * Gets assignment_phases
     *
     * @return \Swagger\Client\Model\AssignmentPhase[]
     */
    public function getAssignmentPhases()
    {
        return $this->container['assignment_phases'];
    }

    /**
     * Sets assignment_phases
     *
     * @param \Swagger\Client\Model\AssignmentPhase[] $assignment_phases Filter by assignment phase ('Concept', 'Initiated', 'Completed')
     *
     * @return $this
     */
    public function setAssignmentPhases($assignment_phases)
    {
        $this->container['assignment_phases'] = $assignment_phases;

        return $this;
    }

    /**
     * Gets availabilty_statuses
     *
     * @return \Swagger\Client\Model\AvailabilityStatus[]
     */
    public function getAvailabiltyStatuses()
    {
        return $this->container['availabilty_statuses'];
    }

    /**
     * Sets availabilty_statuses
     *
     * @param \Swagger\Client\Model\AvailabilityStatus[] $availabilty_statuses availabilty_statuses
     *
     * @return $this
     */
    public function setAvailabiltyStatuses($availabilty_statuses)
    {
        $this->container['availabilty_statuses'] = $availabilty_statuses;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Filter by selected Country Code.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets employee_ids
     *
     * @return string[]
     */
    public function getEmployeeIds()
    {
        return $this->container['employee_ids'];
    }

    /**
     * Sets employee_ids
     *
     * @param string[] $employee_ids Filter by selected Employee Ids.
     *
     * @return $this
     */
    public function setEmployeeIds($employee_ids)
    {
        $this->container['employee_ids'] = $employee_ids;

        return $this;
    }

    /**
     * Gets filter_by_assignment_types
     *
     * @return \Swagger\Client\Model\AssignmentType[]
     */
    public function getFilterByAssignmentTypes()
    {
        return $this->container['filter_by_assignment_types'];
    }

    /**
     * Sets filter_by_assignment_types
     *
     * @param \Swagger\Client\Model\AssignmentType[] $filter_by_assignment_types Filter by selected assignment types.
     *
     * @return $this
     */
    public function setFilterByAssignmentTypes($filter_by_assignment_types)
    {
        $this->container['filter_by_assignment_types'] = $filter_by_assignment_types;

        return $this;
    }

    /**
     * Gets filter_by_real_estate_groups
     *
     * @return \Swagger\Client\Model\RealEstateGroup[]
     */
    public function getFilterByRealEstateGroups()
    {
        return $this->container['filter_by_real_estate_groups'];
    }

    /**
     * Sets filter_by_real_estate_groups
     *
     * @param \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...).
     *
     * @return $this
     */
    public function setFilterByRealEstateGroups($filter_by_real_estate_groups)
    {
        $this->container['filter_by_real_estate_groups'] = $filter_by_real_estate_groups;

        return $this;
    }

    /**
     * Gets for_rent
     *
     * @return bool
     */
    public function getForRent()
    {
        return $this->container['for_rent'];
    }

    /**
     * Sets for_rent
     *
     * @param bool $for_rent If true assingments that are for rent are returned..
     *
     * @return $this
     */
    public function setForRent($for_rent)
    {
        $this->container['for_rent'] = $for_rent;

        return $this;
    }

    /**
     * Gets for_sale
     *
     * @return bool
     */
    public function getForSale()
    {
        return $this->container['for_sale'];
    }

    /**
     * Sets for_sale
     *
     * @param bool $for_sale If true assingments that are for sale are returned..
     *
     * @return $this
     */
    public function setForSale($for_sale)
    {
        $this->container['for_sale'] = $for_sale;

        return $this;
    }

    /**
     * Gets include_statistics
     *
     * @return bool
     */
    public function getIncludeStatistics()
    {
        return $this->container['include_statistics'];
    }

    /**
     * Sets include_statistics
     *
     * @param bool $include_statistics Return statistics, like lists of unique localities of the assignments and total commissions.
     *
     * @return $this
     */
    public function setIncludeStatistics($include_statistics)
    {
        $this->container['include_statistics'] = $include_statistics;

        return $this;
    }

    /**
     * Gets listing_types
     *
     * @return \Swagger\Client\Model\ListingType[]
     */
    public function getListingTypes()
    {
        return $this->container['listing_types'];
    }

    /**
     * Sets listing_types
     *
     * @param \Swagger\Client\Model\ListingType[] $listing_types listing_types
     *
     * @return $this
     */
    public function setListingTypes($listing_types)
    {
        $this->container['listing_types'] = $listing_types;

        return $this;
    }

    /**
     * Gets localities
     *
     * @return string[]
     */
    public function getLocalities()
    {
        return $this->container['localities'];
    }

    /**
     * Sets localities
     *
     * @param string[] $localities Filter by selected Localities.
     *
     * @return $this
     */
    public function setLocalities($localities)
    {
        $this->container['localities'] = $localities;

        return $this;
    }

    /**
     * Gets office_ids
     *
     * @return string[]
     */
    public function getOfficeIds()
    {
        return $this->container['office_ids'];
    }

    /**
     * Sets office_ids
     *
     * @param string[] $office_ids Filter by selected Office Ids.
     *
     * @return $this
     */
    public function setOfficeIds($office_ids)
    {
        $this->container['office_ids'] = $office_ids;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return object
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param object $order_by Order the results by the indicated assignment field.
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets relation_ids
     *
     * @return string[]
     */
    public function getRelationIds()
    {
        return $this->container['relation_ids'];
    }

    /**
     * Sets relation_ids
     *
     * @param string[] $relation_ids Filter by selected Relation Ids.
     *
     * @return $this
     */
    public function setRelationIds($relation_ids)
    {
        $this->container['relation_ids'] = $relation_ids;

        return $this;
    }

    /**
     * Gets term_fields
     *
     * @return \Swagger\Client\Model\AssignmentTermField[]
     */
    public function getTermFields()
    {
        return $this->container['term_fields'];
    }

    /**
     * Sets term_fields
     *
     * @param \Swagger\Client\Model\AssignmentTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case 'Term' is given.
     *
     * @return $this
     */
    public function setTermFields($term_fields)
    {
        $this->container['term_fields'] = $term_fields;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \"nl-NL\" and \"en-GB\". If no or an unsupported culture is given the default culture is used (\"nl-NL\").
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        if (!is_null($culture) && (mb_strlen($culture) > 5)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling AssignmentsSearchRequest., must be smaller than or equal to 5.');
        }
        if (!is_null($culture) && (mb_strlen($culture) < 0)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling AssignmentsSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets filter_by_project_assignment_ids
     *
     * @return string[]
     */
    public function getFilterByProjectAssignmentIds()
    {
        return $this->container['filter_by_project_assignment_ids'];
    }

    /**
     * Sets filter_by_project_assignment_ids
     *
     * @param string[] $filter_by_project_assignment_ids Filter by selected Project Ids.
     *
     * @return $this
     */
    public function setFilterByProjectAssignmentIds($filter_by_project_assignment_ids)
    {
        $this->container['filter_by_project_assignment_ids'] = $filter_by_project_assignment_ids;

        return $this;
    }

    /**
     * Gets filter_by_object_type_assignment_ids
     *
     * @return string[]
     */
    public function getFilterByObjectTypeAssignmentIds()
    {
        return $this->container['filter_by_object_type_assignment_ids'];
    }

    /**
     * Sets filter_by_object_type_assignment_ids
     *
     * @param string[] $filter_by_object_type_assignment_ids Filter by selected Object Type Ids.
     *
     * @return $this
     */
    public function setFilterByObjectTypeAssignmentIds($filter_by_object_type_assignment_ids)
    {
        $this->container['filter_by_object_type_assignment_ids'] = $filter_by_object_type_assignment_ids;

        return $this;
    }

    /**
     * Gets filter_by_acquisition_assignment_ids
     *
     * @return string[]
     */
    public function getFilterByAcquisitionAssignmentIds()
    {
        return $this->container['filter_by_acquisition_assignment_ids'];
    }

    /**
     * Sets filter_by_acquisition_assignment_ids
     *
     * @param string[] $filter_by_acquisition_assignment_ids Filter by selected Acquisition Assignment Ids.
     *
     * @return $this
     */
    public function setFilterByAcquisitionAssignmentIds($filter_by_acquisition_assignment_ids)
    {
        $this->container['filter_by_acquisition_assignment_ids'] = $filter_by_acquisition_assignment_ids;

        return $this;
    }

    /**
     * Gets ignore_old_versions
     *
     * @return bool
     */
    public function getIgnoreOldVersions()
    {
        return $this->container['ignore_old_versions'];
    }

    /**
     * Sets ignore_old_versions
     *
     * @param bool $ignore_old_versions Assignments might be 'versions' of other Assignments (see /ObjectAssignment/MakeVersionOf). To force to receive only the most recent 'version' of an Assignment set IgnoreOldVersions to true.
     *
     * @return $this
     */
    public function setIgnoreOldVersions($ignore_old_versions)
    {
        $this->container['ignore_old_versions'] = $ignore_old_versions;

        return $this;
    }

    /**
     * Gets has_key
     *
     * @return bool
     */
    public function getHasKey()
    {
        return $this->container['has_key'];
    }

    /**
     * Sets has_key
     *
     * @param bool $has_key Only return assignment that have a key, or not.
     *
     * @return $this
     */
    public function setHasKey($has_key)
    {
        $this->container['has_key'] = $has_key;

        return $this;
    }

    /**
     * Gets filter_by_key_numbers
     *
     * @return int[]
     */
    public function getFilterByKeyNumbers()
    {
        return $this->container['filter_by_key_numbers'];
    }

    /**
     * Sets filter_by_key_numbers
     *
     * @param int[] $filter_by_key_numbers Filter by assignments key numbers.
     *
     * @return $this
     */
    public function setFilterByKeyNumbers($filter_by_key_numbers)
    {
        $this->container['filter_by_key_numbers'] = $filter_by_key_numbers;

        return $this;
    }

    /**
     * Gets filter_by_furnishings
     *
     * @return \Swagger\Client\Model\Furnishing[]
     */
    public function getFilterByFurnishings()
    {
        return $this->container['filter_by_furnishings'];
    }

    /**
     * Sets filter_by_furnishings
     *
     * @param \Swagger\Client\Model\Furnishing[] $filter_by_furnishings Filter by assignment furnishing.
     *
     * @return $this
     */
    public function setFilterByFurnishings($filter_by_furnishings)
    {
        $this->container['filter_by_furnishings'] = $filter_by_furnishings;

        return $this;
    }

    /**
     * Gets filter_by_min_price
     *
     * @return float
     */
    public function getFilterByMinPrice()
    {
        return $this->container['filter_by_min_price'];
    }

    /**
     * Sets filter_by_min_price
     *
     * @param float $filter_by_min_price The minimal asking price
     *
     * @return $this
     */
    public function setFilterByMinPrice($filter_by_min_price)
    {
        $this->container['filter_by_min_price'] = $filter_by_min_price;

        return $this;
    }

    /**
     * Gets filter_by_max_price
     *
     * @return float
     */
    public function getFilterByMaxPrice()
    {
        return $this->container['filter_by_max_price'];
    }

    /**
     * Sets filter_by_max_price
     *
     * @param float $filter_by_max_price The maximal asking price
     *
     * @return $this
     */
    public function setFilterByMaxPrice($filter_by_max_price)
    {
        $this->container['filter_by_max_price'] = $filter_by_max_price;

        return $this;
    }

    /**
     * Gets filter_by_number_of_bedrooms_min
     *
     * @return int
     */
    public function getFilterByNumberOfBedroomsMin()
    {
        return $this->container['filter_by_number_of_bedrooms_min'];
    }

    /**
     * Sets filter_by_number_of_bedrooms_min
     *
     * @param int $filter_by_number_of_bedrooms_min The minimal number of bedrooms
     *
     * @return $this
     */
    public function setFilterByNumberOfBedroomsMin($filter_by_number_of_bedrooms_min)
    {
        $this->container['filter_by_number_of_bedrooms_min'] = $filter_by_number_of_bedrooms_min;

        return $this;
    }

    /**
     * Gets filter_by_number_of_bedrooms_max
     *
     * @return int
     */
    public function getFilterByNumberOfBedroomsMax()
    {
        return $this->container['filter_by_number_of_bedrooms_max'];
    }

    /**
     * Sets filter_by_number_of_bedrooms_max
     *
     * @param int $filter_by_number_of_bedrooms_max The maximal number of bedrooms
     *
     * @return $this
     */
    public function setFilterByNumberOfBedroomsMax($filter_by_number_of_bedrooms_max)
    {
        $this->container['filter_by_number_of_bedrooms_max'] = $filter_by_number_of_bedrooms_max;

        return $this;
    }

    /**
     * Gets is_cancelled
     *
     * @return bool
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     *
     * @param bool $is_cancelled Return acquisition assignment that are cancelled or not. Only applies to acquisition assignments.
     *
     * @return $this
     */
    public function setIsCancelled($is_cancelled)
    {
        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets acquisition_statuses
     *
     * @return \Swagger\Client\Model\AcquisitionStatus[]
     */
    public function getAcquisitionStatuses()
    {
        return $this->container['acquisition_statuses'];
    }

    /**
     * Sets acquisition_statuses
     *
     * @param \Swagger\Client\Model\AcquisitionStatus[] $acquisition_statuses Return acquisition assignments with the specified acquisition statuses. Only applies to acquisition object assignments
     *
     * @return $this
     */
    public function setAcquisitionStatuses($acquisition_statuses)
    {
        $this->container['acquisition_statuses'] = $acquisition_statuses;

        return $this;
    }

    /**
     * Gets available_from_min
     *
     * @return \DateTime
     */
    public function getAvailableFromMin()
    {
        return $this->container['available_from_min'];
    }

    /**
     * Sets available_from_min
     *
     * @param \DateTime $available_from_min Return rent assignments with an availability from date higher than the provided date time value.
     *
     * @return $this
     */
    public function setAvailableFromMin($available_from_min)
    {
        $this->container['available_from_min'] = $available_from_min;

        return $this;
    }

    /**
     * Gets available_from_max
     *
     * @return \DateTime
     */
    public function getAvailableFromMax()
    {
        return $this->container['available_from_max'];
    }

    /**
     * Sets available_from_max
     *
     * @param \DateTime $available_from_max Return rent assignments with an availability from date lower than the provided date time value.
     *
     * @return $this
     */
    public function setAvailableFromMax($available_from_max)
    {
        $this->container['available_from_max'] = $available_from_max;

        return $this;
    }

    /**
     * Gets available_until_min
     *
     * @return \DateTime
     */
    public function getAvailableUntilMin()
    {
        return $this->container['available_until_min'];
    }

    /**
     * Sets available_until_min
     *
     * @param \DateTime $available_until_min Return rent assignments with an availability until date higher than the provided date time value.
     *
     * @return $this
     */
    public function setAvailableUntilMin($available_until_min)
    {
        $this->container['available_until_min'] = $available_until_min;

        return $this;
    }

    /**
     * Gets available_until_max
     *
     * @return \DateTime
     */
    public function getAvailableUntilMax()
    {
        return $this->container['available_until_max'];
    }

    /**
     * Sets available_until_max
     *
     * @param \DateTime $available_until_max Return rent assignments with an availability until date lower than the provided date time value.
     *
     * @return $this
     */
    public function setAvailableUntilMax($available_until_max)
    {
        $this->container['available_until_max'] = $available_until_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


