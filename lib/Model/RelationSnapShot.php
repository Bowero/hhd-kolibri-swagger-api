<?php
/**
 * RelationSnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * RelationSnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelationSnapShot extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RelationSnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'avatar_url' => 'string',
        'date_of_birth' => '\DateTime',
        'date_time_created' => '\DateTime',
        'date_time_modified' => '\DateTime',
        'display_name' => 'string',
        'email' => 'string',
        'second_email_address' => 'string',
        'third_email_address' => 'string',
        'is_active' => 'bool',
        'is_main_office' => 'bool',
        'last_contact' => '\DateTime',
        'letter_avatar' => 'string',
        'linked_created_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_modified_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_offices' => '\Swagger\Client\Model\LinkedOffice[]',
        'linked_relation_groups' => '\Swagger\Client\Model\LinkedRelationGroup[]',
        'linked_partner' => '\Swagger\Client\Model\LinkedPartner',
        'linked_vendor_assignments' => '\Swagger\Client\Model\LinkedAssignment[]',
        'linked_applicant_assignments' => '\Swagger\Client\Model\LinkedAssignment[]',
        'linked_notary_assignments' => '\Swagger\Client\Model\LinkedAssignment[]',
        'locality' => 'string',
        'mobile_number' => 'string',
        'phone_number' => 'string',
        'street_name_and_number' => 'string',
        'postal_code' => 'string',
        'type_of_relation' => '\Swagger\Client\Model\RelationType',
        'upcoming_birthday' => '\DateTime',
        'employee_role' => '\Swagger\Client\Model\EmployeeRole',
        'future_street_name_and_number' => 'string',
        'future_postal_code' => 'string',
        'future_locality' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'avatar_url' => null,
        'date_of_birth' => 'date-time',
        'date_time_created' => 'date-time',
        'date_time_modified' => 'date-time',
        'display_name' => null,
        'email' => null,
        'second_email_address' => null,
        'third_email_address' => null,
        'is_active' => null,
        'is_main_office' => null,
        'last_contact' => 'date-time',
        'letter_avatar' => null,
        'linked_created_by' => null,
        'linked_modified_by' => null,
        'linked_offices' => null,
        'linked_relation_groups' => null,
        'linked_partner' => null,
        'linked_vendor_assignments' => null,
        'linked_applicant_assignments' => null,
        'linked_notary_assignments' => null,
        'locality' => null,
        'mobile_number' => null,
        'phone_number' => null,
        'street_name_and_number' => null,
        'postal_code' => null,
        'type_of_relation' => null,
        'upcoming_birthday' => 'date-time',
        'employee_role' => null,
        'future_street_name_and_number' => null,
        'future_postal_code' => null,
        'future_locality' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avatar_url' => 'avatarUrl',
        'date_of_birth' => 'dateOfBirth',
        'date_time_created' => 'dateTimeCreated',
        'date_time_modified' => 'dateTimeModified',
        'display_name' => 'displayName',
        'email' => 'email',
        'second_email_address' => 'secondEmailAddress',
        'third_email_address' => 'thirdEmailAddress',
        'is_active' => 'isActive',
        'is_main_office' => 'isMainOffice',
        'last_contact' => 'lastContact',
        'letter_avatar' => 'letterAvatar',
        'linked_created_by' => 'linkedCreatedBy',
        'linked_modified_by' => 'linkedModifiedBy',
        'linked_offices' => 'linkedOffices',
        'linked_relation_groups' => 'linkedRelationGroups',
        'linked_partner' => 'linkedPartner',
        'linked_vendor_assignments' => 'linkedVendorAssignments',
        'linked_applicant_assignments' => 'linkedApplicantAssignments',
        'linked_notary_assignments' => 'linkedNotaryAssignments',
        'locality' => 'locality',
        'mobile_number' => 'mobileNumber',
        'phone_number' => 'phoneNumber',
        'street_name_and_number' => 'streetNameAndNumber',
        'postal_code' => 'postalCode',
        'type_of_relation' => 'typeOfRelation',
        'upcoming_birthday' => 'upcomingBirthday',
        'employee_role' => 'employeeRole',
        'future_street_name_and_number' => 'futureStreetNameAndNumber',
        'future_postal_code' => 'futurePostalCode',
        'future_locality' => 'futureLocality'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avatar_url' => 'setAvatarUrl',
        'date_of_birth' => 'setDateOfBirth',
        'date_time_created' => 'setDateTimeCreated',
        'date_time_modified' => 'setDateTimeModified',
        'display_name' => 'setDisplayName',
        'email' => 'setEmail',
        'second_email_address' => 'setSecondEmailAddress',
        'third_email_address' => 'setThirdEmailAddress',
        'is_active' => 'setIsActive',
        'is_main_office' => 'setIsMainOffice',
        'last_contact' => 'setLastContact',
        'letter_avatar' => 'setLetterAvatar',
        'linked_created_by' => 'setLinkedCreatedBy',
        'linked_modified_by' => 'setLinkedModifiedBy',
        'linked_offices' => 'setLinkedOffices',
        'linked_relation_groups' => 'setLinkedRelationGroups',
        'linked_partner' => 'setLinkedPartner',
        'linked_vendor_assignments' => 'setLinkedVendorAssignments',
        'linked_applicant_assignments' => 'setLinkedApplicantAssignments',
        'linked_notary_assignments' => 'setLinkedNotaryAssignments',
        'locality' => 'setLocality',
        'mobile_number' => 'setMobileNumber',
        'phone_number' => 'setPhoneNumber',
        'street_name_and_number' => 'setStreetNameAndNumber',
        'postal_code' => 'setPostalCode',
        'type_of_relation' => 'setTypeOfRelation',
        'upcoming_birthday' => 'setUpcomingBirthday',
        'employee_role' => 'setEmployeeRole',
        'future_street_name_and_number' => 'setFutureStreetNameAndNumber',
        'future_postal_code' => 'setFuturePostalCode',
        'future_locality' => 'setFutureLocality'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avatar_url' => 'getAvatarUrl',
        'date_of_birth' => 'getDateOfBirth',
        'date_time_created' => 'getDateTimeCreated',
        'date_time_modified' => 'getDateTimeModified',
        'display_name' => 'getDisplayName',
        'email' => 'getEmail',
        'second_email_address' => 'getSecondEmailAddress',
        'third_email_address' => 'getThirdEmailAddress',
        'is_active' => 'getIsActive',
        'is_main_office' => 'getIsMainOffice',
        'last_contact' => 'getLastContact',
        'letter_avatar' => 'getLetterAvatar',
        'linked_created_by' => 'getLinkedCreatedBy',
        'linked_modified_by' => 'getLinkedModifiedBy',
        'linked_offices' => 'getLinkedOffices',
        'linked_relation_groups' => 'getLinkedRelationGroups',
        'linked_partner' => 'getLinkedPartner',
        'linked_vendor_assignments' => 'getLinkedVendorAssignments',
        'linked_applicant_assignments' => 'getLinkedApplicantAssignments',
        'linked_notary_assignments' => 'getLinkedNotaryAssignments',
        'locality' => 'getLocality',
        'mobile_number' => 'getMobileNumber',
        'phone_number' => 'getPhoneNumber',
        'street_name_and_number' => 'getStreetNameAndNumber',
        'postal_code' => 'getPostalCode',
        'type_of_relation' => 'getTypeOfRelation',
        'upcoming_birthday' => 'getUpcomingBirthday',
        'employee_role' => 'getEmployeeRole',
        'future_street_name_and_number' => 'getFutureStreetNameAndNumber',
        'future_postal_code' => 'getFuturePostalCode',
        'future_locality' => 'getFutureLocality'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['avatar_url'] = isset($data['avatar_url']) ? $data['avatar_url'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['date_time_created'] = isset($data['date_time_created']) ? $data['date_time_created'] : null;
        $this->container['date_time_modified'] = isset($data['date_time_modified']) ? $data['date_time_modified'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['second_email_address'] = isset($data['second_email_address']) ? $data['second_email_address'] : null;
        $this->container['third_email_address'] = isset($data['third_email_address']) ? $data['third_email_address'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_main_office'] = isset($data['is_main_office']) ? $data['is_main_office'] : null;
        $this->container['last_contact'] = isset($data['last_contact']) ? $data['last_contact'] : null;
        $this->container['letter_avatar'] = isset($data['letter_avatar']) ? $data['letter_avatar'] : null;
        $this->container['linked_created_by'] = isset($data['linked_created_by']) ? $data['linked_created_by'] : null;
        $this->container['linked_modified_by'] = isset($data['linked_modified_by']) ? $data['linked_modified_by'] : null;
        $this->container['linked_offices'] = isset($data['linked_offices']) ? $data['linked_offices'] : null;
        $this->container['linked_relation_groups'] = isset($data['linked_relation_groups']) ? $data['linked_relation_groups'] : null;
        $this->container['linked_partner'] = isset($data['linked_partner']) ? $data['linked_partner'] : null;
        $this->container['linked_vendor_assignments'] = isset($data['linked_vendor_assignments']) ? $data['linked_vendor_assignments'] : null;
        $this->container['linked_applicant_assignments'] = isset($data['linked_applicant_assignments']) ? $data['linked_applicant_assignments'] : null;
        $this->container['linked_notary_assignments'] = isset($data['linked_notary_assignments']) ? $data['linked_notary_assignments'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['street_name_and_number'] = isset($data['street_name_and_number']) ? $data['street_name_and_number'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['type_of_relation'] = isset($data['type_of_relation']) ? $data['type_of_relation'] : null;
        $this->container['upcoming_birthday'] = isset($data['upcoming_birthday']) ? $data['upcoming_birthday'] : null;
        $this->container['employee_role'] = isset($data['employee_role']) ? $data['employee_role'] : null;
        $this->container['future_street_name_and_number'] = isset($data['future_street_name_and_number']) ? $data['future_street_name_and_number'] : null;
        $this->container['future_postal_code'] = isset($data['future_postal_code']) ? $data['future_postal_code'] : null;
        $this->container['future_locality'] = isset($data['future_locality']) ? $data['future_locality'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avatar_url
     *
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string $avatar_url avatar_url
     *
     * @return $this
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets date_time_created
     *
     * @return \DateTime
     */
    public function getDateTimeCreated()
    {
        return $this->container['date_time_created'];
    }

    /**
     * Sets date_time_created
     *
     * @param \DateTime $date_time_created date_time_created
     *
     * @return $this
     */
    public function setDateTimeCreated($date_time_created)
    {
        $this->container['date_time_created'] = $date_time_created;

        return $this;
    }

    /**
     * Gets date_time_modified
     *
     * @return \DateTime
     */
    public function getDateTimeModified()
    {
        return $this->container['date_time_modified'];
    }

    /**
     * Sets date_time_modified
     *
     * @param \DateTime $date_time_modified date_time_modified
     *
     * @return $this
     */
    public function setDateTimeModified($date_time_modified)
    {
        $this->container['date_time_modified'] = $date_time_modified;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets second_email_address
     *
     * @return string
     */
    public function getSecondEmailAddress()
    {
        return $this->container['second_email_address'];
    }

    /**
     * Sets second_email_address
     *
     * @param string $second_email_address second_email_address
     *
     * @return $this
     */
    public function setSecondEmailAddress($second_email_address)
    {
        $this->container['second_email_address'] = $second_email_address;

        return $this;
    }

    /**
     * Gets third_email_address
     *
     * @return string
     */
    public function getThirdEmailAddress()
    {
        return $this->container['third_email_address'];
    }

    /**
     * Sets third_email_address
     *
     * @param string $third_email_address third_email_address
     *
     * @return $this
     */
    public function setThirdEmailAddress($third_email_address)
    {
        $this->container['third_email_address'] = $third_email_address;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_main_office
     *
     * @return bool
     */
    public function getIsMainOffice()
    {
        return $this->container['is_main_office'];
    }

    /**
     * Sets is_main_office
     *
     * @param bool $is_main_office is_main_office
     *
     * @return $this
     */
    public function setIsMainOffice($is_main_office)
    {
        $this->container['is_main_office'] = $is_main_office;

        return $this;
    }

    /**
     * Gets last_contact
     *
     * @return \DateTime
     */
    public function getLastContact()
    {
        return $this->container['last_contact'];
    }

    /**
     * Sets last_contact
     *
     * @param \DateTime $last_contact last_contact
     *
     * @return $this
     */
    public function setLastContact($last_contact)
    {
        $this->container['last_contact'] = $last_contact;

        return $this;
    }

    /**
     * Gets letter_avatar
     *
     * @return string
     */
    public function getLetterAvatar()
    {
        return $this->container['letter_avatar'];
    }

    /**
     * Sets letter_avatar
     *
     * @param string $letter_avatar letter_avatar
     *
     * @return $this
     */
    public function setLetterAvatar($letter_avatar)
    {
        $this->container['letter_avatar'] = $letter_avatar;

        return $this;
    }

    /**
     * Gets linked_created_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedCreatedBy()
    {
        return $this->container['linked_created_by'];
    }

    /**
     * Sets linked_created_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_created_by linked_created_by
     *
     * @return $this
     */
    public function setLinkedCreatedBy($linked_created_by)
    {
        $this->container['linked_created_by'] = $linked_created_by;

        return $this;
    }

    /**
     * Gets linked_modified_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedModifiedBy()
    {
        return $this->container['linked_modified_by'];
    }

    /**
     * Sets linked_modified_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_modified_by linked_modified_by
     *
     * @return $this
     */
    public function setLinkedModifiedBy($linked_modified_by)
    {
        $this->container['linked_modified_by'] = $linked_modified_by;

        return $this;
    }

    /**
     * Gets linked_offices
     *
     * @return \Swagger\Client\Model\LinkedOffice[]
     */
    public function getLinkedOffices()
    {
        return $this->container['linked_offices'];
    }

    /**
     * Sets linked_offices
     *
     * @param \Swagger\Client\Model\LinkedOffice[] $linked_offices linked_offices
     *
     * @return $this
     */
    public function setLinkedOffices($linked_offices)
    {
        $this->container['linked_offices'] = $linked_offices;

        return $this;
    }

    /**
     * Gets linked_relation_groups
     *
     * @return \Swagger\Client\Model\LinkedRelationGroup[]
     */
    public function getLinkedRelationGroups()
    {
        return $this->container['linked_relation_groups'];
    }

    /**
     * Sets linked_relation_groups
     *
     * @param \Swagger\Client\Model\LinkedRelationGroup[] $linked_relation_groups linked_relation_groups
     *
     * @return $this
     */
    public function setLinkedRelationGroups($linked_relation_groups)
    {
        $this->container['linked_relation_groups'] = $linked_relation_groups;

        return $this;
    }

    /**
     * Gets linked_partner
     *
     * @return \Swagger\Client\Model\LinkedPartner
     */
    public function getLinkedPartner()
    {
        return $this->container['linked_partner'];
    }

    /**
     * Sets linked_partner
     *
     * @param \Swagger\Client\Model\LinkedPartner $linked_partner linked_partner
     *
     * @return $this
     */
    public function setLinkedPartner($linked_partner)
    {
        $this->container['linked_partner'] = $linked_partner;

        return $this;
    }

    /**
     * Gets linked_vendor_assignments
     *
     * @return \Swagger\Client\Model\LinkedAssignment[]
     */
    public function getLinkedVendorAssignments()
    {
        return $this->container['linked_vendor_assignments'];
    }

    /**
     * Sets linked_vendor_assignments
     *
     * @param \Swagger\Client\Model\LinkedAssignment[] $linked_vendor_assignments linked_vendor_assignments
     *
     * @return $this
     */
    public function setLinkedVendorAssignments($linked_vendor_assignments)
    {
        $this->container['linked_vendor_assignments'] = $linked_vendor_assignments;

        return $this;
    }

    /**
     * Gets linked_applicant_assignments
     *
     * @return \Swagger\Client\Model\LinkedAssignment[]
     */
    public function getLinkedApplicantAssignments()
    {
        return $this->container['linked_applicant_assignments'];
    }

    /**
     * Sets linked_applicant_assignments
     *
     * @param \Swagger\Client\Model\LinkedAssignment[] $linked_applicant_assignments linked_applicant_assignments
     *
     * @return $this
     */
    public function setLinkedApplicantAssignments($linked_applicant_assignments)
    {
        $this->container['linked_applicant_assignments'] = $linked_applicant_assignments;

        return $this;
    }

    /**
     * Gets linked_notary_assignments
     *
     * @return \Swagger\Client\Model\LinkedAssignment[]
     */
    public function getLinkedNotaryAssignments()
    {
        return $this->container['linked_notary_assignments'];
    }

    /**
     * Sets linked_notary_assignments
     *
     * @param \Swagger\Client\Model\LinkedAssignment[] $linked_notary_assignments linked_notary_assignments
     *
     * @return $this
     */
    public function setLinkedNotaryAssignments($linked_notary_assignments)
    {
        $this->container['linked_notary_assignments'] = $linked_notary_assignments;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality locality
     *
     * @return $this
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number mobile_number
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets street_name_and_number
     *
     * @return string
     */
    public function getStreetNameAndNumber()
    {
        return $this->container['street_name_and_number'];
    }

    /**
     * Sets street_name_and_number
     *
     * @param string $street_name_and_number street_name_and_number
     *
     * @return $this
     */
    public function setStreetNameAndNumber($street_name_and_number)
    {
        $this->container['street_name_and_number'] = $street_name_and_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets type_of_relation
     *
     * @return \Swagger\Client\Model\RelationType
     */
    public function getTypeOfRelation()
    {
        return $this->container['type_of_relation'];
    }

    /**
     * Sets type_of_relation
     *
     * @param \Swagger\Client\Model\RelationType $type_of_relation type_of_relation
     *
     * @return $this
     */
    public function setTypeOfRelation($type_of_relation)
    {
        $this->container['type_of_relation'] = $type_of_relation;

        return $this;
    }

    /**
     * Gets upcoming_birthday
     *
     * @return \DateTime
     */
    public function getUpcomingBirthday()
    {
        return $this->container['upcoming_birthday'];
    }

    /**
     * Sets upcoming_birthday
     *
     * @param \DateTime $upcoming_birthday upcoming_birthday
     *
     * @return $this
     */
    public function setUpcomingBirthday($upcoming_birthday)
    {
        $this->container['upcoming_birthday'] = $upcoming_birthday;

        return $this;
    }

    /**
     * Gets employee_role
     *
     * @return \Swagger\Client\Model\EmployeeRole
     */
    public function getEmployeeRole()
    {
        return $this->container['employee_role'];
    }

    /**
     * Sets employee_role
     *
     * @param \Swagger\Client\Model\EmployeeRole $employee_role employee_role
     *
     * @return $this
     */
    public function setEmployeeRole($employee_role)
    {
        $this->container['employee_role'] = $employee_role;

        return $this;
    }

    /**
     * Gets future_street_name_and_number
     *
     * @return string
     */
    public function getFutureStreetNameAndNumber()
    {
        return $this->container['future_street_name_and_number'];
    }

    /**
     * Sets future_street_name_and_number
     *
     * @param string $future_street_name_and_number future_street_name_and_number
     *
     * @return $this
     */
    public function setFutureStreetNameAndNumber($future_street_name_and_number)
    {
        $this->container['future_street_name_and_number'] = $future_street_name_and_number;

        return $this;
    }

    /**
     * Gets future_postal_code
     *
     * @return string
     */
    public function getFuturePostalCode()
    {
        return $this->container['future_postal_code'];
    }

    /**
     * Sets future_postal_code
     *
     * @param string $future_postal_code future_postal_code
     *
     * @return $this
     */
    public function setFuturePostalCode($future_postal_code)
    {
        $this->container['future_postal_code'] = $future_postal_code;

        return $this;
    }

    /**
     * Gets future_locality
     *
     * @return string
     */
    public function getFutureLocality()
    {
        return $this->container['future_locality'];
    }

    /**
     * Sets future_locality
     *
     * @param string $future_locality future_locality
     *
     * @return $this
     */
    public function setFutureLocality($future_locality)
    {
        $this->container['future_locality'] = $future_locality;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


