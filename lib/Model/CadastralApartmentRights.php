<?php
/**
 * CadastralApartmentRights
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CadastralApartmentRights Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CadastralApartmentRights implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CadastralApartmentRights';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'complex' => 'string',
        'has_owners_association' => 'bool',
        'head' => 'string',
        'is_originated_from_multiple_businesses' => 'bool',
        'municipality_by_devision' => 'string',
        'parcel_number_by_devision' => 'string',
        'section_by_devision' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'complex' => null,
        'has_owners_association' => null,
        'head' => null,
        'is_originated_from_multiple_businesses' => null,
        'municipality_by_devision' => null,
        'parcel_number_by_devision' => null,
        'section_by_devision' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'complex' => 'complex',
        'has_owners_association' => 'hasOwnersAssociation',
        'head' => 'head',
        'is_originated_from_multiple_businesses' => 'isOriginatedFromMultipleBusinesses',
        'municipality_by_devision' => 'municipalityByDevision',
        'parcel_number_by_devision' => 'parcelNumberByDevision',
        'section_by_devision' => 'sectionByDevision'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'complex' => 'setComplex',
        'has_owners_association' => 'setHasOwnersAssociation',
        'head' => 'setHead',
        'is_originated_from_multiple_businesses' => 'setIsOriginatedFromMultipleBusinesses',
        'municipality_by_devision' => 'setMunicipalityByDevision',
        'parcel_number_by_devision' => 'setParcelNumberByDevision',
        'section_by_devision' => 'setSectionByDevision'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'complex' => 'getComplex',
        'has_owners_association' => 'getHasOwnersAssociation',
        'head' => 'getHead',
        'is_originated_from_multiple_businesses' => 'getIsOriginatedFromMultipleBusinesses',
        'municipality_by_devision' => 'getMunicipalityByDevision',
        'parcel_number_by_devision' => 'getParcelNumberByDevision',
        'section_by_devision' => 'getSectionByDevision'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['complex'] = isset($data['complex']) ? $data['complex'] : null;
        $this->container['has_owners_association'] = isset($data['has_owners_association']) ? $data['has_owners_association'] : null;
        $this->container['head'] = isset($data['head']) ? $data['head'] : null;
        $this->container['is_originated_from_multiple_businesses'] = isset($data['is_originated_from_multiple_businesses']) ? $data['is_originated_from_multiple_businesses'] : null;
        $this->container['municipality_by_devision'] = isset($data['municipality_by_devision']) ? $data['municipality_by_devision'] : null;
        $this->container['parcel_number_by_devision'] = isset($data['parcel_number_by_devision']) ? $data['parcel_number_by_devision'] : null;
        $this->container['section_by_devision'] = isset($data['section_by_devision']) ? $data['section_by_devision'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets complex
     *
     * @return string
     */
    public function getComplex()
    {
        return $this->container['complex'];
    }

    /**
     * Sets complex
     *
     * @param string $complex complex
     *
     * @return $this
     */
    public function setComplex($complex)
    {
        $this->container['complex'] = $complex;

        return $this;
    }

    /**
     * Gets has_owners_association
     *
     * @return bool
     */
    public function getHasOwnersAssociation()
    {
        return $this->container['has_owners_association'];
    }

    /**
     * Sets has_owners_association
     *
     * @param bool $has_owners_association has_owners_association
     *
     * @return $this
     */
    public function setHasOwnersAssociation($has_owners_association)
    {
        $this->container['has_owners_association'] = $has_owners_association;

        return $this;
    }

    /**
     * Gets head
     *
     * @return string
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     *
     * @param string $head head
     *
     * @return $this
     */
    public function setHead($head)
    {
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets is_originated_from_multiple_businesses
     *
     * @return bool
     */
    public function getIsOriginatedFromMultipleBusinesses()
    {
        return $this->container['is_originated_from_multiple_businesses'];
    }

    /**
     * Sets is_originated_from_multiple_businesses
     *
     * @param bool $is_originated_from_multiple_businesses is_originated_from_multiple_businesses
     *
     * @return $this
     */
    public function setIsOriginatedFromMultipleBusinesses($is_originated_from_multiple_businesses)
    {
        $this->container['is_originated_from_multiple_businesses'] = $is_originated_from_multiple_businesses;

        return $this;
    }

    /**
     * Gets municipality_by_devision
     *
     * @return string
     */
    public function getMunicipalityByDevision()
    {
        return $this->container['municipality_by_devision'];
    }

    /**
     * Sets municipality_by_devision
     *
     * @param string $municipality_by_devision municipality_by_devision
     *
     * @return $this
     */
    public function setMunicipalityByDevision($municipality_by_devision)
    {
        $this->container['municipality_by_devision'] = $municipality_by_devision;

        return $this;
    }

    /**
     * Gets parcel_number_by_devision
     *
     * @return string
     */
    public function getParcelNumberByDevision()
    {
        return $this->container['parcel_number_by_devision'];
    }

    /**
     * Sets parcel_number_by_devision
     *
     * @param string $parcel_number_by_devision parcel_number_by_devision
     *
     * @return $this
     */
    public function setParcelNumberByDevision($parcel_number_by_devision)
    {
        $this->container['parcel_number_by_devision'] = $parcel_number_by_devision;

        return $this;
    }

    /**
     * Gets section_by_devision
     *
     * @return string
     */
    public function getSectionByDevision()
    {
        return $this->container['section_by_devision'];
    }

    /**
     * Sets section_by_devision
     *
     * @param string $section_by_devision section_by_devision
     *
     * @return $this
     */
    public function setSectionByDevision($section_by_devision)
    {
        $this->container['section_by_devision'] = $section_by_devision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


