<?php
/**
 * ContactLinksSaveRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactLinksSaveRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactLinksSaveRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactLinksSaveRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_partner_link' => 'bool',
        'link_description' => 'string',
        'link_type' => 'string',
        'source_relation_id' => 'string',
        'target_relation_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_partner_link' => null,
        'link_description' => null,
        'link_type' => null,
        'source_relation_id' => 'guid',
        'target_relation_id' => 'guid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_partner_link' => 'isPartnerLink',
        'link_description' => 'linkDescription',
        'link_type' => 'linkType',
        'source_relation_id' => 'sourceRelationId',
        'target_relation_id' => 'targetRelationId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_partner_link' => 'setIsPartnerLink',
        'link_description' => 'setLinkDescription',
        'link_type' => 'setLinkType',
        'source_relation_id' => 'setSourceRelationId',
        'target_relation_id' => 'setTargetRelationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_partner_link' => 'getIsPartnerLink',
        'link_description' => 'getLinkDescription',
        'link_type' => 'getLinkType',
        'source_relation_id' => 'getSourceRelationId',
        'target_relation_id' => 'getTargetRelationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_partner_link'] = isset($data['is_partner_link']) ? $data['is_partner_link'] : null;
        $this->container['link_description'] = isset($data['link_description']) ? $data['link_description'] : null;
        $this->container['link_type'] = isset($data['link_type']) ? $data['link_type'] : null;
        $this->container['source_relation_id'] = isset($data['source_relation_id']) ? $data['source_relation_id'] : null;
        $this->container['target_relation_id'] = isset($data['target_relation_id']) ? $data['target_relation_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['is_partner_link'] === null) {
            $invalidProperties[] = "'is_partner_link' can't be null";
        }
        if ($this->container['source_relation_id'] === null) {
            $invalidProperties[] = "'source_relation_id' can't be null";
        }
        if ((mb_strlen($this->container['source_relation_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'source_relation_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['target_relation_id'] === null) {
            $invalidProperties[] = "'target_relation_id' can't be null";
        }
        if ((mb_strlen($this->container['target_relation_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'target_relation_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_partner_link
     *
     * @return bool
     */
    public function getIsPartnerLink()
    {
        return $this->container['is_partner_link'];
    }

    /**
     * Sets is_partner_link
     *
     * @param bool $is_partner_link is_partner_link
     *
     * @return $this
     */
    public function setIsPartnerLink($is_partner_link)
    {
        $this->container['is_partner_link'] = $is_partner_link;

        return $this;
    }

    /**
     * Gets link_description
     *
     * @return string
     */
    public function getLinkDescription()
    {
        return $this->container['link_description'];
    }

    /**
     * Sets link_description
     *
     * @param string $link_description link_description
     *
     * @return $this
     */
    public function setLinkDescription($link_description)
    {
        $this->container['link_description'] = $link_description;

        return $this;
    }

    /**
     * Gets link_type
     *
     * @return string
     */
    public function getLinkType()
    {
        return $this->container['link_type'];
    }

    /**
     * Sets link_type
     *
     * @param string $link_type link_type
     *
     * @return $this
     */
    public function setLinkType($link_type)
    {
        $this->container['link_type'] = $link_type;

        return $this;
    }

    /**
     * Gets source_relation_id
     *
     * @return string
     */
    public function getSourceRelationId()
    {
        return $this->container['source_relation_id'];
    }

    /**
     * Sets source_relation_id
     *
     * @param string $source_relation_id source_relation_id
     *
     * @return $this
     */
    public function setSourceRelationId($source_relation_id)
    {

        if ((mb_strlen($source_relation_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source_relation_id when calling ContactLinksSaveRequest., must be bigger than or equal to 1.');
        }

        $this->container['source_relation_id'] = $source_relation_id;

        return $this;
    }

    /**
     * Gets target_relation_id
     *
     * @return string
     */
    public function getTargetRelationId()
    {
        return $this->container['target_relation_id'];
    }

    /**
     * Sets target_relation_id
     *
     * @param string $target_relation_id target_relation_id
     *
     * @return $this
     */
    public function setTargetRelationId($target_relation_id)
    {

        if ((mb_strlen($target_relation_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $target_relation_id when calling ContactLinksSaveRequest., must be bigger than or equal to 1.');
        }

        $this->container['target_relation_id'] = $target_relation_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


