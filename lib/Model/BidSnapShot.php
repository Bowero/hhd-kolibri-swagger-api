<?php
/**
 * BidSnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * BidSnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BidSnapShot extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BidSnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bid_date_time' => '\DateTime',
        'valid_until' => '\DateTime',
        'linked_bid' => '\Swagger\Client\Model\LinkedBid',
        'linked_bids' => '\Swagger\Client\Model\LinkedBid[]',
        'amount' => 'float',
        'status' => '\Swagger\Client\Model\BidStatus',
        'type' => '\Swagger\Client\Model\BidType',
        'linked_relations' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'linked_created_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_modified_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_employee' => '\Swagger\Client\Model\LinkedEmployee',
        'accepted_date_time' => '\DateTime',
        'denied_date_time' => '\DateTime',
        'is_parent_bid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bid_date_time' => 'date-time',
        'valid_until' => 'date-time',
        'linked_bid' => null,
        'linked_bids' => null,
        'amount' => 'decimal',
        'status' => null,
        'type' => null,
        'linked_relations' => null,
        'linked_assignment' => null,
        'linked_created_by' => null,
        'linked_modified_by' => null,
        'linked_employee' => null,
        'accepted_date_time' => 'date-time',
        'denied_date_time' => 'date-time',
        'is_parent_bid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bid_date_time' => 'bidDateTime',
        'valid_until' => 'validUntil',
        'linked_bid' => 'linkedBid',
        'linked_bids' => 'linkedBids',
        'amount' => 'amount',
        'status' => 'status',
        'type' => 'type',
        'linked_relations' => 'linkedRelations',
        'linked_assignment' => 'linkedAssignment',
        'linked_created_by' => 'linkedCreatedBy',
        'linked_modified_by' => 'linkedModifiedBy',
        'linked_employee' => 'linkedEmployee',
        'accepted_date_time' => 'acceptedDateTime',
        'denied_date_time' => 'deniedDateTime',
        'is_parent_bid' => 'isParentBid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bid_date_time' => 'setBidDateTime',
        'valid_until' => 'setValidUntil',
        'linked_bid' => 'setLinkedBid',
        'linked_bids' => 'setLinkedBids',
        'amount' => 'setAmount',
        'status' => 'setStatus',
        'type' => 'setType',
        'linked_relations' => 'setLinkedRelations',
        'linked_assignment' => 'setLinkedAssignment',
        'linked_created_by' => 'setLinkedCreatedBy',
        'linked_modified_by' => 'setLinkedModifiedBy',
        'linked_employee' => 'setLinkedEmployee',
        'accepted_date_time' => 'setAcceptedDateTime',
        'denied_date_time' => 'setDeniedDateTime',
        'is_parent_bid' => 'setIsParentBid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bid_date_time' => 'getBidDateTime',
        'valid_until' => 'getValidUntil',
        'linked_bid' => 'getLinkedBid',
        'linked_bids' => 'getLinkedBids',
        'amount' => 'getAmount',
        'status' => 'getStatus',
        'type' => 'getType',
        'linked_relations' => 'getLinkedRelations',
        'linked_assignment' => 'getLinkedAssignment',
        'linked_created_by' => 'getLinkedCreatedBy',
        'linked_modified_by' => 'getLinkedModifiedBy',
        'linked_employee' => 'getLinkedEmployee',
        'accepted_date_time' => 'getAcceptedDateTime',
        'denied_date_time' => 'getDeniedDateTime',
        'is_parent_bid' => 'getIsParentBid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['bid_date_time'] = isset($data['bid_date_time']) ? $data['bid_date_time'] : null;
        $this->container['valid_until'] = isset($data['valid_until']) ? $data['valid_until'] : null;
        $this->container['linked_bid'] = isset($data['linked_bid']) ? $data['linked_bid'] : null;
        $this->container['linked_bids'] = isset($data['linked_bids']) ? $data['linked_bids'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['linked_relations'] = isset($data['linked_relations']) ? $data['linked_relations'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['linked_created_by'] = isset($data['linked_created_by']) ? $data['linked_created_by'] : null;
        $this->container['linked_modified_by'] = isset($data['linked_modified_by']) ? $data['linked_modified_by'] : null;
        $this->container['linked_employee'] = isset($data['linked_employee']) ? $data['linked_employee'] : null;
        $this->container['accepted_date_time'] = isset($data['accepted_date_time']) ? $data['accepted_date_time'] : null;
        $this->container['denied_date_time'] = isset($data['denied_date_time']) ? $data['denied_date_time'] : null;
        $this->container['is_parent_bid'] = isset($data['is_parent_bid']) ? $data['is_parent_bid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bid_date_time
     *
     * @return \DateTime
     */
    public function getBidDateTime()
    {
        return $this->container['bid_date_time'];
    }

    /**
     * Sets bid_date_time
     *
     * @param \DateTime $bid_date_time bid_date_time
     *
     * @return $this
     */
    public function setBidDateTime($bid_date_time)
    {
        $this->container['bid_date_time'] = $bid_date_time;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime $valid_until valid_until
     *
     * @return $this
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets linked_bid
     *
     * @return \Swagger\Client\Model\LinkedBid
     */
    public function getLinkedBid()
    {
        return $this->container['linked_bid'];
    }

    /**
     * Sets linked_bid
     *
     * @param \Swagger\Client\Model\LinkedBid $linked_bid linked_bid
     *
     * @return $this
     */
    public function setLinkedBid($linked_bid)
    {
        $this->container['linked_bid'] = $linked_bid;

        return $this;
    }

    /**
     * Gets linked_bids
     *
     * @return \Swagger\Client\Model\LinkedBid[]
     */
    public function getLinkedBids()
    {
        return $this->container['linked_bids'];
    }

    /**
     * Sets linked_bids
     *
     * @param \Swagger\Client\Model\LinkedBid[] $linked_bids linked_bids
     *
     * @return $this
     */
    public function setLinkedBids($linked_bids)
    {
        $this->container['linked_bids'] = $linked_bids;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\BidStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\BidStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\BidType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\BidType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets linked_relations
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedRelations()
    {
        return $this->container['linked_relations'];
    }

    /**
     * Sets linked_relations
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_relations linked_relations
     *
     * @return $this
     */
    public function setLinkedRelations($linked_relations)
    {
        $this->container['linked_relations'] = $linked_relations;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets linked_created_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedCreatedBy()
    {
        return $this->container['linked_created_by'];
    }

    /**
     * Sets linked_created_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_created_by linked_created_by
     *
     * @return $this
     */
    public function setLinkedCreatedBy($linked_created_by)
    {
        $this->container['linked_created_by'] = $linked_created_by;

        return $this;
    }

    /**
     * Gets linked_modified_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedModifiedBy()
    {
        return $this->container['linked_modified_by'];
    }

    /**
     * Sets linked_modified_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_modified_by linked_modified_by
     *
     * @return $this
     */
    public function setLinkedModifiedBy($linked_modified_by)
    {
        $this->container['linked_modified_by'] = $linked_modified_by;

        return $this;
    }

    /**
     * Gets linked_employee
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedEmployee()
    {
        return $this->container['linked_employee'];
    }

    /**
     * Sets linked_employee
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_employee linked_employee
     *
     * @return $this
     */
    public function setLinkedEmployee($linked_employee)
    {
        $this->container['linked_employee'] = $linked_employee;

        return $this;
    }

    /**
     * Gets accepted_date_time
     *
     * @return \DateTime
     */
    public function getAcceptedDateTime()
    {
        return $this->container['accepted_date_time'];
    }

    /**
     * Sets accepted_date_time
     *
     * @param \DateTime $accepted_date_time accepted_date_time
     *
     * @return $this
     */
    public function setAcceptedDateTime($accepted_date_time)
    {
        $this->container['accepted_date_time'] = $accepted_date_time;

        return $this;
    }

    /**
     * Gets denied_date_time
     *
     * @return \DateTime
     */
    public function getDeniedDateTime()
    {
        return $this->container['denied_date_time'];
    }

    /**
     * Sets denied_date_time
     *
     * @param \DateTime $denied_date_time denied_date_time
     *
     * @return $this
     */
    public function setDeniedDateTime($denied_date_time)
    {
        $this->container['denied_date_time'] = $denied_date_time;

        return $this;
    }

    /**
     * Gets is_parent_bid
     *
     * @return bool
     */
    public function getIsParentBid()
    {
        return $this->container['is_parent_bid'];
    }

    /**
     * Sets is_parent_bid
     *
     * @param bool $is_parent_bid is_parent_bid
     *
     * @return $this
     */
    public function setIsParentBid($is_parent_bid)
    {
        $this->container['is_parent_bid'] = $is_parent_bid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


