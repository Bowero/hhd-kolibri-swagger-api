<?php
/**
 * RelationsSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * RelationsSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelationsSearchRequest extends SearchRequest 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RelationsSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'filter_by_relation_group_ids' => 'string[]',
        'filter_by_relation_types' => '\Swagger\Client\Model\RelationType[]',
        'include_statistics' => 'bool',
        'include_back_office_employees' => 'bool',
        'order_by' => 'object',
        'relation_id' => 'string',
        'term_fields' => '\Swagger\Client\Model\RelationTermField[]',
        'culture' => 'string',
        'min_date_time_created' => '\DateTime',
        'max_date_time_created' => '\DateTime',
        'min_date_time_modified' => '\DateTime',
        'max_date_time_modified' => '\DateTime',
        'email_addresses' => 'string[]',
        'relation_ids' => 'string[]',
        'phone_number' => 'string',
        'has_phone_number' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'filter_by_relation_group_ids' => 'guid',
        'filter_by_relation_types' => null,
        'include_statistics' => null,
        'include_back_office_employees' => null,
        'order_by' => null,
        'relation_id' => 'guid',
        'term_fields' => null,
        'culture' => null,
        'min_date_time_created' => 'date-time',
        'max_date_time_created' => 'date-time',
        'min_date_time_modified' => 'date-time',
        'max_date_time_modified' => 'date-time',
        'email_addresses' => null,
        'relation_ids' => 'guid',
        'phone_number' => null,
        'has_phone_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filter_by_relation_group_ids' => 'filterByRelationGroupIds',
        'filter_by_relation_types' => 'filterByRelationTypes',
        'include_statistics' => 'includeStatistics',
        'include_back_office_employees' => 'includeBackOfficeEmployees',
        'order_by' => 'orderBy',
        'relation_id' => 'relationId',
        'term_fields' => 'termFields',
        'culture' => 'culture',
        'min_date_time_created' => 'minDateTimeCreated',
        'max_date_time_created' => 'maxDateTimeCreated',
        'min_date_time_modified' => 'minDateTimeModified',
        'max_date_time_modified' => 'maxDateTimeModified',
        'email_addresses' => 'emailAddresses',
        'relation_ids' => 'relationIds',
        'phone_number' => 'phoneNumber',
        'has_phone_number' => 'hasPhoneNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filter_by_relation_group_ids' => 'setFilterByRelationGroupIds',
        'filter_by_relation_types' => 'setFilterByRelationTypes',
        'include_statistics' => 'setIncludeStatistics',
        'include_back_office_employees' => 'setIncludeBackOfficeEmployees',
        'order_by' => 'setOrderBy',
        'relation_id' => 'setRelationId',
        'term_fields' => 'setTermFields',
        'culture' => 'setCulture',
        'min_date_time_created' => 'setMinDateTimeCreated',
        'max_date_time_created' => 'setMaxDateTimeCreated',
        'min_date_time_modified' => 'setMinDateTimeModified',
        'max_date_time_modified' => 'setMaxDateTimeModified',
        'email_addresses' => 'setEmailAddresses',
        'relation_ids' => 'setRelationIds',
        'phone_number' => 'setPhoneNumber',
        'has_phone_number' => 'setHasPhoneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filter_by_relation_group_ids' => 'getFilterByRelationGroupIds',
        'filter_by_relation_types' => 'getFilterByRelationTypes',
        'include_statistics' => 'getIncludeStatistics',
        'include_back_office_employees' => 'getIncludeBackOfficeEmployees',
        'order_by' => 'getOrderBy',
        'relation_id' => 'getRelationId',
        'term_fields' => 'getTermFields',
        'culture' => 'getCulture',
        'min_date_time_created' => 'getMinDateTimeCreated',
        'max_date_time_created' => 'getMaxDateTimeCreated',
        'min_date_time_modified' => 'getMinDateTimeModified',
        'max_date_time_modified' => 'getMaxDateTimeModified',
        'email_addresses' => 'getEmailAddresses',
        'relation_ids' => 'getRelationIds',
        'phone_number' => 'getPhoneNumber',
        'has_phone_number' => 'getHasPhoneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['filter_by_relation_group_ids'] = isset($data['filter_by_relation_group_ids']) ? $data['filter_by_relation_group_ids'] : null;
        $this->container['filter_by_relation_types'] = isset($data['filter_by_relation_types']) ? $data['filter_by_relation_types'] : null;
        $this->container['include_statistics'] = isset($data['include_statistics']) ? $data['include_statistics'] : null;
        $this->container['include_back_office_employees'] = isset($data['include_back_office_employees']) ? $data['include_back_office_employees'] : false;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['relation_id'] = isset($data['relation_id']) ? $data['relation_id'] : null;
        $this->container['term_fields'] = isset($data['term_fields']) ? $data['term_fields'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['min_date_time_created'] = isset($data['min_date_time_created']) ? $data['min_date_time_created'] : null;
        $this->container['max_date_time_created'] = isset($data['max_date_time_created']) ? $data['max_date_time_created'] : null;
        $this->container['min_date_time_modified'] = isset($data['min_date_time_modified']) ? $data['min_date_time_modified'] : null;
        $this->container['max_date_time_modified'] = isset($data['max_date_time_modified']) ? $data['max_date_time_modified'] : null;
        $this->container['email_addresses'] = isset($data['email_addresses']) ? $data['email_addresses'] : null;
        $this->container['relation_ids'] = isset($data['relation_ids']) ? $data['relation_ids'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['has_phone_number'] = isset($data['has_phone_number']) ? $data['has_phone_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['culture']) && (mb_strlen($this->container['culture']) > 5)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['culture']) && (mb_strlen($this->container['culture']) < 0)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filter_by_relation_group_ids
     *
     * @return string[]
     */
    public function getFilterByRelationGroupIds()
    {
        return $this->container['filter_by_relation_group_ids'];
    }

    /**
     * Sets filter_by_relation_group_ids
     *
     * @param string[] $filter_by_relation_group_ids Filter by selected relation group id's.
     *
     * @return $this
     */
    public function setFilterByRelationGroupIds($filter_by_relation_group_ids)
    {
        $this->container['filter_by_relation_group_ids'] = $filter_by_relation_group_ids;

        return $this;
    }

    /**
     * Gets filter_by_relation_types
     *
     * @return \Swagger\Client\Model\RelationType[]
     */
    public function getFilterByRelationTypes()
    {
        return $this->container['filter_by_relation_types'];
    }

    /**
     * Sets filter_by_relation_types
     *
     * @param \Swagger\Client\Model\RelationType[] $filter_by_relation_types Filter by selected relation types.
     *
     * @return $this
     */
    public function setFilterByRelationTypes($filter_by_relation_types)
    {
        $this->container['filter_by_relation_types'] = $filter_by_relation_types;

        return $this;
    }

    /**
     * Gets include_statistics
     *
     * @return bool
     */
    public function getIncludeStatistics()
    {
        return $this->container['include_statistics'];
    }

    /**
     * Sets include_statistics
     *
     * @param bool $include_statistics Return statistics, like lists of unique localities of the relations.
     *
     * @return $this
     */
    public function setIncludeStatistics($include_statistics)
    {
        $this->container['include_statistics'] = $include_statistics;

        return $this;
    }

    /**
     * Gets include_back_office_employees
     *
     * @return bool
     */
    public function getIncludeBackOfficeEmployees()
    {
        return $this->container['include_back_office_employees'];
    }

    /**
     * Sets include_back_office_employees
     *
     * @param bool $include_back_office_employees Include back office employees if FilterByRelationTypes contains employees.
     *
     * @return $this
     */
    public function setIncludeBackOfficeEmployees($include_back_office_employees)
    {
        $this->container['include_back_office_employees'] = $include_back_office_employees;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return object
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param object $order_by Order the results by the indicated relation field.
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets relation_id
     *
     * @return string
     */
    public function getRelationId()
    {
        return $this->container['relation_id'];
    }

    /**
     * Sets relation_id
     *
     * @param string $relation_id Search by a specific relation Id. Used to return/refresh one search result.
     *
     * @return $this
     */
    public function setRelationId($relation_id)
    {
        $this->container['relation_id'] = $relation_id;

        return $this;
    }

    /**
     * Gets term_fields
     *
     * @return \Swagger\Client\Model\RelationTermField[]
     */
    public function getTermFields()
    {
        return $this->container['term_fields'];
    }

    /**
     * Sets term_fields
     *
     * @param \Swagger\Client\Model\RelationTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case 'Term' is given.
     *
     * @return $this
     */
    public function setTermFields($term_fields)
    {
        $this->container['term_fields'] = $term_fields;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \"nl-NL\" and \"en-GB\". If no or an unsupported culture is given the default culture is used (\"nl-NL\").
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        if (!is_null($culture) && (mb_strlen($culture) > 5)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling RelationsSearchRequest., must be smaller than or equal to 5.');
        }
        if (!is_null($culture) && (mb_strlen($culture) < 0)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling RelationsSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets min_date_time_created
     *
     * @return \DateTime
     */
    public function getMinDateTimeCreated()
    {
        return $this->container['min_date_time_created'];
    }

    /**
     * Sets min_date_time_created
     *
     * @param \DateTime $min_date_time_created Filter by items created at or after the minimum datetime created.
     *
     * @return $this
     */
    public function setMinDateTimeCreated($min_date_time_created)
    {
        $this->container['min_date_time_created'] = $min_date_time_created;

        return $this;
    }

    /**
     * Gets max_date_time_created
     *
     * @return \DateTime
     */
    public function getMaxDateTimeCreated()
    {
        return $this->container['max_date_time_created'];
    }

    /**
     * Sets max_date_time_created
     *
     * @param \DateTime $max_date_time_created Filter by items created at or before the given maximum datetime created.
     *
     * @return $this
     */
    public function setMaxDateTimeCreated($max_date_time_created)
    {
        $this->container['max_date_time_created'] = $max_date_time_created;

        return $this;
    }

    /**
     * Gets min_date_time_modified
     *
     * @return \DateTime
     */
    public function getMinDateTimeModified()
    {
        return $this->container['min_date_time_modified'];
    }

    /**
     * Sets min_date_time_modified
     *
     * @param \DateTime $min_date_time_modified Filter by items created at or after the minimum datetime modified.
     *
     * @return $this
     */
    public function setMinDateTimeModified($min_date_time_modified)
    {
        $this->container['min_date_time_modified'] = $min_date_time_modified;

        return $this;
    }

    /**
     * Gets max_date_time_modified
     *
     * @return \DateTime
     */
    public function getMaxDateTimeModified()
    {
        return $this->container['max_date_time_modified'];
    }

    /**
     * Sets max_date_time_modified
     *
     * @param \DateTime $max_date_time_modified Filter by items modified at or before the given maximum datetime modified.
     *
     * @return $this
     */
    public function setMaxDateTimeModified($max_date_time_modified)
    {
        $this->container['max_date_time_modified'] = $max_date_time_modified;

        return $this;
    }

    /**
     * Gets email_addresses
     *
     * @return string[]
     */
    public function getEmailAddresses()
    {
        return $this->container['email_addresses'];
    }

    /**
     * Sets email_addresses
     *
     * @param string[] $email_addresses Filter by email address for relations. Multiple email addresses can be specified, all relations with any matching email address will be returned.
     *
     * @return $this
     */
    public function setEmailAddresses($email_addresses)
    {
        $this->container['email_addresses'] = $email_addresses;

        return $this;
    }

    /**
     * Gets relation_ids
     *
     * @return string[]
     */
    public function getRelationIds()
    {
        return $this->container['relation_ids'];
    }

    /**
     * Sets relation_ids
     *
     * @param string[] $relation_ids Search by specific task Ids. Used to return/refresh one search result.
     *
     * @return $this
     */
    public function setRelationIds($relation_ids)
    {
        $this->container['relation_ids'] = $relation_ids;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets has_phone_number
     *
     * @return bool
     */
    public function getHasPhoneNumber()
    {
        return $this->container['has_phone_number'];
    }

    /**
     * Sets has_phone_number
     *
     * @param bool $has_phone_number has_phone_number
     *
     * @return $this
     */
    public function setHasPhoneNumber($has_phone_number)
    {
        $this->container['has_phone_number'] = $has_phone_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


