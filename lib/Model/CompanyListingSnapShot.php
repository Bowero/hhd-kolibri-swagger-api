<?php
/**
 * CompanyListingSnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * CompanyListingSnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyListingSnapShot extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyListingSnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_active' => 'bool',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'linked_created_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_modified_by' => '\Swagger\Client\Model\LinkedEmployee',
        'real_estate_agency_id' => 'string',
        'situated_type' => '\Swagger\Client\Model\SituatedType',
        'use_surface' => 'float',
        'room_number' => 'int',
        'bedroom_number' => 'int',
        'parcel_surface' => 'float',
        'content' => 'int',
        'has_garden' => 'bool',
        'has_garage' => 'bool',
        'house_type' => '\Swagger\Client\Model\HouseType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_active' => null,
        'linked_assignment' => null,
        'linked_created_by' => null,
        'linked_modified_by' => null,
        'real_estate_agency_id' => 'guid',
        'situated_type' => null,
        'use_surface' => 'decimal',
        'room_number' => 'int32',
        'bedroom_number' => 'int32',
        'parcel_surface' => 'decimal',
        'content' => 'int32',
        'has_garden' => null,
        'has_garage' => null,
        'house_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_active' => 'isActive',
        'linked_assignment' => 'linkedAssignment',
        'linked_created_by' => 'linkedCreatedBy',
        'linked_modified_by' => 'linkedModifiedBy',
        'real_estate_agency_id' => 'realEstateAgencyId',
        'situated_type' => 'situatedType',
        'use_surface' => 'useSurface',
        'room_number' => 'roomNumber',
        'bedroom_number' => 'bedroomNumber',
        'parcel_surface' => 'parcelSurface',
        'content' => 'content',
        'has_garden' => 'hasGarden',
        'has_garage' => 'hasGarage',
        'house_type' => 'houseType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_active' => 'setIsActive',
        'linked_assignment' => 'setLinkedAssignment',
        'linked_created_by' => 'setLinkedCreatedBy',
        'linked_modified_by' => 'setLinkedModifiedBy',
        'real_estate_agency_id' => 'setRealEstateAgencyId',
        'situated_type' => 'setSituatedType',
        'use_surface' => 'setUseSurface',
        'room_number' => 'setRoomNumber',
        'bedroom_number' => 'setBedroomNumber',
        'parcel_surface' => 'setParcelSurface',
        'content' => 'setContent',
        'has_garden' => 'setHasGarden',
        'has_garage' => 'setHasGarage',
        'house_type' => 'setHouseType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_active' => 'getIsActive',
        'linked_assignment' => 'getLinkedAssignment',
        'linked_created_by' => 'getLinkedCreatedBy',
        'linked_modified_by' => 'getLinkedModifiedBy',
        'real_estate_agency_id' => 'getRealEstateAgencyId',
        'situated_type' => 'getSituatedType',
        'use_surface' => 'getUseSurface',
        'room_number' => 'getRoomNumber',
        'bedroom_number' => 'getBedroomNumber',
        'parcel_surface' => 'getParcelSurface',
        'content' => 'getContent',
        'has_garden' => 'getHasGarden',
        'has_garage' => 'getHasGarage',
        'house_type' => 'getHouseType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['linked_created_by'] = isset($data['linked_created_by']) ? $data['linked_created_by'] : null;
        $this->container['linked_modified_by'] = isset($data['linked_modified_by']) ? $data['linked_modified_by'] : null;
        $this->container['real_estate_agency_id'] = isset($data['real_estate_agency_id']) ? $data['real_estate_agency_id'] : null;
        $this->container['situated_type'] = isset($data['situated_type']) ? $data['situated_type'] : null;
        $this->container['use_surface'] = isset($data['use_surface']) ? $data['use_surface'] : null;
        $this->container['room_number'] = isset($data['room_number']) ? $data['room_number'] : null;
        $this->container['bedroom_number'] = isset($data['bedroom_number']) ? $data['bedroom_number'] : null;
        $this->container['parcel_surface'] = isset($data['parcel_surface']) ? $data['parcel_surface'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['has_garden'] = isset($data['has_garden']) ? $data['has_garden'] : null;
        $this->container['has_garage'] = isset($data['has_garage']) ? $data['has_garage'] : null;
        $this->container['house_type'] = isset($data['house_type']) ? $data['house_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets linked_created_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedCreatedBy()
    {
        return $this->container['linked_created_by'];
    }

    /**
     * Sets linked_created_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_created_by linked_created_by
     *
     * @return $this
     */
    public function setLinkedCreatedBy($linked_created_by)
    {
        $this->container['linked_created_by'] = $linked_created_by;

        return $this;
    }

    /**
     * Gets linked_modified_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedModifiedBy()
    {
        return $this->container['linked_modified_by'];
    }

    /**
     * Sets linked_modified_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_modified_by linked_modified_by
     *
     * @return $this
     */
    public function setLinkedModifiedBy($linked_modified_by)
    {
        $this->container['linked_modified_by'] = $linked_modified_by;

        return $this;
    }

    /**
     * Gets real_estate_agency_id
     *
     * @return string
     */
    public function getRealEstateAgencyId()
    {
        return $this->container['real_estate_agency_id'];
    }

    /**
     * Sets real_estate_agency_id
     *
     * @param string $real_estate_agency_id real_estate_agency_id
     *
     * @return $this
     */
    public function setRealEstateAgencyId($real_estate_agency_id)
    {
        $this->container['real_estate_agency_id'] = $real_estate_agency_id;

        return $this;
    }

    /**
     * Gets situated_type
     *
     * @return \Swagger\Client\Model\SituatedType
     */
    public function getSituatedType()
    {
        return $this->container['situated_type'];
    }

    /**
     * Sets situated_type
     *
     * @param \Swagger\Client\Model\SituatedType $situated_type situated_type
     *
     * @return $this
     */
    public function setSituatedType($situated_type)
    {
        $this->container['situated_type'] = $situated_type;

        return $this;
    }

    /**
     * Gets use_surface
     *
     * @return float
     */
    public function getUseSurface()
    {
        return $this->container['use_surface'];
    }

    /**
     * Sets use_surface
     *
     * @param float $use_surface use_surface
     *
     * @return $this
     */
    public function setUseSurface($use_surface)
    {
        $this->container['use_surface'] = $use_surface;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return int
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param int $room_number room_number
     *
     * @return $this
     */
    public function setRoomNumber($room_number)
    {
        $this->container['room_number'] = $room_number;

        return $this;
    }

    /**
     * Gets bedroom_number
     *
     * @return int
     */
    public function getBedroomNumber()
    {
        return $this->container['bedroom_number'];
    }

    /**
     * Sets bedroom_number
     *
     * @param int $bedroom_number bedroom_number
     *
     * @return $this
     */
    public function setBedroomNumber($bedroom_number)
    {
        $this->container['bedroom_number'] = $bedroom_number;

        return $this;
    }

    /**
     * Gets parcel_surface
     *
     * @return float
     */
    public function getParcelSurface()
    {
        return $this->container['parcel_surface'];
    }

    /**
     * Sets parcel_surface
     *
     * @param float $parcel_surface parcel_surface
     *
     * @return $this
     */
    public function setParcelSurface($parcel_surface)
    {
        $this->container['parcel_surface'] = $parcel_surface;

        return $this;
    }

    /**
     * Gets content
     *
     * @return int
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param int $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets has_garden
     *
     * @return bool
     */
    public function getHasGarden()
    {
        return $this->container['has_garden'];
    }

    /**
     * Sets has_garden
     *
     * @param bool $has_garden has_garden
     *
     * @return $this
     */
    public function setHasGarden($has_garden)
    {
        $this->container['has_garden'] = $has_garden;

        return $this;
    }

    /**
     * Gets has_garage
     *
     * @return bool
     */
    public function getHasGarage()
    {
        return $this->container['has_garage'];
    }

    /**
     * Sets has_garage
     *
     * @param bool $has_garage has_garage
     *
     * @return $this
     */
    public function setHasGarage($has_garage)
    {
        $this->container['has_garage'] = $has_garage;

        return $this;
    }

    /**
     * Gets house_type
     *
     * @return \Swagger\Client\Model\HouseType
     */
    public function getHouseType()
    {
        return $this->container['house_type'];
    }

    /**
     * Sets house_type
     *
     * @param \Swagger\Client\Model\HouseType $house_type house_type
     *
     * @return $this
     */
    public function setHouseType($house_type)
    {
        $this->container['house_type'] = $house_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


