<?php
/**
 * AcquisitionAssignment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * AcquisitionAssignment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AcquisitionAssignment extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AcquisitionAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assignment_phase' => '\Swagger\Client\Model\AssignmentPhase',
        'commission_gross' => 'float',
        'commission_percent' => 'float',
        'commission_gross_rent' => 'float',
        'commission_percent_rent' => 'float',
        'description' => 'string',
        'for_rent' => 'bool',
        'for_sale' => 'bool',
        'is_cancelled' => 'bool',
        'linked_acquisition_object_assignments' => '\Swagger\Client\Model\LinkedAssignment[]',
        'linked_applicants' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_appraisers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_clients' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_employee' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_financial_advisors' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_folder_tree' => '\Swagger\Client\Model\LinkedFolderTree',
        'linked_inspectors' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_notaries' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_occupants' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_offering_agencies' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_office' => '\Swagger\Client\Model\LinkedOffice',
        'linked_people_who_opted' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_photographers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_potentials' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_project_developers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_property_managers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_purchasing_brokers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_search_assignment' => '\Swagger\Client\Model\LinkedSearchAssignment[]',
        'linked_stylists' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_vendors' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_tenant_representation_brokers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_rental_agents' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_sales_brokers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_contact_persons' => '\Swagger\Client\Model\LinkedRelation[]',
        'mandate_date_time' => '\DateTime',
        'real_estate_group' => '\Swagger\Client\Model\RealEstateGroup',
        'title' => 'string',
        'public_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assignment_phase' => null,
        'commission_gross' => 'decimal',
        'commission_percent' => 'decimal',
        'commission_gross_rent' => 'decimal',
        'commission_percent_rent' => 'decimal',
        'description' => null,
        'for_rent' => null,
        'for_sale' => null,
        'is_cancelled' => null,
        'linked_acquisition_object_assignments' => null,
        'linked_applicants' => null,
        'linked_appraisers' => null,
        'linked_clients' => null,
        'linked_employee' => null,
        'linked_financial_advisors' => null,
        'linked_folder_tree' => null,
        'linked_inspectors' => null,
        'linked_notaries' => null,
        'linked_occupants' => null,
        'linked_offering_agencies' => null,
        'linked_office' => null,
        'linked_people_who_opted' => null,
        'linked_photographers' => null,
        'linked_potentials' => null,
        'linked_project_developers' => null,
        'linked_property_managers' => null,
        'linked_purchasing_brokers' => null,
        'linked_search_assignment' => null,
        'linked_stylists' => null,
        'linked_vendors' => null,
        'linked_tenant_representation_brokers' => null,
        'linked_rental_agents' => null,
        'linked_sales_brokers' => null,
        'linked_contact_persons' => null,
        'mandate_date_time' => 'date-time',
        'real_estate_group' => null,
        'title' => null,
        'public_reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignment_phase' => 'assignmentPhase',
        'commission_gross' => 'commissionGross',
        'commission_percent' => 'commissionPercent',
        'commission_gross_rent' => 'commissionGrossRent',
        'commission_percent_rent' => 'commissionPercentRent',
        'description' => 'description',
        'for_rent' => 'forRent',
        'for_sale' => 'forSale',
        'is_cancelled' => 'isCancelled',
        'linked_acquisition_object_assignments' => 'linkedAcquisitionObjectAssignments',
        'linked_applicants' => 'linkedApplicants',
        'linked_appraisers' => 'linkedAppraisers',
        'linked_clients' => 'linkedClients',
        'linked_employee' => 'linkedEmployee',
        'linked_financial_advisors' => 'linkedFinancialAdvisors',
        'linked_folder_tree' => 'linkedFolderTree',
        'linked_inspectors' => 'linkedInspectors',
        'linked_notaries' => 'linkedNotaries',
        'linked_occupants' => 'linkedOccupants',
        'linked_offering_agencies' => 'linkedOfferingAgencies',
        'linked_office' => 'linkedOffice',
        'linked_people_who_opted' => 'linkedPeopleWhoOpted',
        'linked_photographers' => 'linkedPhotographers',
        'linked_potentials' => 'linkedPotentials',
        'linked_project_developers' => 'linkedProjectDevelopers',
        'linked_property_managers' => 'linkedPropertyManagers',
        'linked_purchasing_brokers' => 'linkedPurchasingBrokers',
        'linked_search_assignment' => 'linkedSearchAssignment',
        'linked_stylists' => 'linkedStylists',
        'linked_vendors' => 'linkedVendors',
        'linked_tenant_representation_brokers' => 'linkedTenantRepresentationBrokers',
        'linked_rental_agents' => 'linkedRentalAgents',
        'linked_sales_brokers' => 'linkedSalesBrokers',
        'linked_contact_persons' => 'linkedContactPersons',
        'mandate_date_time' => 'mandateDateTime',
        'real_estate_group' => 'realEstateGroup',
        'title' => 'title',
        'public_reference' => 'publicReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignment_phase' => 'setAssignmentPhase',
        'commission_gross' => 'setCommissionGross',
        'commission_percent' => 'setCommissionPercent',
        'commission_gross_rent' => 'setCommissionGrossRent',
        'commission_percent_rent' => 'setCommissionPercentRent',
        'description' => 'setDescription',
        'for_rent' => 'setForRent',
        'for_sale' => 'setForSale',
        'is_cancelled' => 'setIsCancelled',
        'linked_acquisition_object_assignments' => 'setLinkedAcquisitionObjectAssignments',
        'linked_applicants' => 'setLinkedApplicants',
        'linked_appraisers' => 'setLinkedAppraisers',
        'linked_clients' => 'setLinkedClients',
        'linked_employee' => 'setLinkedEmployee',
        'linked_financial_advisors' => 'setLinkedFinancialAdvisors',
        'linked_folder_tree' => 'setLinkedFolderTree',
        'linked_inspectors' => 'setLinkedInspectors',
        'linked_notaries' => 'setLinkedNotaries',
        'linked_occupants' => 'setLinkedOccupants',
        'linked_offering_agencies' => 'setLinkedOfferingAgencies',
        'linked_office' => 'setLinkedOffice',
        'linked_people_who_opted' => 'setLinkedPeopleWhoOpted',
        'linked_photographers' => 'setLinkedPhotographers',
        'linked_potentials' => 'setLinkedPotentials',
        'linked_project_developers' => 'setLinkedProjectDevelopers',
        'linked_property_managers' => 'setLinkedPropertyManagers',
        'linked_purchasing_brokers' => 'setLinkedPurchasingBrokers',
        'linked_search_assignment' => 'setLinkedSearchAssignment',
        'linked_stylists' => 'setLinkedStylists',
        'linked_vendors' => 'setLinkedVendors',
        'linked_tenant_representation_brokers' => 'setLinkedTenantRepresentationBrokers',
        'linked_rental_agents' => 'setLinkedRentalAgents',
        'linked_sales_brokers' => 'setLinkedSalesBrokers',
        'linked_contact_persons' => 'setLinkedContactPersons',
        'mandate_date_time' => 'setMandateDateTime',
        'real_estate_group' => 'setRealEstateGroup',
        'title' => 'setTitle',
        'public_reference' => 'setPublicReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignment_phase' => 'getAssignmentPhase',
        'commission_gross' => 'getCommissionGross',
        'commission_percent' => 'getCommissionPercent',
        'commission_gross_rent' => 'getCommissionGrossRent',
        'commission_percent_rent' => 'getCommissionPercentRent',
        'description' => 'getDescription',
        'for_rent' => 'getForRent',
        'for_sale' => 'getForSale',
        'is_cancelled' => 'getIsCancelled',
        'linked_acquisition_object_assignments' => 'getLinkedAcquisitionObjectAssignments',
        'linked_applicants' => 'getLinkedApplicants',
        'linked_appraisers' => 'getLinkedAppraisers',
        'linked_clients' => 'getLinkedClients',
        'linked_employee' => 'getLinkedEmployee',
        'linked_financial_advisors' => 'getLinkedFinancialAdvisors',
        'linked_folder_tree' => 'getLinkedFolderTree',
        'linked_inspectors' => 'getLinkedInspectors',
        'linked_notaries' => 'getLinkedNotaries',
        'linked_occupants' => 'getLinkedOccupants',
        'linked_offering_agencies' => 'getLinkedOfferingAgencies',
        'linked_office' => 'getLinkedOffice',
        'linked_people_who_opted' => 'getLinkedPeopleWhoOpted',
        'linked_photographers' => 'getLinkedPhotographers',
        'linked_potentials' => 'getLinkedPotentials',
        'linked_project_developers' => 'getLinkedProjectDevelopers',
        'linked_property_managers' => 'getLinkedPropertyManagers',
        'linked_purchasing_brokers' => 'getLinkedPurchasingBrokers',
        'linked_search_assignment' => 'getLinkedSearchAssignment',
        'linked_stylists' => 'getLinkedStylists',
        'linked_vendors' => 'getLinkedVendors',
        'linked_tenant_representation_brokers' => 'getLinkedTenantRepresentationBrokers',
        'linked_rental_agents' => 'getLinkedRentalAgents',
        'linked_sales_brokers' => 'getLinkedSalesBrokers',
        'linked_contact_persons' => 'getLinkedContactPersons',
        'mandate_date_time' => 'getMandateDateTime',
        'real_estate_group' => 'getRealEstateGroup',
        'title' => 'getTitle',
        'public_reference' => 'getPublicReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['assignment_phase'] = isset($data['assignment_phase']) ? $data['assignment_phase'] : null;
        $this->container['commission_gross'] = isset($data['commission_gross']) ? $data['commission_gross'] : null;
        $this->container['commission_percent'] = isset($data['commission_percent']) ? $data['commission_percent'] : null;
        $this->container['commission_gross_rent'] = isset($data['commission_gross_rent']) ? $data['commission_gross_rent'] : null;
        $this->container['commission_percent_rent'] = isset($data['commission_percent_rent']) ? $data['commission_percent_rent'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['for_rent'] = isset($data['for_rent']) ? $data['for_rent'] : null;
        $this->container['for_sale'] = isset($data['for_sale']) ? $data['for_sale'] : null;
        $this->container['is_cancelled'] = isset($data['is_cancelled']) ? $data['is_cancelled'] : null;
        $this->container['linked_acquisition_object_assignments'] = isset($data['linked_acquisition_object_assignments']) ? $data['linked_acquisition_object_assignments'] : null;
        $this->container['linked_applicants'] = isset($data['linked_applicants']) ? $data['linked_applicants'] : null;
        $this->container['linked_appraisers'] = isset($data['linked_appraisers']) ? $data['linked_appraisers'] : null;
        $this->container['linked_clients'] = isset($data['linked_clients']) ? $data['linked_clients'] : null;
        $this->container['linked_employee'] = isset($data['linked_employee']) ? $data['linked_employee'] : null;
        $this->container['linked_financial_advisors'] = isset($data['linked_financial_advisors']) ? $data['linked_financial_advisors'] : null;
        $this->container['linked_folder_tree'] = isset($data['linked_folder_tree']) ? $data['linked_folder_tree'] : null;
        $this->container['linked_inspectors'] = isset($data['linked_inspectors']) ? $data['linked_inspectors'] : null;
        $this->container['linked_notaries'] = isset($data['linked_notaries']) ? $data['linked_notaries'] : null;
        $this->container['linked_occupants'] = isset($data['linked_occupants']) ? $data['linked_occupants'] : null;
        $this->container['linked_offering_agencies'] = isset($data['linked_offering_agencies']) ? $data['linked_offering_agencies'] : null;
        $this->container['linked_office'] = isset($data['linked_office']) ? $data['linked_office'] : null;
        $this->container['linked_people_who_opted'] = isset($data['linked_people_who_opted']) ? $data['linked_people_who_opted'] : null;
        $this->container['linked_photographers'] = isset($data['linked_photographers']) ? $data['linked_photographers'] : null;
        $this->container['linked_potentials'] = isset($data['linked_potentials']) ? $data['linked_potentials'] : null;
        $this->container['linked_project_developers'] = isset($data['linked_project_developers']) ? $data['linked_project_developers'] : null;
        $this->container['linked_property_managers'] = isset($data['linked_property_managers']) ? $data['linked_property_managers'] : null;
        $this->container['linked_purchasing_brokers'] = isset($data['linked_purchasing_brokers']) ? $data['linked_purchasing_brokers'] : null;
        $this->container['linked_search_assignment'] = isset($data['linked_search_assignment']) ? $data['linked_search_assignment'] : null;
        $this->container['linked_stylists'] = isset($data['linked_stylists']) ? $data['linked_stylists'] : null;
        $this->container['linked_vendors'] = isset($data['linked_vendors']) ? $data['linked_vendors'] : null;
        $this->container['linked_tenant_representation_brokers'] = isset($data['linked_tenant_representation_brokers']) ? $data['linked_tenant_representation_brokers'] : null;
        $this->container['linked_rental_agents'] = isset($data['linked_rental_agents']) ? $data['linked_rental_agents'] : null;
        $this->container['linked_sales_brokers'] = isset($data['linked_sales_brokers']) ? $data['linked_sales_brokers'] : null;
        $this->container['linked_contact_persons'] = isset($data['linked_contact_persons']) ? $data['linked_contact_persons'] : null;
        $this->container['mandate_date_time'] = isset($data['mandate_date_time']) ? $data['mandate_date_time'] : null;
        $this->container['real_estate_group'] = isset($data['real_estate_group']) ? $data['real_estate_group'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['public_reference'] = isset($data['public_reference']) ? $data['public_reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 1000)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignment_phase
     *
     * @return \Swagger\Client\Model\AssignmentPhase
     */
    public function getAssignmentPhase()
    {
        return $this->container['assignment_phase'];
    }

    /**
     * Sets assignment_phase
     *
     * @param \Swagger\Client\Model\AssignmentPhase $assignment_phase assignment_phase
     *
     * @return $this
     */
    public function setAssignmentPhase($assignment_phase)
    {
        $this->container['assignment_phase'] = $assignment_phase;

        return $this;
    }

    /**
     * Gets commission_gross
     *
     * @return float
     */
    public function getCommissionGross()
    {
        return $this->container['commission_gross'];
    }

    /**
     * Sets commission_gross
     *
     * @param float $commission_gross commission_gross
     *
     * @return $this
     */
    public function setCommissionGross($commission_gross)
    {
        $this->container['commission_gross'] = $commission_gross;

        return $this;
    }

    /**
     * Gets commission_percent
     *
     * @return float
     */
    public function getCommissionPercent()
    {
        return $this->container['commission_percent'];
    }

    /**
     * Sets commission_percent
     *
     * @param float $commission_percent commission_percent
     *
     * @return $this
     */
    public function setCommissionPercent($commission_percent)
    {
        $this->container['commission_percent'] = $commission_percent;

        return $this;
    }

    /**
     * Gets commission_gross_rent
     *
     * @return float
     */
    public function getCommissionGrossRent()
    {
        return $this->container['commission_gross_rent'];
    }

    /**
     * Sets commission_gross_rent
     *
     * @param float $commission_gross_rent commission_gross_rent
     *
     * @return $this
     */
    public function setCommissionGrossRent($commission_gross_rent)
    {
        $this->container['commission_gross_rent'] = $commission_gross_rent;

        return $this;
    }

    /**
     * Gets commission_percent_rent
     *
     * @return float
     */
    public function getCommissionPercentRent()
    {
        return $this->container['commission_percent_rent'];
    }

    /**
     * Sets commission_percent_rent
     *
     * @param float $commission_percent_rent commission_percent_rent
     *
     * @return $this
     */
    public function setCommissionPercentRent($commission_percent_rent)
    {
        $this->container['commission_percent_rent'] = $commission_percent_rent;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets for_rent
     *
     * @return bool
     */
    public function getForRent()
    {
        return $this->container['for_rent'];
    }

    /**
     * Sets for_rent
     *
     * @param bool $for_rent for_rent
     *
     * @return $this
     */
    public function setForRent($for_rent)
    {
        $this->container['for_rent'] = $for_rent;

        return $this;
    }

    /**
     * Gets for_sale
     *
     * @return bool
     */
    public function getForSale()
    {
        return $this->container['for_sale'];
    }

    /**
     * Sets for_sale
     *
     * @param bool $for_sale for_sale
     *
     * @return $this
     */
    public function setForSale($for_sale)
    {
        $this->container['for_sale'] = $for_sale;

        return $this;
    }

    /**
     * Gets is_cancelled
     *
     * @return bool
     */
    public function getIsCancelled()
    {
        return $this->container['is_cancelled'];
    }

    /**
     * Sets is_cancelled
     *
     * @param bool $is_cancelled is_cancelled
     *
     * @return $this
     */
    public function setIsCancelled($is_cancelled)
    {
        $this->container['is_cancelled'] = $is_cancelled;

        return $this;
    }

    /**
     * Gets linked_acquisition_object_assignments
     *
     * @return \Swagger\Client\Model\LinkedAssignment[]
     */
    public function getLinkedAcquisitionObjectAssignments()
    {
        return $this->container['linked_acquisition_object_assignments'];
    }

    /**
     * Sets linked_acquisition_object_assignments
     *
     * @param \Swagger\Client\Model\LinkedAssignment[] $linked_acquisition_object_assignments linked_acquisition_object_assignments
     *
     * @return $this
     */
    public function setLinkedAcquisitionObjectAssignments($linked_acquisition_object_assignments)
    {
        $this->container['linked_acquisition_object_assignments'] = $linked_acquisition_object_assignments;

        return $this;
    }

    /**
     * Gets linked_applicants
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedApplicants()
    {
        return $this->container['linked_applicants'];
    }

    /**
     * Sets linked_applicants
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_applicants linked_applicants
     *
     * @return $this
     */
    public function setLinkedApplicants($linked_applicants)
    {
        $this->container['linked_applicants'] = $linked_applicants;

        return $this;
    }

    /**
     * Gets linked_appraisers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedAppraisers()
    {
        return $this->container['linked_appraisers'];
    }

    /**
     * Sets linked_appraisers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_appraisers linked_appraisers
     *
     * @return $this
     */
    public function setLinkedAppraisers($linked_appraisers)
    {
        $this->container['linked_appraisers'] = $linked_appraisers;

        return $this;
    }

    /**
     * Gets linked_clients
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedClients()
    {
        return $this->container['linked_clients'];
    }

    /**
     * Sets linked_clients
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_clients linked_clients
     *
     * @return $this
     */
    public function setLinkedClients($linked_clients)
    {
        $this->container['linked_clients'] = $linked_clients;

        return $this;
    }

    /**
     * Gets linked_employee
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedEmployee()
    {
        return $this->container['linked_employee'];
    }

    /**
     * Sets linked_employee
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_employee linked_employee
     *
     * @return $this
     */
    public function setLinkedEmployee($linked_employee)
    {
        $this->container['linked_employee'] = $linked_employee;

        return $this;
    }

    /**
     * Gets linked_financial_advisors
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedFinancialAdvisors()
    {
        return $this->container['linked_financial_advisors'];
    }

    /**
     * Sets linked_financial_advisors
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_financial_advisors linked_financial_advisors
     *
     * @return $this
     */
    public function setLinkedFinancialAdvisors($linked_financial_advisors)
    {
        $this->container['linked_financial_advisors'] = $linked_financial_advisors;

        return $this;
    }

    /**
     * Gets linked_folder_tree
     *
     * @return \Swagger\Client\Model\LinkedFolderTree
     */
    public function getLinkedFolderTree()
    {
        return $this->container['linked_folder_tree'];
    }

    /**
     * Sets linked_folder_tree
     *
     * @param \Swagger\Client\Model\LinkedFolderTree $linked_folder_tree linked_folder_tree
     *
     * @return $this
     */
    public function setLinkedFolderTree($linked_folder_tree)
    {
        $this->container['linked_folder_tree'] = $linked_folder_tree;

        return $this;
    }

    /**
     * Gets linked_inspectors
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedInspectors()
    {
        return $this->container['linked_inspectors'];
    }

    /**
     * Sets linked_inspectors
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_inspectors linked_inspectors
     *
     * @return $this
     */
    public function setLinkedInspectors($linked_inspectors)
    {
        $this->container['linked_inspectors'] = $linked_inspectors;

        return $this;
    }

    /**
     * Gets linked_notaries
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedNotaries()
    {
        return $this->container['linked_notaries'];
    }

    /**
     * Sets linked_notaries
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_notaries linked_notaries
     *
     * @return $this
     */
    public function setLinkedNotaries($linked_notaries)
    {
        $this->container['linked_notaries'] = $linked_notaries;

        return $this;
    }

    /**
     * Gets linked_occupants
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedOccupants()
    {
        return $this->container['linked_occupants'];
    }

    /**
     * Sets linked_occupants
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_occupants linked_occupants
     *
     * @return $this
     */
    public function setLinkedOccupants($linked_occupants)
    {
        $this->container['linked_occupants'] = $linked_occupants;

        return $this;
    }

    /**
     * Gets linked_offering_agencies
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedOfferingAgencies()
    {
        return $this->container['linked_offering_agencies'];
    }

    /**
     * Sets linked_offering_agencies
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_offering_agencies linked_offering_agencies
     *
     * @return $this
     */
    public function setLinkedOfferingAgencies($linked_offering_agencies)
    {
        $this->container['linked_offering_agencies'] = $linked_offering_agencies;

        return $this;
    }

    /**
     * Gets linked_office
     *
     * @return \Swagger\Client\Model\LinkedOffice
     */
    public function getLinkedOffice()
    {
        return $this->container['linked_office'];
    }

    /**
     * Sets linked_office
     *
     * @param \Swagger\Client\Model\LinkedOffice $linked_office linked_office
     *
     * @return $this
     */
    public function setLinkedOffice($linked_office)
    {
        $this->container['linked_office'] = $linked_office;

        return $this;
    }

    /**
     * Gets linked_people_who_opted
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPeopleWhoOpted()
    {
        return $this->container['linked_people_who_opted'];
    }

    /**
     * Sets linked_people_who_opted
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_people_who_opted linked_people_who_opted
     *
     * @return $this
     */
    public function setLinkedPeopleWhoOpted($linked_people_who_opted)
    {
        $this->container['linked_people_who_opted'] = $linked_people_who_opted;

        return $this;
    }

    /**
     * Gets linked_photographers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPhotographers()
    {
        return $this->container['linked_photographers'];
    }

    /**
     * Sets linked_photographers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_photographers linked_photographers
     *
     * @return $this
     */
    public function setLinkedPhotographers($linked_photographers)
    {
        $this->container['linked_photographers'] = $linked_photographers;

        return $this;
    }

    /**
     * Gets linked_potentials
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPotentials()
    {
        return $this->container['linked_potentials'];
    }

    /**
     * Sets linked_potentials
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_potentials linked_potentials
     *
     * @return $this
     */
    public function setLinkedPotentials($linked_potentials)
    {
        $this->container['linked_potentials'] = $linked_potentials;

        return $this;
    }

    /**
     * Gets linked_project_developers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedProjectDevelopers()
    {
        return $this->container['linked_project_developers'];
    }

    /**
     * Sets linked_project_developers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_project_developers linked_project_developers
     *
     * @return $this
     */
    public function setLinkedProjectDevelopers($linked_project_developers)
    {
        $this->container['linked_project_developers'] = $linked_project_developers;

        return $this;
    }

    /**
     * Gets linked_property_managers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPropertyManagers()
    {
        return $this->container['linked_property_managers'];
    }

    /**
     * Sets linked_property_managers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_property_managers linked_property_managers
     *
     * @return $this
     */
    public function setLinkedPropertyManagers($linked_property_managers)
    {
        $this->container['linked_property_managers'] = $linked_property_managers;

        return $this;
    }

    /**
     * Gets linked_purchasing_brokers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPurchasingBrokers()
    {
        return $this->container['linked_purchasing_brokers'];
    }

    /**
     * Sets linked_purchasing_brokers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_purchasing_brokers linked_purchasing_brokers
     *
     * @return $this
     */
    public function setLinkedPurchasingBrokers($linked_purchasing_brokers)
    {
        $this->container['linked_purchasing_brokers'] = $linked_purchasing_brokers;

        return $this;
    }

    /**
     * Gets linked_search_assignment
     *
     * @return \Swagger\Client\Model\LinkedSearchAssignment[]
     */
    public function getLinkedSearchAssignment()
    {
        return $this->container['linked_search_assignment'];
    }

    /**
     * Sets linked_search_assignment
     *
     * @param \Swagger\Client\Model\LinkedSearchAssignment[] $linked_search_assignment linked_search_assignment
     *
     * @return $this
     */
    public function setLinkedSearchAssignment($linked_search_assignment)
    {
        $this->container['linked_search_assignment'] = $linked_search_assignment;

        return $this;
    }

    /**
     * Gets linked_stylists
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedStylists()
    {
        return $this->container['linked_stylists'];
    }

    /**
     * Sets linked_stylists
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_stylists linked_stylists
     *
     * @return $this
     */
    public function setLinkedStylists($linked_stylists)
    {
        $this->container['linked_stylists'] = $linked_stylists;

        return $this;
    }

    /**
     * Gets linked_vendors
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedVendors()
    {
        return $this->container['linked_vendors'];
    }

    /**
     * Sets linked_vendors
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_vendors linked_vendors
     *
     * @return $this
     */
    public function setLinkedVendors($linked_vendors)
    {
        $this->container['linked_vendors'] = $linked_vendors;

        return $this;
    }

    /**
     * Gets linked_tenant_representation_brokers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedTenantRepresentationBrokers()
    {
        return $this->container['linked_tenant_representation_brokers'];
    }

    /**
     * Sets linked_tenant_representation_brokers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_tenant_representation_brokers linked_tenant_representation_brokers
     *
     * @return $this
     */
    public function setLinkedTenantRepresentationBrokers($linked_tenant_representation_brokers)
    {
        $this->container['linked_tenant_representation_brokers'] = $linked_tenant_representation_brokers;

        return $this;
    }

    /**
     * Gets linked_rental_agents
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedRentalAgents()
    {
        return $this->container['linked_rental_agents'];
    }

    /**
     * Sets linked_rental_agents
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_rental_agents linked_rental_agents
     *
     * @return $this
     */
    public function setLinkedRentalAgents($linked_rental_agents)
    {
        $this->container['linked_rental_agents'] = $linked_rental_agents;

        return $this;
    }

    /**
     * Gets linked_sales_brokers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedSalesBrokers()
    {
        return $this->container['linked_sales_brokers'];
    }

    /**
     * Sets linked_sales_brokers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_sales_brokers linked_sales_brokers
     *
     * @return $this
     */
    public function setLinkedSalesBrokers($linked_sales_brokers)
    {
        $this->container['linked_sales_brokers'] = $linked_sales_brokers;

        return $this;
    }

    /**
     * Gets linked_contact_persons
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedContactPersons()
    {
        return $this->container['linked_contact_persons'];
    }

    /**
     * Sets linked_contact_persons
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_contact_persons linked_contact_persons
     *
     * @return $this
     */
    public function setLinkedContactPersons($linked_contact_persons)
    {
        $this->container['linked_contact_persons'] = $linked_contact_persons;

        return $this;
    }

    /**
     * Gets mandate_date_time
     *
     * @return \DateTime
     */
    public function getMandateDateTime()
    {
        return $this->container['mandate_date_time'];
    }

    /**
     * Sets mandate_date_time
     *
     * @param \DateTime $mandate_date_time mandate_date_time
     *
     * @return $this
     */
    public function setMandateDateTime($mandate_date_time)
    {
        $this->container['mandate_date_time'] = $mandate_date_time;

        return $this;
    }

    /**
     * Gets real_estate_group
     *
     * @return \Swagger\Client\Model\RealEstateGroup
     */
    public function getRealEstateGroup()
    {
        return $this->container['real_estate_group'];
    }

    /**
     * Sets real_estate_group
     *
     * @param \Swagger\Client\Model\RealEstateGroup $real_estate_group real_estate_group
     *
     * @return $this
     */
    public function setRealEstateGroup($real_estate_group)
    {
        $this->container['real_estate_group'] = $real_estate_group;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $title when calling AcquisitionAssignment., must be smaller than or equal to 1000.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets public_reference
     *
     * @return string
     */
    public function getPublicReference()
    {
        return $this->container['public_reference'];
    }

    /**
     * Sets public_reference
     *
     * @param string $public_reference public_reference
     *
     * @return $this
     */
    public function setPublicReference($public_reference)
    {
        $this->container['public_reference'] = $public_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


