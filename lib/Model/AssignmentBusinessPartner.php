<?php
/**
 * AssignmentBusinessPartner
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AssignmentBusinessPartner Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssignmentBusinessPartner implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssignmentBusinessPartner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'association_info' => '\Swagger\Client\Model\RealEstateAssociationInfo',
        'association_info_alt' => '\Swagger\Client\Model\RealEstateAssociationInfo',
        'display_name' => 'string',
        'email_address' => 'string',
        'phone_number' => 'string',
        'postal_address' => '\Swagger\Client\Model\Address',
        'visit_address' => '\Swagger\Client\Model\Address',
        'web_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'association_info' => null,
        'association_info_alt' => null,
        'display_name' => null,
        'email_address' => null,
        'phone_number' => null,
        'postal_address' => null,
        'visit_address' => null,
        'web_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'association_info' => 'associationInfo',
        'association_info_alt' => 'associationInfoAlt',
        'display_name' => 'displayName',
        'email_address' => 'emailAddress',
        'phone_number' => 'phoneNumber',
        'postal_address' => 'postalAddress',
        'visit_address' => 'visitAddress',
        'web_address' => 'webAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'association_info' => 'setAssociationInfo',
        'association_info_alt' => 'setAssociationInfoAlt',
        'display_name' => 'setDisplayName',
        'email_address' => 'setEmailAddress',
        'phone_number' => 'setPhoneNumber',
        'postal_address' => 'setPostalAddress',
        'visit_address' => 'setVisitAddress',
        'web_address' => 'setWebAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'association_info' => 'getAssociationInfo',
        'association_info_alt' => 'getAssociationInfoAlt',
        'display_name' => 'getDisplayName',
        'email_address' => 'getEmailAddress',
        'phone_number' => 'getPhoneNumber',
        'postal_address' => 'getPostalAddress',
        'visit_address' => 'getVisitAddress',
        'web_address' => 'getWebAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['association_info'] = isset($data['association_info']) ? $data['association_info'] : null;
        $this->container['association_info_alt'] = isset($data['association_info_alt']) ? $data['association_info_alt'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['postal_address'] = isset($data['postal_address']) ? $data['postal_address'] : null;
        $this->container['visit_address'] = isset($data['visit_address']) ? $data['visit_address'] : null;
        $this->container['web_address'] = isset($data['web_address']) ? $data['web_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets association_info
     *
     * @return \Swagger\Client\Model\RealEstateAssociationInfo
     */
    public function getAssociationInfo()
    {
        return $this->container['association_info'];
    }

    /**
     * Sets association_info
     *
     * @param \Swagger\Client\Model\RealEstateAssociationInfo $association_info association_info
     *
     * @return $this
     */
    public function setAssociationInfo($association_info)
    {
        $this->container['association_info'] = $association_info;

        return $this;
    }

    /**
     * Gets association_info_alt
     *
     * @return \Swagger\Client\Model\RealEstateAssociationInfo
     */
    public function getAssociationInfoAlt()
    {
        return $this->container['association_info_alt'];
    }

    /**
     * Sets association_info_alt
     *
     * @param \Swagger\Client\Model\RealEstateAssociationInfo $association_info_alt association_info_alt
     *
     * @return $this
     */
    public function setAssociationInfoAlt($association_info_alt)
    {
        $this->container['association_info_alt'] = $association_info_alt;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \Swagger\Client\Model\Address $postal_address postal_address
     *
     * @return $this
     */
    public function setPostalAddress($postal_address)
    {
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets visit_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getVisitAddress()
    {
        return $this->container['visit_address'];
    }

    /**
     * Sets visit_address
     *
     * @param \Swagger\Client\Model\Address $visit_address visit_address
     *
     * @return $this
     */
    public function setVisitAddress($visit_address)
    {
        $this->container['visit_address'] = $visit_address;

        return $this;
    }

    /**
     * Gets web_address
     *
     * @return string
     */
    public function getWebAddress()
    {
        return $this->container['web_address'];
    }

    /**
     * Sets web_address
     *
     * @param string $web_address web_address
     *
     * @return $this
     */
    public function setWebAddress($web_address)
    {
        $this->container['web_address'] = $web_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


