<?php
/**
 * ObjectTypeAssignment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ObjectTypeAssignment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ObjectTypeAssignment extends BaseAssignment 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ObjectTypeAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount_free_units' => 'int',
        'amount_units' => 'int',
        'building_start_date_parts' => 'bool',
        'hide_building_start_date' => 'bool',
        'linked_employee' => '\Swagger\Client\Model\LinkedEmployee',
        'building_start_text' => '\Swagger\Client\Model\TranslatedText[]',
        'building_type' => '\Swagger\Client\Model\BuildingType',
        'building_type_start' => '\DateTime',
        'current_destination' => '\Swagger\Client\Model\TranslatedText[]',
        'current_usage' => '\Swagger\Client\Model\TranslatedText[]',
        'description' => '\Swagger\Client\Model\TranslatedText[]',
        'delivery_start' => '\DateTime',
        'delivery_start_date_parts' => 'bool',
        'dimensions_range' => '\Swagger\Client\Model\DimensionsRange',
        'hide_delivery_start_date' => 'bool',
        'delivery_start_text' => '\Swagger\Client\Model\TranslatedText[]',
        'insulation_types' => '\Swagger\Client\Model\InsulationType[]',
        'location_places' => '\Swagger\Client\Model\LocationPlace[]',
        'maintenance_inside' => '\Swagger\Client\Model\Maintenance',
        'maintenance_outside' => '\Swagger\Client\Model\Maintenance',
        'parking_facilities' => '\Swagger\Client\Model\TypeOfParkingFacility[]',
        'roof' => '\Swagger\Client\Model\Roof',
        'sale_start' => '\DateTime',
        'sale_start_date_parts' => 'bool',
        'hide_sale_start_date' => 'bool',
        'sale_start_text' => '\Swagger\Client\Model\TranslatedText[]',
        'parcel_surface' => '\Swagger\Client\Model\DimensionsRange',
        'number_of_bath_rooms' => 'int',
        'number_of_floors' => 'int',
        'number_of_showers' => 'int',
        'number_of_rooms' => 'int',
        'number_of_kitchens' => 'int',
        'number_of_bed_rooms' => 'int',
        'number_of_toilets' => 'int',
        'number_of_garages' => 'int',
        'number_of_gardens' => 'int',
        'year_of_construction' => '\Swagger\Client\Model\YearOfConstruction',
        'floors' => '\Swagger\Client\Model\Floor[]',
        'garages' => '\Swagger\Client\Model\Garage[]',
        'gardens' => '\Swagger\Client\Model\Garden[]',
        'comfort_quality' => '\Swagger\Client\Model\ComfortQuality',
        'boiler_year_of_construction' => 'int',
        'boiler_type' => 'string',
        'external_storage' => '\Swagger\Client\Model\DimensionsRange',
        'building_related_outdoor_space' => '\Swagger\Client\Model\DimensionsRange',
        'usable_area' => '\Swagger\Client\Model\DimensionsRange',
        'contents' => '\Swagger\Client\Model\DimensionsRange',
        'in_park' => 'bool',
        'has_combi_boiler' => 'bool',
        'insulation_types_barn_storage' => '\Swagger\Client\Model\InsulationType[]',
        'is_permanently_inhabited' => 'bool',
        'is_office_space_available' => 'bool',
        'is_recreational' => 'bool',
        'is_barn_storage_available' => 'bool',
        'is_building_ready' => 'bool',
        'boiler_fuel' => '\Swagger\Client\Model\EnergySource',
        'boiler_property' => '\Swagger\Client\Model\Ownership',
        'other_inside_spaces' => '\Swagger\Client\Model\DimensionsRange',
        'warm_water_types' => '\Swagger\Client\Model\HeatingWaterMethod[]',
        'storage_room_type' => '\Swagger\Client\Model\StorageRoomType',
        'type_code_house' => '\Swagger\Client\Model\TypeCodeHouse',
        'heating' => '\Swagger\Client\Model\HeatingMethod[]',
        'storage_has_electra' => 'bool',
        'storage_has_heating' => 'bool',
        'storage_has_attic' => 'bool',
        'storage_has_water' => 'bool',
        'residential_facilities' => '\Swagger\Client\Model\ResidentialFacility[]',
        'living_room_surface' => '\Swagger\Client\Model\DimensionsRange',
        'has_open_porch' => 'bool',
        'is_owners_association_checklist_available' => 'bool',
        'is_owners_association_registered_kv_k' => 'bool',
        'has_owners_association_yearly_meeting' => 'bool',
        'has_owners_association_periodic_contribution' => 'bool',
        'has_owners_association_reserve_fund' => 'bool',
        'has_owners_association_maintenance_expectations' => 'bool',
        'has_owners_association_multiple_years_maintenance_plan' => 'bool',
        'has_owners_association_buildings_insurance' => 'bool',
        'apartment_characteristic' => '\Swagger\Client\Model\ApartmentCharacteristic',
        'apartment_sort' => '\Swagger\Client\Model\ApartmentSort',
        'floor_level' => 'int',
        'house_characteristic' => '\Swagger\Client\Model\HouseCharacteristic',
        'house_sort' => '\Swagger\Client\Model\HouseSort',
        'house_type' => '\Swagger\Client\Model\HouseType',
        'type_part' => '\Swagger\Client\Model\TypePART',
        'linked_project_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'linked_folder_tree' => '\Swagger\Client\Model\LinkedFolderTree',
        'linked_office' => '\Swagger\Client\Model\LinkedOffice'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount_free_units' => 'int32',
        'amount_units' => 'int32',
        'building_start_date_parts' => null,
        'hide_building_start_date' => null,
        'linked_employee' => null,
        'building_start_text' => null,
        'building_type' => null,
        'building_type_start' => 'date-time',
        'current_destination' => null,
        'current_usage' => null,
        'description' => null,
        'delivery_start' => 'date-time',
        'delivery_start_date_parts' => null,
        'dimensions_range' => null,
        'hide_delivery_start_date' => null,
        'delivery_start_text' => null,
        'insulation_types' => null,
        'location_places' => null,
        'maintenance_inside' => null,
        'maintenance_outside' => null,
        'parking_facilities' => null,
        'roof' => null,
        'sale_start' => 'date-time',
        'sale_start_date_parts' => null,
        'hide_sale_start_date' => null,
        'sale_start_text' => null,
        'parcel_surface' => null,
        'number_of_bath_rooms' => 'int32',
        'number_of_floors' => 'int32',
        'number_of_showers' => 'int32',
        'number_of_rooms' => 'int32',
        'number_of_kitchens' => 'int32',
        'number_of_bed_rooms' => 'int32',
        'number_of_toilets' => 'int32',
        'number_of_garages' => 'int32',
        'number_of_gardens' => 'int32',
        'year_of_construction' => null,
        'floors' => null,
        'garages' => null,
        'gardens' => null,
        'comfort_quality' => null,
        'boiler_year_of_construction' => 'int32',
        'boiler_type' => null,
        'external_storage' => null,
        'building_related_outdoor_space' => null,
        'usable_area' => null,
        'contents' => null,
        'in_park' => null,
        'has_combi_boiler' => null,
        'insulation_types_barn_storage' => null,
        'is_permanently_inhabited' => null,
        'is_office_space_available' => null,
        'is_recreational' => null,
        'is_barn_storage_available' => null,
        'is_building_ready' => null,
        'boiler_fuel' => null,
        'boiler_property' => null,
        'other_inside_spaces' => null,
        'warm_water_types' => null,
        'storage_room_type' => null,
        'type_code_house' => null,
        'heating' => null,
        'storage_has_electra' => null,
        'storage_has_heating' => null,
        'storage_has_attic' => null,
        'storage_has_water' => null,
        'residential_facilities' => null,
        'living_room_surface' => null,
        'has_open_porch' => null,
        'is_owners_association_checklist_available' => null,
        'is_owners_association_registered_kv_k' => null,
        'has_owners_association_yearly_meeting' => null,
        'has_owners_association_periodic_contribution' => null,
        'has_owners_association_reserve_fund' => null,
        'has_owners_association_maintenance_expectations' => null,
        'has_owners_association_multiple_years_maintenance_plan' => null,
        'has_owners_association_buildings_insurance' => null,
        'apartment_characteristic' => null,
        'apartment_sort' => null,
        'floor_level' => 'int32',
        'house_characteristic' => null,
        'house_sort' => null,
        'house_type' => null,
        'type_part' => null,
        'linked_project_assignment' => null,
        'linked_folder_tree' => null,
        'linked_office' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_free_units' => 'amountFreeUnits',
        'amount_units' => 'amountUnits',
        'building_start_date_parts' => 'buildingStartDateParts',
        'hide_building_start_date' => 'hideBuildingStartDate',
        'linked_employee' => 'linkedEmployee',
        'building_start_text' => 'buildingStartText',
        'building_type' => 'buildingType',
        'building_type_start' => 'buildingTypeStart',
        'current_destination' => 'currentDestination',
        'current_usage' => 'currentUsage',
        'description' => 'description',
        'delivery_start' => 'deliveryStart',
        'delivery_start_date_parts' => 'deliveryStartDateParts',
        'dimensions_range' => 'dimensionsRange',
        'hide_delivery_start_date' => 'hideDeliveryStartDate',
        'delivery_start_text' => 'deliveryStartText',
        'insulation_types' => 'insulationTypes',
        'location_places' => 'locationPlaces',
        'maintenance_inside' => 'maintenanceInside',
        'maintenance_outside' => 'maintenanceOutside',
        'parking_facilities' => 'parkingFacilities',
        'roof' => 'roof',
        'sale_start' => 'saleStart',
        'sale_start_date_parts' => 'saleStartDateParts',
        'hide_sale_start_date' => 'hideSaleStartDate',
        'sale_start_text' => 'saleStartText',
        'parcel_surface' => 'parcelSurface',
        'number_of_bath_rooms' => 'numberOfBathRooms',
        'number_of_floors' => 'numberOfFloors',
        'number_of_showers' => 'numberOfShowers',
        'number_of_rooms' => 'numberOfRooms',
        'number_of_kitchens' => 'numberOfKitchens',
        'number_of_bed_rooms' => 'numberOfBedRooms',
        'number_of_toilets' => 'numberOfToilets',
        'number_of_garages' => 'numberOfGarages',
        'number_of_gardens' => 'numberOfGardens',
        'year_of_construction' => 'yearOfConstruction',
        'floors' => 'floors',
        'garages' => 'garages',
        'gardens' => 'gardens',
        'comfort_quality' => 'comfortQuality',
        'boiler_year_of_construction' => 'boilerYearOfConstruction',
        'boiler_type' => 'boilerType',
        'external_storage' => 'externalStorage',
        'building_related_outdoor_space' => 'buildingRelatedOutdoorSpace',
        'usable_area' => 'usableArea',
        'contents' => 'contents',
        'in_park' => 'inPark',
        'has_combi_boiler' => 'hasCombiBoiler',
        'insulation_types_barn_storage' => 'insulationTypesBarnStorage',
        'is_permanently_inhabited' => 'isPermanentlyInhabited',
        'is_office_space_available' => 'isOfficeSpaceAvailable',
        'is_recreational' => 'isRecreational',
        'is_barn_storage_available' => 'isBarnStorageAvailable',
        'is_building_ready' => 'isBuildingReady',
        'boiler_fuel' => 'boilerFuel',
        'boiler_property' => 'boilerProperty',
        'other_inside_spaces' => 'otherInsideSpaces',
        'warm_water_types' => 'warmWaterTypes',
        'storage_room_type' => 'storageRoomType',
        'type_code_house' => 'typeCodeHouse',
        'heating' => 'heating',
        'storage_has_electra' => 'storageHasElectra',
        'storage_has_heating' => 'storageHasHeating',
        'storage_has_attic' => 'storageHasAttic',
        'storage_has_water' => 'storageHasWater',
        'residential_facilities' => 'residentialFacilities',
        'living_room_surface' => 'livingRoomSurface',
        'has_open_porch' => 'hasOpenPorch',
        'is_owners_association_checklist_available' => 'isOwnersAssociationChecklistAvailable',
        'is_owners_association_registered_kv_k' => 'isOwnersAssociationRegisteredKvK',
        'has_owners_association_yearly_meeting' => 'hasOwnersAssociationYearlyMeeting',
        'has_owners_association_periodic_contribution' => 'hasOwnersAssociationPeriodicContribution',
        'has_owners_association_reserve_fund' => 'hasOwnersAssociationReserveFund',
        'has_owners_association_maintenance_expectations' => 'hasOwnersAssociationMaintenanceExpectations',
        'has_owners_association_multiple_years_maintenance_plan' => 'hasOwnersAssociationMultipleYearsMaintenancePlan',
        'has_owners_association_buildings_insurance' => 'hasOwnersAssociationBuildingsInsurance',
        'apartment_characteristic' => 'apartmentCharacteristic',
        'apartment_sort' => 'apartmentSort',
        'floor_level' => 'floorLevel',
        'house_characteristic' => 'houseCharacteristic',
        'house_sort' => 'houseSort',
        'house_type' => 'houseType',
        'type_part' => 'typePART',
        'linked_project_assignment' => 'linkedProjectAssignment',
        'linked_folder_tree' => 'linkedFolderTree',
        'linked_office' => 'linkedOffice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_free_units' => 'setAmountFreeUnits',
        'amount_units' => 'setAmountUnits',
        'building_start_date_parts' => 'setBuildingStartDateParts',
        'hide_building_start_date' => 'setHideBuildingStartDate',
        'linked_employee' => 'setLinkedEmployee',
        'building_start_text' => 'setBuildingStartText',
        'building_type' => 'setBuildingType',
        'building_type_start' => 'setBuildingTypeStart',
        'current_destination' => 'setCurrentDestination',
        'current_usage' => 'setCurrentUsage',
        'description' => 'setDescription',
        'delivery_start' => 'setDeliveryStart',
        'delivery_start_date_parts' => 'setDeliveryStartDateParts',
        'dimensions_range' => 'setDimensionsRange',
        'hide_delivery_start_date' => 'setHideDeliveryStartDate',
        'delivery_start_text' => 'setDeliveryStartText',
        'insulation_types' => 'setInsulationTypes',
        'location_places' => 'setLocationPlaces',
        'maintenance_inside' => 'setMaintenanceInside',
        'maintenance_outside' => 'setMaintenanceOutside',
        'parking_facilities' => 'setParkingFacilities',
        'roof' => 'setRoof',
        'sale_start' => 'setSaleStart',
        'sale_start_date_parts' => 'setSaleStartDateParts',
        'hide_sale_start_date' => 'setHideSaleStartDate',
        'sale_start_text' => 'setSaleStartText',
        'parcel_surface' => 'setParcelSurface',
        'number_of_bath_rooms' => 'setNumberOfBathRooms',
        'number_of_floors' => 'setNumberOfFloors',
        'number_of_showers' => 'setNumberOfShowers',
        'number_of_rooms' => 'setNumberOfRooms',
        'number_of_kitchens' => 'setNumberOfKitchens',
        'number_of_bed_rooms' => 'setNumberOfBedRooms',
        'number_of_toilets' => 'setNumberOfToilets',
        'number_of_garages' => 'setNumberOfGarages',
        'number_of_gardens' => 'setNumberOfGardens',
        'year_of_construction' => 'setYearOfConstruction',
        'floors' => 'setFloors',
        'garages' => 'setGarages',
        'gardens' => 'setGardens',
        'comfort_quality' => 'setComfortQuality',
        'boiler_year_of_construction' => 'setBoilerYearOfConstruction',
        'boiler_type' => 'setBoilerType',
        'external_storage' => 'setExternalStorage',
        'building_related_outdoor_space' => 'setBuildingRelatedOutdoorSpace',
        'usable_area' => 'setUsableArea',
        'contents' => 'setContents',
        'in_park' => 'setInPark',
        'has_combi_boiler' => 'setHasCombiBoiler',
        'insulation_types_barn_storage' => 'setInsulationTypesBarnStorage',
        'is_permanently_inhabited' => 'setIsPermanentlyInhabited',
        'is_office_space_available' => 'setIsOfficeSpaceAvailable',
        'is_recreational' => 'setIsRecreational',
        'is_barn_storage_available' => 'setIsBarnStorageAvailable',
        'is_building_ready' => 'setIsBuildingReady',
        'boiler_fuel' => 'setBoilerFuel',
        'boiler_property' => 'setBoilerProperty',
        'other_inside_spaces' => 'setOtherInsideSpaces',
        'warm_water_types' => 'setWarmWaterTypes',
        'storage_room_type' => 'setStorageRoomType',
        'type_code_house' => 'setTypeCodeHouse',
        'heating' => 'setHeating',
        'storage_has_electra' => 'setStorageHasElectra',
        'storage_has_heating' => 'setStorageHasHeating',
        'storage_has_attic' => 'setStorageHasAttic',
        'storage_has_water' => 'setStorageHasWater',
        'residential_facilities' => 'setResidentialFacilities',
        'living_room_surface' => 'setLivingRoomSurface',
        'has_open_porch' => 'setHasOpenPorch',
        'is_owners_association_checklist_available' => 'setIsOwnersAssociationChecklistAvailable',
        'is_owners_association_registered_kv_k' => 'setIsOwnersAssociationRegisteredKvK',
        'has_owners_association_yearly_meeting' => 'setHasOwnersAssociationYearlyMeeting',
        'has_owners_association_periodic_contribution' => 'setHasOwnersAssociationPeriodicContribution',
        'has_owners_association_reserve_fund' => 'setHasOwnersAssociationReserveFund',
        'has_owners_association_maintenance_expectations' => 'setHasOwnersAssociationMaintenanceExpectations',
        'has_owners_association_multiple_years_maintenance_plan' => 'setHasOwnersAssociationMultipleYearsMaintenancePlan',
        'has_owners_association_buildings_insurance' => 'setHasOwnersAssociationBuildingsInsurance',
        'apartment_characteristic' => 'setApartmentCharacteristic',
        'apartment_sort' => 'setApartmentSort',
        'floor_level' => 'setFloorLevel',
        'house_characteristic' => 'setHouseCharacteristic',
        'house_sort' => 'setHouseSort',
        'house_type' => 'setHouseType',
        'type_part' => 'setTypePart',
        'linked_project_assignment' => 'setLinkedProjectAssignment',
        'linked_folder_tree' => 'setLinkedFolderTree',
        'linked_office' => 'setLinkedOffice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_free_units' => 'getAmountFreeUnits',
        'amount_units' => 'getAmountUnits',
        'building_start_date_parts' => 'getBuildingStartDateParts',
        'hide_building_start_date' => 'getHideBuildingStartDate',
        'linked_employee' => 'getLinkedEmployee',
        'building_start_text' => 'getBuildingStartText',
        'building_type' => 'getBuildingType',
        'building_type_start' => 'getBuildingTypeStart',
        'current_destination' => 'getCurrentDestination',
        'current_usage' => 'getCurrentUsage',
        'description' => 'getDescription',
        'delivery_start' => 'getDeliveryStart',
        'delivery_start_date_parts' => 'getDeliveryStartDateParts',
        'dimensions_range' => 'getDimensionsRange',
        'hide_delivery_start_date' => 'getHideDeliveryStartDate',
        'delivery_start_text' => 'getDeliveryStartText',
        'insulation_types' => 'getInsulationTypes',
        'location_places' => 'getLocationPlaces',
        'maintenance_inside' => 'getMaintenanceInside',
        'maintenance_outside' => 'getMaintenanceOutside',
        'parking_facilities' => 'getParkingFacilities',
        'roof' => 'getRoof',
        'sale_start' => 'getSaleStart',
        'sale_start_date_parts' => 'getSaleStartDateParts',
        'hide_sale_start_date' => 'getHideSaleStartDate',
        'sale_start_text' => 'getSaleStartText',
        'parcel_surface' => 'getParcelSurface',
        'number_of_bath_rooms' => 'getNumberOfBathRooms',
        'number_of_floors' => 'getNumberOfFloors',
        'number_of_showers' => 'getNumberOfShowers',
        'number_of_rooms' => 'getNumberOfRooms',
        'number_of_kitchens' => 'getNumberOfKitchens',
        'number_of_bed_rooms' => 'getNumberOfBedRooms',
        'number_of_toilets' => 'getNumberOfToilets',
        'number_of_garages' => 'getNumberOfGarages',
        'number_of_gardens' => 'getNumberOfGardens',
        'year_of_construction' => 'getYearOfConstruction',
        'floors' => 'getFloors',
        'garages' => 'getGarages',
        'gardens' => 'getGardens',
        'comfort_quality' => 'getComfortQuality',
        'boiler_year_of_construction' => 'getBoilerYearOfConstruction',
        'boiler_type' => 'getBoilerType',
        'external_storage' => 'getExternalStorage',
        'building_related_outdoor_space' => 'getBuildingRelatedOutdoorSpace',
        'usable_area' => 'getUsableArea',
        'contents' => 'getContents',
        'in_park' => 'getInPark',
        'has_combi_boiler' => 'getHasCombiBoiler',
        'insulation_types_barn_storage' => 'getInsulationTypesBarnStorage',
        'is_permanently_inhabited' => 'getIsPermanentlyInhabited',
        'is_office_space_available' => 'getIsOfficeSpaceAvailable',
        'is_recreational' => 'getIsRecreational',
        'is_barn_storage_available' => 'getIsBarnStorageAvailable',
        'is_building_ready' => 'getIsBuildingReady',
        'boiler_fuel' => 'getBoilerFuel',
        'boiler_property' => 'getBoilerProperty',
        'other_inside_spaces' => 'getOtherInsideSpaces',
        'warm_water_types' => 'getWarmWaterTypes',
        'storage_room_type' => 'getStorageRoomType',
        'type_code_house' => 'getTypeCodeHouse',
        'heating' => 'getHeating',
        'storage_has_electra' => 'getStorageHasElectra',
        'storage_has_heating' => 'getStorageHasHeating',
        'storage_has_attic' => 'getStorageHasAttic',
        'storage_has_water' => 'getStorageHasWater',
        'residential_facilities' => 'getResidentialFacilities',
        'living_room_surface' => 'getLivingRoomSurface',
        'has_open_porch' => 'getHasOpenPorch',
        'is_owners_association_checklist_available' => 'getIsOwnersAssociationChecklistAvailable',
        'is_owners_association_registered_kv_k' => 'getIsOwnersAssociationRegisteredKvK',
        'has_owners_association_yearly_meeting' => 'getHasOwnersAssociationYearlyMeeting',
        'has_owners_association_periodic_contribution' => 'getHasOwnersAssociationPeriodicContribution',
        'has_owners_association_reserve_fund' => 'getHasOwnersAssociationReserveFund',
        'has_owners_association_maintenance_expectations' => 'getHasOwnersAssociationMaintenanceExpectations',
        'has_owners_association_multiple_years_maintenance_plan' => 'getHasOwnersAssociationMultipleYearsMaintenancePlan',
        'has_owners_association_buildings_insurance' => 'getHasOwnersAssociationBuildingsInsurance',
        'apartment_characteristic' => 'getApartmentCharacteristic',
        'apartment_sort' => 'getApartmentSort',
        'floor_level' => 'getFloorLevel',
        'house_characteristic' => 'getHouseCharacteristic',
        'house_sort' => 'getHouseSort',
        'house_type' => 'getHouseType',
        'type_part' => 'getTypePart',
        'linked_project_assignment' => 'getLinkedProjectAssignment',
        'linked_folder_tree' => 'getLinkedFolderTree',
        'linked_office' => 'getLinkedOffice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['amount_free_units'] = isset($data['amount_free_units']) ? $data['amount_free_units'] : null;
        $this->container['amount_units'] = isset($data['amount_units']) ? $data['amount_units'] : null;
        $this->container['building_start_date_parts'] = isset($data['building_start_date_parts']) ? $data['building_start_date_parts'] : null;
        $this->container['hide_building_start_date'] = isset($data['hide_building_start_date']) ? $data['hide_building_start_date'] : null;
        $this->container['linked_employee'] = isset($data['linked_employee']) ? $data['linked_employee'] : null;
        $this->container['building_start_text'] = isset($data['building_start_text']) ? $data['building_start_text'] : null;
        $this->container['building_type'] = isset($data['building_type']) ? $data['building_type'] : null;
        $this->container['building_type_start'] = isset($data['building_type_start']) ? $data['building_type_start'] : null;
        $this->container['current_destination'] = isset($data['current_destination']) ? $data['current_destination'] : null;
        $this->container['current_usage'] = isset($data['current_usage']) ? $data['current_usage'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['delivery_start'] = isset($data['delivery_start']) ? $data['delivery_start'] : null;
        $this->container['delivery_start_date_parts'] = isset($data['delivery_start_date_parts']) ? $data['delivery_start_date_parts'] : null;
        $this->container['dimensions_range'] = isset($data['dimensions_range']) ? $data['dimensions_range'] : null;
        $this->container['hide_delivery_start_date'] = isset($data['hide_delivery_start_date']) ? $data['hide_delivery_start_date'] : null;
        $this->container['delivery_start_text'] = isset($data['delivery_start_text']) ? $data['delivery_start_text'] : null;
        $this->container['insulation_types'] = isset($data['insulation_types']) ? $data['insulation_types'] : null;
        $this->container['location_places'] = isset($data['location_places']) ? $data['location_places'] : null;
        $this->container['maintenance_inside'] = isset($data['maintenance_inside']) ? $data['maintenance_inside'] : null;
        $this->container['maintenance_outside'] = isset($data['maintenance_outside']) ? $data['maintenance_outside'] : null;
        $this->container['parking_facilities'] = isset($data['parking_facilities']) ? $data['parking_facilities'] : null;
        $this->container['roof'] = isset($data['roof']) ? $data['roof'] : null;
        $this->container['sale_start'] = isset($data['sale_start']) ? $data['sale_start'] : null;
        $this->container['sale_start_date_parts'] = isset($data['sale_start_date_parts']) ? $data['sale_start_date_parts'] : null;
        $this->container['hide_sale_start_date'] = isset($data['hide_sale_start_date']) ? $data['hide_sale_start_date'] : null;
        $this->container['sale_start_text'] = isset($data['sale_start_text']) ? $data['sale_start_text'] : null;
        $this->container['parcel_surface'] = isset($data['parcel_surface']) ? $data['parcel_surface'] : null;
        $this->container['number_of_bath_rooms'] = isset($data['number_of_bath_rooms']) ? $data['number_of_bath_rooms'] : null;
        $this->container['number_of_floors'] = isset($data['number_of_floors']) ? $data['number_of_floors'] : null;
        $this->container['number_of_showers'] = isset($data['number_of_showers']) ? $data['number_of_showers'] : null;
        $this->container['number_of_rooms'] = isset($data['number_of_rooms']) ? $data['number_of_rooms'] : null;
        $this->container['number_of_kitchens'] = isset($data['number_of_kitchens']) ? $data['number_of_kitchens'] : null;
        $this->container['number_of_bed_rooms'] = isset($data['number_of_bed_rooms']) ? $data['number_of_bed_rooms'] : null;
        $this->container['number_of_toilets'] = isset($data['number_of_toilets']) ? $data['number_of_toilets'] : null;
        $this->container['number_of_garages'] = isset($data['number_of_garages']) ? $data['number_of_garages'] : null;
        $this->container['number_of_gardens'] = isset($data['number_of_gardens']) ? $data['number_of_gardens'] : null;
        $this->container['year_of_construction'] = isset($data['year_of_construction']) ? $data['year_of_construction'] : null;
        $this->container['floors'] = isset($data['floors']) ? $data['floors'] : null;
        $this->container['garages'] = isset($data['garages']) ? $data['garages'] : null;
        $this->container['gardens'] = isset($data['gardens']) ? $data['gardens'] : null;
        $this->container['comfort_quality'] = isset($data['comfort_quality']) ? $data['comfort_quality'] : null;
        $this->container['boiler_year_of_construction'] = isset($data['boiler_year_of_construction']) ? $data['boiler_year_of_construction'] : null;
        $this->container['boiler_type'] = isset($data['boiler_type']) ? $data['boiler_type'] : '';
        $this->container['external_storage'] = isset($data['external_storage']) ? $data['external_storage'] : null;
        $this->container['building_related_outdoor_space'] = isset($data['building_related_outdoor_space']) ? $data['building_related_outdoor_space'] : null;
        $this->container['usable_area'] = isset($data['usable_area']) ? $data['usable_area'] : null;
        $this->container['contents'] = isset($data['contents']) ? $data['contents'] : null;
        $this->container['in_park'] = isset($data['in_park']) ? $data['in_park'] : null;
        $this->container['has_combi_boiler'] = isset($data['has_combi_boiler']) ? $data['has_combi_boiler'] : null;
        $this->container['insulation_types_barn_storage'] = isset($data['insulation_types_barn_storage']) ? $data['insulation_types_barn_storage'] : null;
        $this->container['is_permanently_inhabited'] = isset($data['is_permanently_inhabited']) ? $data['is_permanently_inhabited'] : null;
        $this->container['is_office_space_available'] = isset($data['is_office_space_available']) ? $data['is_office_space_available'] : null;
        $this->container['is_recreational'] = isset($data['is_recreational']) ? $data['is_recreational'] : null;
        $this->container['is_barn_storage_available'] = isset($data['is_barn_storage_available']) ? $data['is_barn_storage_available'] : null;
        $this->container['is_building_ready'] = isset($data['is_building_ready']) ? $data['is_building_ready'] : null;
        $this->container['boiler_fuel'] = isset($data['boiler_fuel']) ? $data['boiler_fuel'] : null;
        $this->container['boiler_property'] = isset($data['boiler_property']) ? $data['boiler_property'] : null;
        $this->container['other_inside_spaces'] = isset($data['other_inside_spaces']) ? $data['other_inside_spaces'] : null;
        $this->container['warm_water_types'] = isset($data['warm_water_types']) ? $data['warm_water_types'] : null;
        $this->container['storage_room_type'] = isset($data['storage_room_type']) ? $data['storage_room_type'] : null;
        $this->container['type_code_house'] = isset($data['type_code_house']) ? $data['type_code_house'] : null;
        $this->container['heating'] = isset($data['heating']) ? $data['heating'] : null;
        $this->container['storage_has_electra'] = isset($data['storage_has_electra']) ? $data['storage_has_electra'] : null;
        $this->container['storage_has_heating'] = isset($data['storage_has_heating']) ? $data['storage_has_heating'] : null;
        $this->container['storage_has_attic'] = isset($data['storage_has_attic']) ? $data['storage_has_attic'] : null;
        $this->container['storage_has_water'] = isset($data['storage_has_water']) ? $data['storage_has_water'] : null;
        $this->container['residential_facilities'] = isset($data['residential_facilities']) ? $data['residential_facilities'] : null;
        $this->container['living_room_surface'] = isset($data['living_room_surface']) ? $data['living_room_surface'] : null;
        $this->container['has_open_porch'] = isset($data['has_open_porch']) ? $data['has_open_porch'] : null;
        $this->container['is_owners_association_checklist_available'] = isset($data['is_owners_association_checklist_available']) ? $data['is_owners_association_checklist_available'] : null;
        $this->container['is_owners_association_registered_kv_k'] = isset($data['is_owners_association_registered_kv_k']) ? $data['is_owners_association_registered_kv_k'] : null;
        $this->container['has_owners_association_yearly_meeting'] = isset($data['has_owners_association_yearly_meeting']) ? $data['has_owners_association_yearly_meeting'] : null;
        $this->container['has_owners_association_periodic_contribution'] = isset($data['has_owners_association_periodic_contribution']) ? $data['has_owners_association_periodic_contribution'] : null;
        $this->container['has_owners_association_reserve_fund'] = isset($data['has_owners_association_reserve_fund']) ? $data['has_owners_association_reserve_fund'] : null;
        $this->container['has_owners_association_maintenance_expectations'] = isset($data['has_owners_association_maintenance_expectations']) ? $data['has_owners_association_maintenance_expectations'] : null;
        $this->container['has_owners_association_multiple_years_maintenance_plan'] = isset($data['has_owners_association_multiple_years_maintenance_plan']) ? $data['has_owners_association_multiple_years_maintenance_plan'] : null;
        $this->container['has_owners_association_buildings_insurance'] = isset($data['has_owners_association_buildings_insurance']) ? $data['has_owners_association_buildings_insurance'] : null;
        $this->container['apartment_characteristic'] = isset($data['apartment_characteristic']) ? $data['apartment_characteristic'] : null;
        $this->container['apartment_sort'] = isset($data['apartment_sort']) ? $data['apartment_sort'] : null;
        $this->container['floor_level'] = isset($data['floor_level']) ? $data['floor_level'] : null;
        $this->container['house_characteristic'] = isset($data['house_characteristic']) ? $data['house_characteristic'] : null;
        $this->container['house_sort'] = isset($data['house_sort']) ? $data['house_sort'] : null;
        $this->container['house_type'] = isset($data['house_type']) ? $data['house_type'] : null;
        $this->container['type_part'] = isset($data['type_part']) ? $data['type_part'] : null;
        $this->container['linked_project_assignment'] = isset($data['linked_project_assignment']) ? $data['linked_project_assignment'] : null;
        $this->container['linked_folder_tree'] = isset($data['linked_folder_tree']) ? $data['linked_folder_tree'] : null;
        $this->container['linked_office'] = isset($data['linked_office']) ? $data['linked_office'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['boiler_type']) && (mb_strlen($this->container['boiler_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'boiler_type', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_free_units
     *
     * @return int
     */
    public function getAmountFreeUnits()
    {
        return $this->container['amount_free_units'];
    }

    /**
     * Sets amount_free_units
     *
     * @param int $amount_free_units amount_free_units
     *
     * @return $this
     */
    public function setAmountFreeUnits($amount_free_units)
    {
        $this->container['amount_free_units'] = $amount_free_units;

        return $this;
    }

    /**
     * Gets amount_units
     *
     * @return int
     */
    public function getAmountUnits()
    {
        return $this->container['amount_units'];
    }

    /**
     * Sets amount_units
     *
     * @param int $amount_units amount_units
     *
     * @return $this
     */
    public function setAmountUnits($amount_units)
    {
        $this->container['amount_units'] = $amount_units;

        return $this;
    }

    /**
     * Gets building_start_date_parts
     *
     * @return bool
     */
    public function getBuildingStartDateParts()
    {
        return $this->container['building_start_date_parts'];
    }

    /**
     * Sets building_start_date_parts
     *
     * @param bool $building_start_date_parts building_start_date_parts
     *
     * @return $this
     */
    public function setBuildingStartDateParts($building_start_date_parts)
    {
        $this->container['building_start_date_parts'] = $building_start_date_parts;

        return $this;
    }

    /**
     * Gets hide_building_start_date
     *
     * @return bool
     */
    public function getHideBuildingStartDate()
    {
        return $this->container['hide_building_start_date'];
    }

    /**
     * Sets hide_building_start_date
     *
     * @param bool $hide_building_start_date hide_building_start_date
     *
     * @return $this
     */
    public function setHideBuildingStartDate($hide_building_start_date)
    {
        $this->container['hide_building_start_date'] = $hide_building_start_date;

        return $this;
    }

    /**
     * Gets linked_employee
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedEmployee()
    {
        return $this->container['linked_employee'];
    }

    /**
     * Sets linked_employee
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_employee linked_employee
     *
     * @return $this
     */
    public function setLinkedEmployee($linked_employee)
    {
        $this->container['linked_employee'] = $linked_employee;

        return $this;
    }

    /**
     * Gets building_start_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getBuildingStartText()
    {
        return $this->container['building_start_text'];
    }

    /**
     * Sets building_start_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $building_start_text building_start_text
     *
     * @return $this
     */
    public function setBuildingStartText($building_start_text)
    {
        $this->container['building_start_text'] = $building_start_text;

        return $this;
    }

    /**
     * Gets building_type
     *
     * @return \Swagger\Client\Model\BuildingType
     */
    public function getBuildingType()
    {
        return $this->container['building_type'];
    }

    /**
     * Sets building_type
     *
     * @param \Swagger\Client\Model\BuildingType $building_type building_type
     *
     * @return $this
     */
    public function setBuildingType($building_type)
    {
        $this->container['building_type'] = $building_type;

        return $this;
    }

    /**
     * Gets building_type_start
     *
     * @return \DateTime
     */
    public function getBuildingTypeStart()
    {
        return $this->container['building_type_start'];
    }

    /**
     * Sets building_type_start
     *
     * @param \DateTime $building_type_start building_type_start
     *
     * @return $this
     */
    public function setBuildingTypeStart($building_type_start)
    {
        $this->container['building_type_start'] = $building_type_start;

        return $this;
    }

    /**
     * Gets current_destination
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getCurrentDestination()
    {
        return $this->container['current_destination'];
    }

    /**
     * Sets current_destination
     *
     * @param \Swagger\Client\Model\TranslatedText[] $current_destination current_destination
     *
     * @return $this
     */
    public function setCurrentDestination($current_destination)
    {
        $this->container['current_destination'] = $current_destination;

        return $this;
    }

    /**
     * Gets current_usage
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getCurrentUsage()
    {
        return $this->container['current_usage'];
    }

    /**
     * Sets current_usage
     *
     * @param \Swagger\Client\Model\TranslatedText[] $current_usage current_usage
     *
     * @return $this
     */
    public function setCurrentUsage($current_usage)
    {
        $this->container['current_usage'] = $current_usage;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Swagger\Client\Model\TranslatedText[] $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets delivery_start
     *
     * @return \DateTime
     */
    public function getDeliveryStart()
    {
        return $this->container['delivery_start'];
    }

    /**
     * Sets delivery_start
     *
     * @param \DateTime $delivery_start delivery_start
     *
     * @return $this
     */
    public function setDeliveryStart($delivery_start)
    {
        $this->container['delivery_start'] = $delivery_start;

        return $this;
    }

    /**
     * Gets delivery_start_date_parts
     *
     * @return bool
     */
    public function getDeliveryStartDateParts()
    {
        return $this->container['delivery_start_date_parts'];
    }

    /**
     * Sets delivery_start_date_parts
     *
     * @param bool $delivery_start_date_parts delivery_start_date_parts
     *
     * @return $this
     */
    public function setDeliveryStartDateParts($delivery_start_date_parts)
    {
        $this->container['delivery_start_date_parts'] = $delivery_start_date_parts;

        return $this;
    }

    /**
     * Gets dimensions_range
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getDimensionsRange()
    {
        return $this->container['dimensions_range'];
    }

    /**
     * Sets dimensions_range
     *
     * @param \Swagger\Client\Model\DimensionsRange $dimensions_range dimensions_range
     *
     * @return $this
     */
    public function setDimensionsRange($dimensions_range)
    {
        $this->container['dimensions_range'] = $dimensions_range;

        return $this;
    }

    /**
     * Gets hide_delivery_start_date
     *
     * @return bool
     */
    public function getHideDeliveryStartDate()
    {
        return $this->container['hide_delivery_start_date'];
    }

    /**
     * Sets hide_delivery_start_date
     *
     * @param bool $hide_delivery_start_date hide_delivery_start_date
     *
     * @return $this
     */
    public function setHideDeliveryStartDate($hide_delivery_start_date)
    {
        $this->container['hide_delivery_start_date'] = $hide_delivery_start_date;

        return $this;
    }

    /**
     * Gets delivery_start_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getDeliveryStartText()
    {
        return $this->container['delivery_start_text'];
    }

    /**
     * Sets delivery_start_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $delivery_start_text delivery_start_text
     *
     * @return $this
     */
    public function setDeliveryStartText($delivery_start_text)
    {
        $this->container['delivery_start_text'] = $delivery_start_text;

        return $this;
    }

    /**
     * Gets insulation_types
     *
     * @return \Swagger\Client\Model\InsulationType[]
     */
    public function getInsulationTypes()
    {
        return $this->container['insulation_types'];
    }

    /**
     * Sets insulation_types
     *
     * @param \Swagger\Client\Model\InsulationType[] $insulation_types insulation_types
     *
     * @return $this
     */
    public function setInsulationTypes($insulation_types)
    {
        $this->container['insulation_types'] = $insulation_types;

        return $this;
    }

    /**
     * Gets location_places
     *
     * @return \Swagger\Client\Model\LocationPlace[]
     */
    public function getLocationPlaces()
    {
        return $this->container['location_places'];
    }

    /**
     * Sets location_places
     *
     * @param \Swagger\Client\Model\LocationPlace[] $location_places location_places
     *
     * @return $this
     */
    public function setLocationPlaces($location_places)
    {
        $this->container['location_places'] = $location_places;

        return $this;
    }

    /**
     * Gets maintenance_inside
     *
     * @return \Swagger\Client\Model\Maintenance
     */
    public function getMaintenanceInside()
    {
        return $this->container['maintenance_inside'];
    }

    /**
     * Sets maintenance_inside
     *
     * @param \Swagger\Client\Model\Maintenance $maintenance_inside maintenance_inside
     *
     * @return $this
     */
    public function setMaintenanceInside($maintenance_inside)
    {
        $this->container['maintenance_inside'] = $maintenance_inside;

        return $this;
    }

    /**
     * Gets maintenance_outside
     *
     * @return \Swagger\Client\Model\Maintenance
     */
    public function getMaintenanceOutside()
    {
        return $this->container['maintenance_outside'];
    }

    /**
     * Sets maintenance_outside
     *
     * @param \Swagger\Client\Model\Maintenance $maintenance_outside maintenance_outside
     *
     * @return $this
     */
    public function setMaintenanceOutside($maintenance_outside)
    {
        $this->container['maintenance_outside'] = $maintenance_outside;

        return $this;
    }

    /**
     * Gets parking_facilities
     *
     * @return \Swagger\Client\Model\TypeOfParkingFacility[]
     */
    public function getParkingFacilities()
    {
        return $this->container['parking_facilities'];
    }

    /**
     * Sets parking_facilities
     *
     * @param \Swagger\Client\Model\TypeOfParkingFacility[] $parking_facilities parking_facilities
     *
     * @return $this
     */
    public function setParkingFacilities($parking_facilities)
    {
        $this->container['parking_facilities'] = $parking_facilities;

        return $this;
    }

    /**
     * Gets roof
     *
     * @return \Swagger\Client\Model\Roof
     */
    public function getRoof()
    {
        return $this->container['roof'];
    }

    /**
     * Sets roof
     *
     * @param \Swagger\Client\Model\Roof $roof roof
     *
     * @return $this
     */
    public function setRoof($roof)
    {
        $this->container['roof'] = $roof;

        return $this;
    }

    /**
     * Gets sale_start
     *
     * @return \DateTime
     */
    public function getSaleStart()
    {
        return $this->container['sale_start'];
    }

    /**
     * Sets sale_start
     *
     * @param \DateTime $sale_start sale_start
     *
     * @return $this
     */
    public function setSaleStart($sale_start)
    {
        $this->container['sale_start'] = $sale_start;

        return $this;
    }

    /**
     * Gets sale_start_date_parts
     *
     * @return bool
     */
    public function getSaleStartDateParts()
    {
        return $this->container['sale_start_date_parts'];
    }

    /**
     * Sets sale_start_date_parts
     *
     * @param bool $sale_start_date_parts sale_start_date_parts
     *
     * @return $this
     */
    public function setSaleStartDateParts($sale_start_date_parts)
    {
        $this->container['sale_start_date_parts'] = $sale_start_date_parts;

        return $this;
    }

    /**
     * Gets hide_sale_start_date
     *
     * @return bool
     */
    public function getHideSaleStartDate()
    {
        return $this->container['hide_sale_start_date'];
    }

    /**
     * Sets hide_sale_start_date
     *
     * @param bool $hide_sale_start_date hide_sale_start_date
     *
     * @return $this
     */
    public function setHideSaleStartDate($hide_sale_start_date)
    {
        $this->container['hide_sale_start_date'] = $hide_sale_start_date;

        return $this;
    }

    /**
     * Gets sale_start_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getSaleStartText()
    {
        return $this->container['sale_start_text'];
    }

    /**
     * Sets sale_start_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $sale_start_text sale_start_text
     *
     * @return $this
     */
    public function setSaleStartText($sale_start_text)
    {
        $this->container['sale_start_text'] = $sale_start_text;

        return $this;
    }

    /**
     * Gets parcel_surface
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getParcelSurface()
    {
        return $this->container['parcel_surface'];
    }

    /**
     * Sets parcel_surface
     *
     * @param \Swagger\Client\Model\DimensionsRange $parcel_surface parcel_surface
     *
     * @return $this
     */
    public function setParcelSurface($parcel_surface)
    {
        $this->container['parcel_surface'] = $parcel_surface;

        return $this;
    }

    /**
     * Gets number_of_bath_rooms
     *
     * @return int
     */
    public function getNumberOfBathRooms()
    {
        return $this->container['number_of_bath_rooms'];
    }

    /**
     * Sets number_of_bath_rooms
     *
     * @param int $number_of_bath_rooms number_of_bath_rooms
     *
     * @return $this
     */
    public function setNumberOfBathRooms($number_of_bath_rooms)
    {
        $this->container['number_of_bath_rooms'] = $number_of_bath_rooms;

        return $this;
    }

    /**
     * Gets number_of_floors
     *
     * @return int
     */
    public function getNumberOfFloors()
    {
        return $this->container['number_of_floors'];
    }

    /**
     * Sets number_of_floors
     *
     * @param int $number_of_floors number_of_floors
     *
     * @return $this
     */
    public function setNumberOfFloors($number_of_floors)
    {
        $this->container['number_of_floors'] = $number_of_floors;

        return $this;
    }

    /**
     * Gets number_of_showers
     *
     * @return int
     */
    public function getNumberOfShowers()
    {
        return $this->container['number_of_showers'];
    }

    /**
     * Sets number_of_showers
     *
     * @param int $number_of_showers number_of_showers
     *
     * @return $this
     */
    public function setNumberOfShowers($number_of_showers)
    {
        $this->container['number_of_showers'] = $number_of_showers;

        return $this;
    }

    /**
     * Gets number_of_rooms
     *
     * @return int
     */
    public function getNumberOfRooms()
    {
        return $this->container['number_of_rooms'];
    }

    /**
     * Sets number_of_rooms
     *
     * @param int $number_of_rooms number_of_rooms
     *
     * @return $this
     */
    public function setNumberOfRooms($number_of_rooms)
    {
        $this->container['number_of_rooms'] = $number_of_rooms;

        return $this;
    }

    /**
     * Gets number_of_kitchens
     *
     * @return int
     */
    public function getNumberOfKitchens()
    {
        return $this->container['number_of_kitchens'];
    }

    /**
     * Sets number_of_kitchens
     *
     * @param int $number_of_kitchens number_of_kitchens
     *
     * @return $this
     */
    public function setNumberOfKitchens($number_of_kitchens)
    {
        $this->container['number_of_kitchens'] = $number_of_kitchens;

        return $this;
    }

    /**
     * Gets number_of_bed_rooms
     *
     * @return int
     */
    public function getNumberOfBedRooms()
    {
        return $this->container['number_of_bed_rooms'];
    }

    /**
     * Sets number_of_bed_rooms
     *
     * @param int $number_of_bed_rooms number_of_bed_rooms
     *
     * @return $this
     */
    public function setNumberOfBedRooms($number_of_bed_rooms)
    {
        $this->container['number_of_bed_rooms'] = $number_of_bed_rooms;

        return $this;
    }

    /**
     * Gets number_of_toilets
     *
     * @return int
     */
    public function getNumberOfToilets()
    {
        return $this->container['number_of_toilets'];
    }

    /**
     * Sets number_of_toilets
     *
     * @param int $number_of_toilets number_of_toilets
     *
     * @return $this
     */
    public function setNumberOfToilets($number_of_toilets)
    {
        $this->container['number_of_toilets'] = $number_of_toilets;

        return $this;
    }

    /**
     * Gets number_of_garages
     *
     * @return int
     */
    public function getNumberOfGarages()
    {
        return $this->container['number_of_garages'];
    }

    /**
     * Sets number_of_garages
     *
     * @param int $number_of_garages number_of_garages
     *
     * @return $this
     */
    public function setNumberOfGarages($number_of_garages)
    {
        $this->container['number_of_garages'] = $number_of_garages;

        return $this;
    }

    /**
     * Gets number_of_gardens
     *
     * @return int
     */
    public function getNumberOfGardens()
    {
        return $this->container['number_of_gardens'];
    }

    /**
     * Sets number_of_gardens
     *
     * @param int $number_of_gardens number_of_gardens
     *
     * @return $this
     */
    public function setNumberOfGardens($number_of_gardens)
    {
        $this->container['number_of_gardens'] = $number_of_gardens;

        return $this;
    }

    /**
     * Gets year_of_construction
     *
     * @return \Swagger\Client\Model\YearOfConstruction
     */
    public function getYearOfConstruction()
    {
        return $this->container['year_of_construction'];
    }

    /**
     * Sets year_of_construction
     *
     * @param \Swagger\Client\Model\YearOfConstruction $year_of_construction year_of_construction
     *
     * @return $this
     */
    public function setYearOfConstruction($year_of_construction)
    {
        $this->container['year_of_construction'] = $year_of_construction;

        return $this;
    }

    /**
     * Gets floors
     *
     * @return \Swagger\Client\Model\Floor[]
     */
    public function getFloors()
    {
        return $this->container['floors'];
    }

    /**
     * Sets floors
     *
     * @param \Swagger\Client\Model\Floor[] $floors floors
     *
     * @return $this
     */
    public function setFloors($floors)
    {
        $this->container['floors'] = $floors;

        return $this;
    }

    /**
     * Gets garages
     *
     * @return \Swagger\Client\Model\Garage[]
     */
    public function getGarages()
    {
        return $this->container['garages'];
    }

    /**
     * Sets garages
     *
     * @param \Swagger\Client\Model\Garage[] $garages garages
     *
     * @return $this
     */
    public function setGarages($garages)
    {
        $this->container['garages'] = $garages;

        return $this;
    }

    /**
     * Gets gardens
     *
     * @return \Swagger\Client\Model\Garden[]
     */
    public function getGardens()
    {
        return $this->container['gardens'];
    }

    /**
     * Sets gardens
     *
     * @param \Swagger\Client\Model\Garden[] $gardens gardens
     *
     * @return $this
     */
    public function setGardens($gardens)
    {
        $this->container['gardens'] = $gardens;

        return $this;
    }

    /**
     * Gets comfort_quality
     *
     * @return \Swagger\Client\Model\ComfortQuality
     */
    public function getComfortQuality()
    {
        return $this->container['comfort_quality'];
    }

    /**
     * Sets comfort_quality
     *
     * @param \Swagger\Client\Model\ComfortQuality $comfort_quality comfort_quality
     *
     * @return $this
     */
    public function setComfortQuality($comfort_quality)
    {
        $this->container['comfort_quality'] = $comfort_quality;

        return $this;
    }

    /**
     * Gets boiler_year_of_construction
     *
     * @return int
     */
    public function getBoilerYearOfConstruction()
    {
        return $this->container['boiler_year_of_construction'];
    }

    /**
     * Sets boiler_year_of_construction
     *
     * @param int $boiler_year_of_construction boiler_year_of_construction
     *
     * @return $this
     */
    public function setBoilerYearOfConstruction($boiler_year_of_construction)
    {
        $this->container['boiler_year_of_construction'] = $boiler_year_of_construction;

        return $this;
    }

    /**
     * Gets boiler_type
     *
     * @return string
     */
    public function getBoilerType()
    {
        return $this->container['boiler_type'];
    }

    /**
     * Sets boiler_type
     *
     * @param string $boiler_type boiler_type
     *
     * @return $this
     */
    public function setBoilerType($boiler_type)
    {
        if (!is_null($boiler_type) && (mb_strlen($boiler_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $boiler_type when calling ObjectTypeAssignment., must be smaller than or equal to 50.');
        }

        $this->container['boiler_type'] = $boiler_type;

        return $this;
    }

    /**
     * Gets external_storage
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getExternalStorage()
    {
        return $this->container['external_storage'];
    }

    /**
     * Sets external_storage
     *
     * @param \Swagger\Client\Model\DimensionsRange $external_storage external_storage
     *
     * @return $this
     */
    public function setExternalStorage($external_storage)
    {
        $this->container['external_storage'] = $external_storage;

        return $this;
    }

    /**
     * Gets building_related_outdoor_space
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getBuildingRelatedOutdoorSpace()
    {
        return $this->container['building_related_outdoor_space'];
    }

    /**
     * Sets building_related_outdoor_space
     *
     * @param \Swagger\Client\Model\DimensionsRange $building_related_outdoor_space building_related_outdoor_space
     *
     * @return $this
     */
    public function setBuildingRelatedOutdoorSpace($building_related_outdoor_space)
    {
        $this->container['building_related_outdoor_space'] = $building_related_outdoor_space;

        return $this;
    }

    /**
     * Gets usable_area
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getUsableArea()
    {
        return $this->container['usable_area'];
    }

    /**
     * Sets usable_area
     *
     * @param \Swagger\Client\Model\DimensionsRange $usable_area usable_area
     *
     * @return $this
     */
    public function setUsableArea($usable_area)
    {
        $this->container['usable_area'] = $usable_area;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \Swagger\Client\Model\DimensionsRange $contents contents
     *
     * @return $this
     */
    public function setContents($contents)
    {
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets in_park
     *
     * @return bool
     */
    public function getInPark()
    {
        return $this->container['in_park'];
    }

    /**
     * Sets in_park
     *
     * @param bool $in_park in_park
     *
     * @return $this
     */
    public function setInPark($in_park)
    {
        $this->container['in_park'] = $in_park;

        return $this;
    }

    /**
     * Gets has_combi_boiler
     *
     * @return bool
     */
    public function getHasCombiBoiler()
    {
        return $this->container['has_combi_boiler'];
    }

    /**
     * Sets has_combi_boiler
     *
     * @param bool $has_combi_boiler has_combi_boiler
     *
     * @return $this
     */
    public function setHasCombiBoiler($has_combi_boiler)
    {
        $this->container['has_combi_boiler'] = $has_combi_boiler;

        return $this;
    }

    /**
     * Gets insulation_types_barn_storage
     *
     * @return \Swagger\Client\Model\InsulationType[]
     */
    public function getInsulationTypesBarnStorage()
    {
        return $this->container['insulation_types_barn_storage'];
    }

    /**
     * Sets insulation_types_barn_storage
     *
     * @param \Swagger\Client\Model\InsulationType[] $insulation_types_barn_storage insulation_types_barn_storage
     *
     * @return $this
     */
    public function setInsulationTypesBarnStorage($insulation_types_barn_storage)
    {
        $this->container['insulation_types_barn_storage'] = $insulation_types_barn_storage;

        return $this;
    }

    /**
     * Gets is_permanently_inhabited
     *
     * @return bool
     */
    public function getIsPermanentlyInhabited()
    {
        return $this->container['is_permanently_inhabited'];
    }

    /**
     * Sets is_permanently_inhabited
     *
     * @param bool $is_permanently_inhabited is_permanently_inhabited
     *
     * @return $this
     */
    public function setIsPermanentlyInhabited($is_permanently_inhabited)
    {
        $this->container['is_permanently_inhabited'] = $is_permanently_inhabited;

        return $this;
    }

    /**
     * Gets is_office_space_available
     *
     * @return bool
     */
    public function getIsOfficeSpaceAvailable()
    {
        return $this->container['is_office_space_available'];
    }

    /**
     * Sets is_office_space_available
     *
     * @param bool $is_office_space_available is_office_space_available
     *
     * @return $this
     */
    public function setIsOfficeSpaceAvailable($is_office_space_available)
    {
        $this->container['is_office_space_available'] = $is_office_space_available;

        return $this;
    }

    /**
     * Gets is_recreational
     *
     * @return bool
     */
    public function getIsRecreational()
    {
        return $this->container['is_recreational'];
    }

    /**
     * Sets is_recreational
     *
     * @param bool $is_recreational is_recreational
     *
     * @return $this
     */
    public function setIsRecreational($is_recreational)
    {
        $this->container['is_recreational'] = $is_recreational;

        return $this;
    }

    /**
     * Gets is_barn_storage_available
     *
     * @return bool
     */
    public function getIsBarnStorageAvailable()
    {
        return $this->container['is_barn_storage_available'];
    }

    /**
     * Sets is_barn_storage_available
     *
     * @param bool $is_barn_storage_available is_barn_storage_available
     *
     * @return $this
     */
    public function setIsBarnStorageAvailable($is_barn_storage_available)
    {
        $this->container['is_barn_storage_available'] = $is_barn_storage_available;

        return $this;
    }

    /**
     * Gets is_building_ready
     *
     * @return bool
     */
    public function getIsBuildingReady()
    {
        return $this->container['is_building_ready'];
    }

    /**
     * Sets is_building_ready
     *
     * @param bool $is_building_ready is_building_ready
     *
     * @return $this
     */
    public function setIsBuildingReady($is_building_ready)
    {
        $this->container['is_building_ready'] = $is_building_ready;

        return $this;
    }

    /**
     * Gets boiler_fuel
     *
     * @return \Swagger\Client\Model\EnergySource
     */
    public function getBoilerFuel()
    {
        return $this->container['boiler_fuel'];
    }

    /**
     * Sets boiler_fuel
     *
     * @param \Swagger\Client\Model\EnergySource $boiler_fuel boiler_fuel
     *
     * @return $this
     */
    public function setBoilerFuel($boiler_fuel)
    {
        $this->container['boiler_fuel'] = $boiler_fuel;

        return $this;
    }

    /**
     * Gets boiler_property
     *
     * @return \Swagger\Client\Model\Ownership
     */
    public function getBoilerProperty()
    {
        return $this->container['boiler_property'];
    }

    /**
     * Sets boiler_property
     *
     * @param \Swagger\Client\Model\Ownership $boiler_property boiler_property
     *
     * @return $this
     */
    public function setBoilerProperty($boiler_property)
    {
        $this->container['boiler_property'] = $boiler_property;

        return $this;
    }

    /**
     * Gets other_inside_spaces
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getOtherInsideSpaces()
    {
        return $this->container['other_inside_spaces'];
    }

    /**
     * Sets other_inside_spaces
     *
     * @param \Swagger\Client\Model\DimensionsRange $other_inside_spaces other_inside_spaces
     *
     * @return $this
     */
    public function setOtherInsideSpaces($other_inside_spaces)
    {
        $this->container['other_inside_spaces'] = $other_inside_spaces;

        return $this;
    }

    /**
     * Gets warm_water_types
     *
     * @return \Swagger\Client\Model\HeatingWaterMethod[]
     */
    public function getWarmWaterTypes()
    {
        return $this->container['warm_water_types'];
    }

    /**
     * Sets warm_water_types
     *
     * @param \Swagger\Client\Model\HeatingWaterMethod[] $warm_water_types warm_water_types
     *
     * @return $this
     */
    public function setWarmWaterTypes($warm_water_types)
    {
        $this->container['warm_water_types'] = $warm_water_types;

        return $this;
    }

    /**
     * Gets storage_room_type
     *
     * @return \Swagger\Client\Model\StorageRoomType
     */
    public function getStorageRoomType()
    {
        return $this->container['storage_room_type'];
    }

    /**
     * Sets storage_room_type
     *
     * @param \Swagger\Client\Model\StorageRoomType $storage_room_type storage_room_type
     *
     * @return $this
     */
    public function setStorageRoomType($storage_room_type)
    {
        $this->container['storage_room_type'] = $storage_room_type;

        return $this;
    }

    /**
     * Gets type_code_house
     *
     * @return \Swagger\Client\Model\TypeCodeHouse
     */
    public function getTypeCodeHouse()
    {
        return $this->container['type_code_house'];
    }

    /**
     * Sets type_code_house
     *
     * @param \Swagger\Client\Model\TypeCodeHouse $type_code_house type_code_house
     *
     * @return $this
     */
    public function setTypeCodeHouse($type_code_house)
    {
        $this->container['type_code_house'] = $type_code_house;

        return $this;
    }

    /**
     * Gets heating
     *
     * @return \Swagger\Client\Model\HeatingMethod[]
     */
    public function getHeating()
    {
        return $this->container['heating'];
    }

    /**
     * Sets heating
     *
     * @param \Swagger\Client\Model\HeatingMethod[] $heating heating
     *
     * @return $this
     */
    public function setHeating($heating)
    {
        $this->container['heating'] = $heating;

        return $this;
    }

    /**
     * Gets storage_has_electra
     *
     * @return bool
     */
    public function getStorageHasElectra()
    {
        return $this->container['storage_has_electra'];
    }

    /**
     * Sets storage_has_electra
     *
     * @param bool $storage_has_electra storage_has_electra
     *
     * @return $this
     */
    public function setStorageHasElectra($storage_has_electra)
    {
        $this->container['storage_has_electra'] = $storage_has_electra;

        return $this;
    }

    /**
     * Gets storage_has_heating
     *
     * @return bool
     */
    public function getStorageHasHeating()
    {
        return $this->container['storage_has_heating'];
    }

    /**
     * Sets storage_has_heating
     *
     * @param bool $storage_has_heating storage_has_heating
     *
     * @return $this
     */
    public function setStorageHasHeating($storage_has_heating)
    {
        $this->container['storage_has_heating'] = $storage_has_heating;

        return $this;
    }

    /**
     * Gets storage_has_attic
     *
     * @return bool
     */
    public function getStorageHasAttic()
    {
        return $this->container['storage_has_attic'];
    }

    /**
     * Sets storage_has_attic
     *
     * @param bool $storage_has_attic storage_has_attic
     *
     * @return $this
     */
    public function setStorageHasAttic($storage_has_attic)
    {
        $this->container['storage_has_attic'] = $storage_has_attic;

        return $this;
    }

    /**
     * Gets storage_has_water
     *
     * @return bool
     */
    public function getStorageHasWater()
    {
        return $this->container['storage_has_water'];
    }

    /**
     * Sets storage_has_water
     *
     * @param bool $storage_has_water storage_has_water
     *
     * @return $this
     */
    public function setStorageHasWater($storage_has_water)
    {
        $this->container['storage_has_water'] = $storage_has_water;

        return $this;
    }

    /**
     * Gets residential_facilities
     *
     * @return \Swagger\Client\Model\ResidentialFacility[]
     */
    public function getResidentialFacilities()
    {
        return $this->container['residential_facilities'];
    }

    /**
     * Sets residential_facilities
     *
     * @param \Swagger\Client\Model\ResidentialFacility[] $residential_facilities residential_facilities
     *
     * @return $this
     */
    public function setResidentialFacilities($residential_facilities)
    {
        $this->container['residential_facilities'] = $residential_facilities;

        return $this;
    }

    /**
     * Gets living_room_surface
     *
     * @return \Swagger\Client\Model\DimensionsRange
     */
    public function getLivingRoomSurface()
    {
        return $this->container['living_room_surface'];
    }

    /**
     * Sets living_room_surface
     *
     * @param \Swagger\Client\Model\DimensionsRange $living_room_surface living_room_surface
     *
     * @return $this
     */
    public function setLivingRoomSurface($living_room_surface)
    {
        $this->container['living_room_surface'] = $living_room_surface;

        return $this;
    }

    /**
     * Gets has_open_porch
     *
     * @return bool
     */
    public function getHasOpenPorch()
    {
        return $this->container['has_open_porch'];
    }

    /**
     * Sets has_open_porch
     *
     * @param bool $has_open_porch has_open_porch
     *
     * @return $this
     */
    public function setHasOpenPorch($has_open_porch)
    {
        $this->container['has_open_porch'] = $has_open_porch;

        return $this;
    }

    /**
     * Gets is_owners_association_checklist_available
     *
     * @return bool
     */
    public function getIsOwnersAssociationChecklistAvailable()
    {
        return $this->container['is_owners_association_checklist_available'];
    }

    /**
     * Sets is_owners_association_checklist_available
     *
     * @param bool $is_owners_association_checklist_available is_owners_association_checklist_available
     *
     * @return $this
     */
    public function setIsOwnersAssociationChecklistAvailable($is_owners_association_checklist_available)
    {
        $this->container['is_owners_association_checklist_available'] = $is_owners_association_checklist_available;

        return $this;
    }

    /**
     * Gets is_owners_association_registered_kv_k
     *
     * @return bool
     */
    public function getIsOwnersAssociationRegisteredKvK()
    {
        return $this->container['is_owners_association_registered_kv_k'];
    }

    /**
     * Sets is_owners_association_registered_kv_k
     *
     * @param bool $is_owners_association_registered_kv_k is_owners_association_registered_kv_k
     *
     * @return $this
     */
    public function setIsOwnersAssociationRegisteredKvK($is_owners_association_registered_kv_k)
    {
        $this->container['is_owners_association_registered_kv_k'] = $is_owners_association_registered_kv_k;

        return $this;
    }

    /**
     * Gets has_owners_association_yearly_meeting
     *
     * @return bool
     */
    public function getHasOwnersAssociationYearlyMeeting()
    {
        return $this->container['has_owners_association_yearly_meeting'];
    }

    /**
     * Sets has_owners_association_yearly_meeting
     *
     * @param bool $has_owners_association_yearly_meeting has_owners_association_yearly_meeting
     *
     * @return $this
     */
    public function setHasOwnersAssociationYearlyMeeting($has_owners_association_yearly_meeting)
    {
        $this->container['has_owners_association_yearly_meeting'] = $has_owners_association_yearly_meeting;

        return $this;
    }

    /**
     * Gets has_owners_association_periodic_contribution
     *
     * @return bool
     */
    public function getHasOwnersAssociationPeriodicContribution()
    {
        return $this->container['has_owners_association_periodic_contribution'];
    }

    /**
     * Sets has_owners_association_periodic_contribution
     *
     * @param bool $has_owners_association_periodic_contribution has_owners_association_periodic_contribution
     *
     * @return $this
     */
    public function setHasOwnersAssociationPeriodicContribution($has_owners_association_periodic_contribution)
    {
        $this->container['has_owners_association_periodic_contribution'] = $has_owners_association_periodic_contribution;

        return $this;
    }

    /**
     * Gets has_owners_association_reserve_fund
     *
     * @return bool
     */
    public function getHasOwnersAssociationReserveFund()
    {
        return $this->container['has_owners_association_reserve_fund'];
    }

    /**
     * Sets has_owners_association_reserve_fund
     *
     * @param bool $has_owners_association_reserve_fund has_owners_association_reserve_fund
     *
     * @return $this
     */
    public function setHasOwnersAssociationReserveFund($has_owners_association_reserve_fund)
    {
        $this->container['has_owners_association_reserve_fund'] = $has_owners_association_reserve_fund;

        return $this;
    }

    /**
     * Gets has_owners_association_maintenance_expectations
     *
     * @return bool
     */
    public function getHasOwnersAssociationMaintenanceExpectations()
    {
        return $this->container['has_owners_association_maintenance_expectations'];
    }

    /**
     * Sets has_owners_association_maintenance_expectations
     *
     * @param bool $has_owners_association_maintenance_expectations has_owners_association_maintenance_expectations
     *
     * @return $this
     */
    public function setHasOwnersAssociationMaintenanceExpectations($has_owners_association_maintenance_expectations)
    {
        $this->container['has_owners_association_maintenance_expectations'] = $has_owners_association_maintenance_expectations;

        return $this;
    }

    /**
     * Gets has_owners_association_multiple_years_maintenance_plan
     *
     * @return bool
     */
    public function getHasOwnersAssociationMultipleYearsMaintenancePlan()
    {
        return $this->container['has_owners_association_multiple_years_maintenance_plan'];
    }

    /**
     * Sets has_owners_association_multiple_years_maintenance_plan
     *
     * @param bool $has_owners_association_multiple_years_maintenance_plan has_owners_association_multiple_years_maintenance_plan
     *
     * @return $this
     */
    public function setHasOwnersAssociationMultipleYearsMaintenancePlan($has_owners_association_multiple_years_maintenance_plan)
    {
        $this->container['has_owners_association_multiple_years_maintenance_plan'] = $has_owners_association_multiple_years_maintenance_plan;

        return $this;
    }

    /**
     * Gets has_owners_association_buildings_insurance
     *
     * @return bool
     */
    public function getHasOwnersAssociationBuildingsInsurance()
    {
        return $this->container['has_owners_association_buildings_insurance'];
    }

    /**
     * Sets has_owners_association_buildings_insurance
     *
     * @param bool $has_owners_association_buildings_insurance has_owners_association_buildings_insurance
     *
     * @return $this
     */
    public function setHasOwnersAssociationBuildingsInsurance($has_owners_association_buildings_insurance)
    {
        $this->container['has_owners_association_buildings_insurance'] = $has_owners_association_buildings_insurance;

        return $this;
    }

    /**
     * Gets apartment_characteristic
     *
     * @return \Swagger\Client\Model\ApartmentCharacteristic
     */
    public function getApartmentCharacteristic()
    {
        return $this->container['apartment_characteristic'];
    }

    /**
     * Sets apartment_characteristic
     *
     * @param \Swagger\Client\Model\ApartmentCharacteristic $apartment_characteristic apartment_characteristic
     *
     * @return $this
     */
    public function setApartmentCharacteristic($apartment_characteristic)
    {
        $this->container['apartment_characteristic'] = $apartment_characteristic;

        return $this;
    }

    /**
     * Gets apartment_sort
     *
     * @return \Swagger\Client\Model\ApartmentSort
     */
    public function getApartmentSort()
    {
        return $this->container['apartment_sort'];
    }

    /**
     * Sets apartment_sort
     *
     * @param \Swagger\Client\Model\ApartmentSort $apartment_sort apartment_sort
     *
     * @return $this
     */
    public function setApartmentSort($apartment_sort)
    {
        $this->container['apartment_sort'] = $apartment_sort;

        return $this;
    }

    /**
     * Gets floor_level
     *
     * @return int
     */
    public function getFloorLevel()
    {
        return $this->container['floor_level'];
    }

    /**
     * Sets floor_level
     *
     * @param int $floor_level floor_level
     *
     * @return $this
     */
    public function setFloorLevel($floor_level)
    {
        $this->container['floor_level'] = $floor_level;

        return $this;
    }

    /**
     * Gets house_characteristic
     *
     * @return \Swagger\Client\Model\HouseCharacteristic
     */
    public function getHouseCharacteristic()
    {
        return $this->container['house_characteristic'];
    }

    /**
     * Sets house_characteristic
     *
     * @param \Swagger\Client\Model\HouseCharacteristic $house_characteristic house_characteristic
     *
     * @return $this
     */
    public function setHouseCharacteristic($house_characteristic)
    {
        $this->container['house_characteristic'] = $house_characteristic;

        return $this;
    }

    /**
     * Gets house_sort
     *
     * @return \Swagger\Client\Model\HouseSort
     */
    public function getHouseSort()
    {
        return $this->container['house_sort'];
    }

    /**
     * Sets house_sort
     *
     * @param \Swagger\Client\Model\HouseSort $house_sort house_sort
     *
     * @return $this
     */
    public function setHouseSort($house_sort)
    {
        $this->container['house_sort'] = $house_sort;

        return $this;
    }

    /**
     * Gets house_type
     *
     * @return \Swagger\Client\Model\HouseType
     */
    public function getHouseType()
    {
        return $this->container['house_type'];
    }

    /**
     * Sets house_type
     *
     * @param \Swagger\Client\Model\HouseType $house_type house_type
     *
     * @return $this
     */
    public function setHouseType($house_type)
    {
        $this->container['house_type'] = $house_type;

        return $this;
    }

    /**
     * Gets type_part
     *
     * @return \Swagger\Client\Model\TypePART
     */
    public function getTypePart()
    {
        return $this->container['type_part'];
    }

    /**
     * Sets type_part
     *
     * @param \Swagger\Client\Model\TypePART $type_part type_part
     *
     * @return $this
     */
    public function setTypePart($type_part)
    {
        $this->container['type_part'] = $type_part;

        return $this;
    }

    /**
     * Gets linked_project_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedProjectAssignment()
    {
        return $this->container['linked_project_assignment'];
    }

    /**
     * Sets linked_project_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_project_assignment linked_project_assignment
     *
     * @return $this
     */
    public function setLinkedProjectAssignment($linked_project_assignment)
    {
        $this->container['linked_project_assignment'] = $linked_project_assignment;

        return $this;
    }

    /**
     * Gets linked_folder_tree
     *
     * @return \Swagger\Client\Model\LinkedFolderTree
     */
    public function getLinkedFolderTree()
    {
        return $this->container['linked_folder_tree'];
    }

    /**
     * Sets linked_folder_tree
     *
     * @param \Swagger\Client\Model\LinkedFolderTree $linked_folder_tree linked_folder_tree
     *
     * @return $this
     */
    public function setLinkedFolderTree($linked_folder_tree)
    {
        $this->container['linked_folder_tree'] = $linked_folder_tree;

        return $this;
    }

    /**
     * Gets linked_office
     *
     * @return \Swagger\Client\Model\LinkedOffice
     */
    public function getLinkedOffice()
    {
        return $this->container['linked_office'];
    }

    /**
     * Sets linked_office
     *
     * @param \Swagger\Client\Model\LinkedOffice $linked_office linked_office
     *
     * @return $this
     */
    public function setLinkedOffice($linked_office)
    {
        $this->container['linked_office'] = $linked_office;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


