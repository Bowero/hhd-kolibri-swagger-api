<?php
/**
 * OpenHouse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OpenHouse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OpenHouse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OpenHouse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'open_house_date' => '\DateTime',
        'open_house_end_time' => '\DateTime',
        'open_house_start_time' => '\DateTime',
        'open_house_text' => '\Swagger\Client\Model\TranslatedText[]',
        'option' => '\Swagger\Client\Model\OpenHouseRecurrence'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'open_house_date' => 'date-time',
        'open_house_end_time' => 'date-time',
        'open_house_start_time' => 'date-time',
        'open_house_text' => null,
        'option' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'open_house_date' => 'openHouseDate',
        'open_house_end_time' => 'openHouseEndTime',
        'open_house_start_time' => 'openHouseStartTime',
        'open_house_text' => 'openHouseText',
        'option' => 'option'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'open_house_date' => 'setOpenHouseDate',
        'open_house_end_time' => 'setOpenHouseEndTime',
        'open_house_start_time' => 'setOpenHouseStartTime',
        'open_house_text' => 'setOpenHouseText',
        'option' => 'setOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'open_house_date' => 'getOpenHouseDate',
        'open_house_end_time' => 'getOpenHouseEndTime',
        'open_house_start_time' => 'getOpenHouseStartTime',
        'open_house_text' => 'getOpenHouseText',
        'option' => 'getOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['open_house_date'] = isset($data['open_house_date']) ? $data['open_house_date'] : null;
        $this->container['open_house_end_time'] = isset($data['open_house_end_time']) ? $data['open_house_end_time'] : null;
        $this->container['open_house_start_time'] = isset($data['open_house_start_time']) ? $data['open_house_start_time'] : null;
        $this->container['open_house_text'] = isset($data['open_house_text']) ? $data['open_house_text'] : null;
        $this->container['option'] = isset($data['option']) ? $data['option'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets open_house_date
     *
     * @return \DateTime
     */
    public function getOpenHouseDate()
    {
        return $this->container['open_house_date'];
    }

    /**
     * Sets open_house_date
     *
     * @param \DateTime $open_house_date open_house_date
     *
     * @return $this
     */
    public function setOpenHouseDate($open_house_date)
    {
        $this->container['open_house_date'] = $open_house_date;

        return $this;
    }

    /**
     * Gets open_house_end_time
     *
     * @return \DateTime
     */
    public function getOpenHouseEndTime()
    {
        return $this->container['open_house_end_time'];
    }

    /**
     * Sets open_house_end_time
     *
     * @param \DateTime $open_house_end_time open_house_end_time
     *
     * @return $this
     */
    public function setOpenHouseEndTime($open_house_end_time)
    {
        $this->container['open_house_end_time'] = $open_house_end_time;

        return $this;
    }

    /**
     * Gets open_house_start_time
     *
     * @return \DateTime
     */
    public function getOpenHouseStartTime()
    {
        return $this->container['open_house_start_time'];
    }

    /**
     * Sets open_house_start_time
     *
     * @param \DateTime $open_house_start_time open_house_start_time
     *
     * @return $this
     */
    public function setOpenHouseStartTime($open_house_start_time)
    {
        $this->container['open_house_start_time'] = $open_house_start_time;

        return $this;
    }

    /**
     * Gets open_house_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getOpenHouseText()
    {
        return $this->container['open_house_text'];
    }

    /**
     * Sets open_house_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $open_house_text open_house_text
     *
     * @return $this
     */
    public function setOpenHouseText($open_house_text)
    {
        $this->container['open_house_text'] = $open_house_text;

        return $this;
    }

    /**
     * Gets option
     *
     * @return \Swagger\Client\Model\OpenHouseRecurrence
     */
    public function getOption()
    {
        return $this->container['option'];
    }

    /**
     * Sets option
     *
     * @param \Swagger\Client\Model\OpenHouseRecurrence $option option
     *
     * @return $this
     */
    public function setOption($option)
    {
        $this->container['option'] = $option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


