<?php
/**
 * DocumentTemplateSnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentTemplateSnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentTemplateSnapShot implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentTemplateSnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_time_created' => '\DateTime',
        'date_time_modified' => '\DateTime',
        'document_template_type' => '\Swagger\Client\Model\DocumentTemplateType',
        'id' => 'string',
        'name' => 'string',
        'needs_applicants' => 'bool',
        'needs_cadastre' => 'bool',
        'needs_list_of_goods' => 'bool',
        'needs_notary' => 'bool',
        'needs_object_assignment' => 'bool',
        'needs_property_managers' => 'bool',
        'needs_signatures' => 'bool',
        'needs_vendors' => 'bool',
        'supported_real_estate_groups' => '\Swagger\Client\Model\RealEstateGroup[]',
        'support_for_rent' => 'bool',
        'support_for_sale' => 'bool',
        'is_active' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_time_created' => 'date-time',
        'date_time_modified' => 'date-time',
        'document_template_type' => null,
        'id' => 'guid',
        'name' => null,
        'needs_applicants' => null,
        'needs_cadastre' => null,
        'needs_list_of_goods' => null,
        'needs_notary' => null,
        'needs_object_assignment' => null,
        'needs_property_managers' => null,
        'needs_signatures' => null,
        'needs_vendors' => null,
        'supported_real_estate_groups' => null,
        'support_for_rent' => null,
        'support_for_sale' => null,
        'is_active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_time_created' => 'dateTimeCreated',
        'date_time_modified' => 'dateTimeModified',
        'document_template_type' => 'documentTemplateType',
        'id' => 'id',
        'name' => 'name',
        'needs_applicants' => 'needsApplicants',
        'needs_cadastre' => 'needsCadastre',
        'needs_list_of_goods' => 'needsListOfGoods',
        'needs_notary' => 'needsNotary',
        'needs_object_assignment' => 'needsObjectAssignment',
        'needs_property_managers' => 'needsPropertyManagers',
        'needs_signatures' => 'needsSignatures',
        'needs_vendors' => 'needsVendors',
        'supported_real_estate_groups' => 'supportedRealEstateGroups',
        'support_for_rent' => 'supportForRent',
        'support_for_sale' => 'supportForSale',
        'is_active' => 'isActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_time_created' => 'setDateTimeCreated',
        'date_time_modified' => 'setDateTimeModified',
        'document_template_type' => 'setDocumentTemplateType',
        'id' => 'setId',
        'name' => 'setName',
        'needs_applicants' => 'setNeedsApplicants',
        'needs_cadastre' => 'setNeedsCadastre',
        'needs_list_of_goods' => 'setNeedsListOfGoods',
        'needs_notary' => 'setNeedsNotary',
        'needs_object_assignment' => 'setNeedsObjectAssignment',
        'needs_property_managers' => 'setNeedsPropertyManagers',
        'needs_signatures' => 'setNeedsSignatures',
        'needs_vendors' => 'setNeedsVendors',
        'supported_real_estate_groups' => 'setSupportedRealEstateGroups',
        'support_for_rent' => 'setSupportForRent',
        'support_for_sale' => 'setSupportForSale',
        'is_active' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_time_created' => 'getDateTimeCreated',
        'date_time_modified' => 'getDateTimeModified',
        'document_template_type' => 'getDocumentTemplateType',
        'id' => 'getId',
        'name' => 'getName',
        'needs_applicants' => 'getNeedsApplicants',
        'needs_cadastre' => 'getNeedsCadastre',
        'needs_list_of_goods' => 'getNeedsListOfGoods',
        'needs_notary' => 'getNeedsNotary',
        'needs_object_assignment' => 'getNeedsObjectAssignment',
        'needs_property_managers' => 'getNeedsPropertyManagers',
        'needs_signatures' => 'getNeedsSignatures',
        'needs_vendors' => 'getNeedsVendors',
        'supported_real_estate_groups' => 'getSupportedRealEstateGroups',
        'support_for_rent' => 'getSupportForRent',
        'support_for_sale' => 'getSupportForSale',
        'is_active' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_time_created'] = isset($data['date_time_created']) ? $data['date_time_created'] : null;
        $this->container['date_time_modified'] = isset($data['date_time_modified']) ? $data['date_time_modified'] : null;
        $this->container['document_template_type'] = isset($data['document_template_type']) ? $data['document_template_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['needs_applicants'] = isset($data['needs_applicants']) ? $data['needs_applicants'] : null;
        $this->container['needs_cadastre'] = isset($data['needs_cadastre']) ? $data['needs_cadastre'] : null;
        $this->container['needs_list_of_goods'] = isset($data['needs_list_of_goods']) ? $data['needs_list_of_goods'] : null;
        $this->container['needs_notary'] = isset($data['needs_notary']) ? $data['needs_notary'] : null;
        $this->container['needs_object_assignment'] = isset($data['needs_object_assignment']) ? $data['needs_object_assignment'] : null;
        $this->container['needs_property_managers'] = isset($data['needs_property_managers']) ? $data['needs_property_managers'] : null;
        $this->container['needs_signatures'] = isset($data['needs_signatures']) ? $data['needs_signatures'] : null;
        $this->container['needs_vendors'] = isset($data['needs_vendors']) ? $data['needs_vendors'] : null;
        $this->container['supported_real_estate_groups'] = isset($data['supported_real_estate_groups']) ? $data['supported_real_estate_groups'] : null;
        $this->container['support_for_rent'] = isset($data['support_for_rent']) ? $data['support_for_rent'] : null;
        $this->container['support_for_sale'] = isset($data['support_for_sale']) ? $data['support_for_sale'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['date_time_created'] === null) {
            $invalidProperties[] = "'date_time_created' can't be null";
        }
        if ($this->container['date_time_modified'] === null) {
            $invalidProperties[] = "'date_time_modified' can't be null";
        }
        if ($this->container['document_template_type'] === null) {
            $invalidProperties[] = "'document_template_type' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['needs_applicants'] === null) {
            $invalidProperties[] = "'needs_applicants' can't be null";
        }
        if ($this->container['needs_cadastre'] === null) {
            $invalidProperties[] = "'needs_cadastre' can't be null";
        }
        if ($this->container['needs_list_of_goods'] === null) {
            $invalidProperties[] = "'needs_list_of_goods' can't be null";
        }
        if ($this->container['needs_notary'] === null) {
            $invalidProperties[] = "'needs_notary' can't be null";
        }
        if ($this->container['needs_object_assignment'] === null) {
            $invalidProperties[] = "'needs_object_assignment' can't be null";
        }
        if ($this->container['needs_property_managers'] === null) {
            $invalidProperties[] = "'needs_property_managers' can't be null";
        }
        if ($this->container['needs_signatures'] === null) {
            $invalidProperties[] = "'needs_signatures' can't be null";
        }
        if ($this->container['needs_vendors'] === null) {
            $invalidProperties[] = "'needs_vendors' can't be null";
        }
        if ($this->container['support_for_rent'] === null) {
            $invalidProperties[] = "'support_for_rent' can't be null";
        }
        if ($this->container['support_for_sale'] === null) {
            $invalidProperties[] = "'support_for_sale' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_time_created
     *
     * @return \DateTime
     */
    public function getDateTimeCreated()
    {
        return $this->container['date_time_created'];
    }

    /**
     * Sets date_time_created
     *
     * @param \DateTime $date_time_created date_time_created
     *
     * @return $this
     */
    public function setDateTimeCreated($date_time_created)
    {
        $this->container['date_time_created'] = $date_time_created;

        return $this;
    }

    /**
     * Gets date_time_modified
     *
     * @return \DateTime
     */
    public function getDateTimeModified()
    {
        return $this->container['date_time_modified'];
    }

    /**
     * Sets date_time_modified
     *
     * @param \DateTime $date_time_modified date_time_modified
     *
     * @return $this
     */
    public function setDateTimeModified($date_time_modified)
    {
        $this->container['date_time_modified'] = $date_time_modified;

        return $this;
    }

    /**
     * Gets document_template_type
     *
     * @return \Swagger\Client\Model\DocumentTemplateType
     */
    public function getDocumentTemplateType()
    {
        return $this->container['document_template_type'];
    }

    /**
     * Sets document_template_type
     *
     * @param \Swagger\Client\Model\DocumentTemplateType $document_template_type document_template_type
     *
     * @return $this
     */
    public function setDocumentTemplateType($document_template_type)
    {
        $this->container['document_template_type'] = $document_template_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {

        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling DocumentTemplateSnapShot., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets needs_applicants
     *
     * @return bool
     */
    public function getNeedsApplicants()
    {
        return $this->container['needs_applicants'];
    }

    /**
     * Sets needs_applicants
     *
     * @param bool $needs_applicants needs_applicants
     *
     * @return $this
     */
    public function setNeedsApplicants($needs_applicants)
    {
        $this->container['needs_applicants'] = $needs_applicants;

        return $this;
    }

    /**
     * Gets needs_cadastre
     *
     * @return bool
     */
    public function getNeedsCadastre()
    {
        return $this->container['needs_cadastre'];
    }

    /**
     * Sets needs_cadastre
     *
     * @param bool $needs_cadastre needs_cadastre
     *
     * @return $this
     */
    public function setNeedsCadastre($needs_cadastre)
    {
        $this->container['needs_cadastre'] = $needs_cadastre;

        return $this;
    }

    /**
     * Gets needs_list_of_goods
     *
     * @return bool
     */
    public function getNeedsListOfGoods()
    {
        return $this->container['needs_list_of_goods'];
    }

    /**
     * Sets needs_list_of_goods
     *
     * @param bool $needs_list_of_goods needs_list_of_goods
     *
     * @return $this
     */
    public function setNeedsListOfGoods($needs_list_of_goods)
    {
        $this->container['needs_list_of_goods'] = $needs_list_of_goods;

        return $this;
    }

    /**
     * Gets needs_notary
     *
     * @return bool
     */
    public function getNeedsNotary()
    {
        return $this->container['needs_notary'];
    }

    /**
     * Sets needs_notary
     *
     * @param bool $needs_notary needs_notary
     *
     * @return $this
     */
    public function setNeedsNotary($needs_notary)
    {
        $this->container['needs_notary'] = $needs_notary;

        return $this;
    }

    /**
     * Gets needs_object_assignment
     *
     * @return bool
     */
    public function getNeedsObjectAssignment()
    {
        return $this->container['needs_object_assignment'];
    }

    /**
     * Sets needs_object_assignment
     *
     * @param bool $needs_object_assignment needs_object_assignment
     *
     * @return $this
     */
    public function setNeedsObjectAssignment($needs_object_assignment)
    {
        $this->container['needs_object_assignment'] = $needs_object_assignment;

        return $this;
    }

    /**
     * Gets needs_property_managers
     *
     * @return bool
     */
    public function getNeedsPropertyManagers()
    {
        return $this->container['needs_property_managers'];
    }

    /**
     * Sets needs_property_managers
     *
     * @param bool $needs_property_managers needs_property_managers
     *
     * @return $this
     */
    public function setNeedsPropertyManagers($needs_property_managers)
    {
        $this->container['needs_property_managers'] = $needs_property_managers;

        return $this;
    }

    /**
     * Gets needs_signatures
     *
     * @return bool
     */
    public function getNeedsSignatures()
    {
        return $this->container['needs_signatures'];
    }

    /**
     * Sets needs_signatures
     *
     * @param bool $needs_signatures needs_signatures
     *
     * @return $this
     */
    public function setNeedsSignatures($needs_signatures)
    {
        $this->container['needs_signatures'] = $needs_signatures;

        return $this;
    }

    /**
     * Gets needs_vendors
     *
     * @return bool
     */
    public function getNeedsVendors()
    {
        return $this->container['needs_vendors'];
    }

    /**
     * Sets needs_vendors
     *
     * @param bool $needs_vendors needs_vendors
     *
     * @return $this
     */
    public function setNeedsVendors($needs_vendors)
    {
        $this->container['needs_vendors'] = $needs_vendors;

        return $this;
    }

    /**
     * Gets supported_real_estate_groups
     *
     * @return \Swagger\Client\Model\RealEstateGroup[]
     */
    public function getSupportedRealEstateGroups()
    {
        return $this->container['supported_real_estate_groups'];
    }

    /**
     * Sets supported_real_estate_groups
     *
     * @param \Swagger\Client\Model\RealEstateGroup[] $supported_real_estate_groups supported_real_estate_groups
     *
     * @return $this
     */
    public function setSupportedRealEstateGroups($supported_real_estate_groups)
    {
        $this->container['supported_real_estate_groups'] = $supported_real_estate_groups;

        return $this;
    }

    /**
     * Gets support_for_rent
     *
     * @return bool
     */
    public function getSupportForRent()
    {
        return $this->container['support_for_rent'];
    }

    /**
     * Sets support_for_rent
     *
     * @param bool $support_for_rent support_for_rent
     *
     * @return $this
     */
    public function setSupportForRent($support_for_rent)
    {
        $this->container['support_for_rent'] = $support_for_rent;

        return $this;
    }

    /**
     * Gets support_for_sale
     *
     * @return bool
     */
    public function getSupportForSale()
    {
        return $this->container['support_for_sale'];
    }

    /**
     * Sets support_for_sale
     *
     * @param bool $support_for_sale support_for_sale
     *
     * @return $this
     */
    public function setSupportForSale($support_for_sale)
    {
        $this->container['support_for_sale'] = $support_for_sale;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


