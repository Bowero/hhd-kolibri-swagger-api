<?php
/**
 * DocumentTemplatesSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentTemplatesSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentTemplatesSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentTemplatesSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order' => '\Swagger\Client\Model\SearchRequestOrder',
        'skip' => 'int',
        'take' => 'int',
        'term' => 'string',
        'term_fields' => '\Swagger\Client\Model\DocumentTemplateTermField[]',
        'order_by' => '\Swagger\Client\Model\DocumentTemplatesSearchRequestOrderBy',
        'template_id' => 'string',
        'filter_by_real_estate_groups' => '\Swagger\Client\Model\RealEstateGroup[]',
        'filter_by_document_template_types' => '\Swagger\Client\Model\DocumentTemplateType[]',
        'for_sale' => 'bool',
        'for_rent' => 'bool',
        'is_active' => '\Swagger\Client\Model\ActiveFilter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order' => null,
        'skip' => 'int32',
        'take' => 'int32',
        'term' => null,
        'term_fields' => null,
        'order_by' => null,
        'template_id' => 'guid',
        'filter_by_real_estate_groups' => null,
        'filter_by_document_template_types' => null,
        'for_sale' => null,
        'for_rent' => null,
        'is_active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order' => 'order',
        'skip' => 'skip',
        'take' => 'take',
        'term' => 'term',
        'term_fields' => 'termFields',
        'order_by' => 'orderBy',
        'template_id' => 'templateId',
        'filter_by_real_estate_groups' => 'filterByRealEstateGroups',
        'filter_by_document_template_types' => 'filterByDocumentTemplateTypes',
        'for_sale' => 'forSale',
        'for_rent' => 'forRent',
        'is_active' => 'isActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order' => 'setOrder',
        'skip' => 'setSkip',
        'take' => 'setTake',
        'term' => 'setTerm',
        'term_fields' => 'setTermFields',
        'order_by' => 'setOrderBy',
        'template_id' => 'setTemplateId',
        'filter_by_real_estate_groups' => 'setFilterByRealEstateGroups',
        'filter_by_document_template_types' => 'setFilterByDocumentTemplateTypes',
        'for_sale' => 'setForSale',
        'for_rent' => 'setForRent',
        'is_active' => 'setIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order' => 'getOrder',
        'skip' => 'getSkip',
        'take' => 'getTake',
        'term' => 'getTerm',
        'term_fields' => 'getTermFields',
        'order_by' => 'getOrderBy',
        'template_id' => 'getTemplateId',
        'filter_by_real_estate_groups' => 'getFilterByRealEstateGroups',
        'filter_by_document_template_types' => 'getFilterByDocumentTemplateTypes',
        'for_sale' => 'getForSale',
        'for_rent' => 'getForRent',
        'is_active' => 'getIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['skip'] = isset($data['skip']) ? $data['skip'] : null;
        $this->container['take'] = isset($data['take']) ? $data['take'] : null;
        $this->container['term'] = isset($data['term']) ? $data['term'] : null;
        $this->container['term_fields'] = isset($data['term_fields']) ? $data['term_fields'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['filter_by_real_estate_groups'] = isset($data['filter_by_real_estate_groups']) ? $data['filter_by_real_estate_groups'] : null;
        $this->container['filter_by_document_template_types'] = isset($data['filter_by_document_template_types']) ? $data['filter_by_document_template_types'] : null;
        $this->container['for_sale'] = isset($data['for_sale']) ? $data['for_sale'] : null;
        $this->container['for_rent'] = isset($data['for_rent']) ? $data['for_rent'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['skip'] === null) {
            $invalidProperties[] = "'skip' can't be null";
        }
        if (($this->container['skip'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'skip', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['skip'] < 0)) {
            $invalidProperties[] = "invalid value for 'skip', must be bigger than or equal to 0.";
        }

        if ($this->container['take'] === null) {
            $invalidProperties[] = "'take' can't be null";
        }
        if (($this->container['take'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'take', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['take'] < 0)) {
            $invalidProperties[] = "invalid value for 'take', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['term']) && (mb_strlen($this->container['term']) > 50)) {
            $invalidProperties[] = "invalid value for 'term', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['term']) && (mb_strlen($this->container['term']) < 0)) {
            $invalidProperties[] = "invalid value for 'term', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['order_by'] === null) {
            $invalidProperties[] = "'order_by' can't be null";
        }
        if ($this->container['for_sale'] === null) {
            $invalidProperties[] = "'for_sale' can't be null";
        }
        if ($this->container['for_rent'] === null) {
            $invalidProperties[] = "'for_rent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order
     *
     * @return \Swagger\Client\Model\SearchRequestOrder
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Swagger\Client\Model\SearchRequestOrder $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets skip
     *
     * @return int
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int $skip Number of results to skip.
     *
     * @return $this
     */
    public function setSkip($skip)
    {

        if (($skip > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $skip when calling DocumentTemplatesSearchRequest., must be smaller than or equal to 2147483647.');
        }
        if (($skip < 0)) {
            throw new \InvalidArgumentException('invalid value for $skip when calling DocumentTemplatesSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets take
     *
     * @return int
     */
    public function getTake()
    {
        return $this->container['take'];
    }

    /**
     * Sets take
     *
     * @param int $take Number of results to return.
     *
     * @return $this
     */
    public function setTake($take)
    {

        if (($take > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $take when calling DocumentTemplatesSearchRequest., must be smaller than or equal to 2147483647.');
        }
        if (($take < 0)) {
            throw new \InvalidArgumentException('invalid value for $take when calling DocumentTemplatesSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['take'] = $take;

        return $this;
    }

    /**
     * Gets term
     *
     * @return string
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param string $term Search by given text term in the fields indicated by TermFields
     *
     * @return $this
     */
    public function setTerm($term)
    {
        if (!is_null($term) && (mb_strlen($term) > 50)) {
            throw new \InvalidArgumentException('invalid length for $term when calling DocumentTemplatesSearchRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($term) && (mb_strlen($term) < 0)) {
            throw new \InvalidArgumentException('invalid length for $term when calling DocumentTemplatesSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets term_fields
     *
     * @return \Swagger\Client\Model\DocumentTemplateTermField[]
     */
    public function getTermFields()
    {
        return $this->container['term_fields'];
    }

    /**
     * Sets term_fields
     *
     * @param \Swagger\Client\Model\DocumentTemplateTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case 'Term' is given.
     *
     * @return $this
     */
    public function setTermFields($term_fields)
    {
        $this->container['term_fields'] = $term_fields;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Swagger\Client\Model\DocumentTemplatesSearchRequestOrderBy
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Swagger\Client\Model\DocumentTemplatesSearchRequestOrderBy $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets filter_by_real_estate_groups
     *
     * @return \Swagger\Client\Model\RealEstateGroup[]
     */
    public function getFilterByRealEstateGroups()
    {
        return $this->container['filter_by_real_estate_groups'];
    }

    /**
     * Sets filter_by_real_estate_groups
     *
     * @param \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...).
     *
     * @return $this
     */
    public function setFilterByRealEstateGroups($filter_by_real_estate_groups)
    {
        $this->container['filter_by_real_estate_groups'] = $filter_by_real_estate_groups;

        return $this;
    }

    /**
     * Gets filter_by_document_template_types
     *
     * @return \Swagger\Client\Model\DocumentTemplateType[]
     */
    public function getFilterByDocumentTemplateTypes()
    {
        return $this->container['filter_by_document_template_types'];
    }

    /**
     * Sets filter_by_document_template_types
     *
     * @param \Swagger\Client\Model\DocumentTemplateType[] $filter_by_document_template_types filter_by_document_template_types
     *
     * @return $this
     */
    public function setFilterByDocumentTemplateTypes($filter_by_document_template_types)
    {
        $this->container['filter_by_document_template_types'] = $filter_by_document_template_types;

        return $this;
    }

    /**
     * Gets for_sale
     *
     * @return bool
     */
    public function getForSale()
    {
        return $this->container['for_sale'];
    }

    /**
     * Sets for_sale
     *
     * @param bool $for_sale for_sale
     *
     * @return $this
     */
    public function setForSale($for_sale)
    {
        $this->container['for_sale'] = $for_sale;

        return $this;
    }

    /**
     * Gets for_rent
     *
     * @return bool
     */
    public function getForRent()
    {
        return $this->container['for_rent'];
    }

    /**
     * Sets for_rent
     *
     * @param bool $for_rent for_rent
     *
     * @return $this
     */
    public function setForRent($for_rent)
    {
        $this->container['for_rent'] = $for_rent;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return \Swagger\Client\Model\ActiveFilter
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param \Swagger\Client\Model\ActiveFilter $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


