<?php
/**
 * CommissionScale
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CommissionScale Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommissionScale implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommissionScale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_price_min' => 'float',
        'transaction_price_max' => 'float',
        'commission_percentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_price_min' => 'decimal',
        'transaction_price_max' => 'decimal',
        'commission_percentage' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_price_min' => 'transactionPriceMin',
        'transaction_price_max' => 'transactionPriceMax',
        'commission_percentage' => 'commissionPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_price_min' => 'setTransactionPriceMin',
        'transaction_price_max' => 'setTransactionPriceMax',
        'commission_percentage' => 'setCommissionPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_price_min' => 'getTransactionPriceMin',
        'transaction_price_max' => 'getTransactionPriceMax',
        'commission_percentage' => 'getCommissionPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_price_min'] = isset($data['transaction_price_min']) ? $data['transaction_price_min'] : null;
        $this->container['transaction_price_max'] = isset($data['transaction_price_max']) ? $data['transaction_price_max'] : null;
        $this->container['commission_percentage'] = isset($data['commission_percentage']) ? $data['commission_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['transaction_price_min'] === null) {
            $invalidProperties[] = "'transaction_price_min' can't be null";
        }
        if (($this->container['transaction_price_min'] < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_price_min', must be bigger than or equal to 0.";
        }

        if ($this->container['transaction_price_max'] === null) {
            $invalidProperties[] = "'transaction_price_max' can't be null";
        }
        if (($this->container['transaction_price_max'] < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_price_max', must be bigger than or equal to 0.";
        }

        if ($this->container['commission_percentage'] === null) {
            $invalidProperties[] = "'commission_percentage' can't be null";
        }
        if (($this->container['commission_percentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'commission_percentage', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_price_min
     *
     * @return float
     */
    public function getTransactionPriceMin()
    {
        return $this->container['transaction_price_min'];
    }

    /**
     * Sets transaction_price_min
     *
     * @param float $transaction_price_min transaction_price_min
     *
     * @return $this
     */
    public function setTransactionPriceMin($transaction_price_min)
    {

        if (($transaction_price_min < 0)) {
            throw new \InvalidArgumentException('invalid value for $transaction_price_min when calling CommissionScale., must be bigger than or equal to 0.');
        }

        $this->container['transaction_price_min'] = $transaction_price_min;

        return $this;
    }

    /**
     * Gets transaction_price_max
     *
     * @return float
     */
    public function getTransactionPriceMax()
    {
        return $this->container['transaction_price_max'];
    }

    /**
     * Sets transaction_price_max
     *
     * @param float $transaction_price_max transaction_price_max
     *
     * @return $this
     */
    public function setTransactionPriceMax($transaction_price_max)
    {

        if (($transaction_price_max < 0)) {
            throw new \InvalidArgumentException('invalid value for $transaction_price_max when calling CommissionScale., must be bigger than or equal to 0.');
        }

        $this->container['transaction_price_max'] = $transaction_price_max;

        return $this;
    }

    /**
     * Gets commission_percentage
     *
     * @return float
     */
    public function getCommissionPercentage()
    {
        return $this->container['commission_percentage'];
    }

    /**
     * Sets commission_percentage
     *
     * @param float $commission_percentage commission_percentage
     *
     * @return $this
     */
    public function setCommissionPercentage($commission_percentage)
    {

        if (($commission_percentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $commission_percentage when calling CommissionScale., must be bigger than or equal to 0.');
        }

        $this->container['commission_percentage'] = $commission_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


