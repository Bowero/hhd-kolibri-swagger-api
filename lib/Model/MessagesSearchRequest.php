<?php
/**
 * MessagesSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * MessagesSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagesSearchRequest extends SearchRequest 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MessagesSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'filter_by_message_types' => '\Swagger\Client\Model\MessageType[]',
        'order_by' => 'object',
        'term_fields' => '\Swagger\Client\Model\MessageTermField[]',
        'min_date_time_created' => '\DateTime',
        'max_date_time_created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'filter_by_message_types' => null,
        'order_by' => null,
        'term_fields' => null,
        'min_date_time_created' => 'date-time',
        'max_date_time_created' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'filter_by_message_types' => 'filterByMessageTypes',
        'order_by' => 'orderBy',
        'term_fields' => 'termFields',
        'min_date_time_created' => 'minDateTimeCreated',
        'max_date_time_created' => 'maxDateTimeCreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'filter_by_message_types' => 'setFilterByMessageTypes',
        'order_by' => 'setOrderBy',
        'term_fields' => 'setTermFields',
        'min_date_time_created' => 'setMinDateTimeCreated',
        'max_date_time_created' => 'setMaxDateTimeCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'filter_by_message_types' => 'getFilterByMessageTypes',
        'order_by' => 'getOrderBy',
        'term_fields' => 'getTermFields',
        'min_date_time_created' => 'getMinDateTimeCreated',
        'max_date_time_created' => 'getMaxDateTimeCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['filter_by_message_types'] = isset($data['filter_by_message_types']) ? $data['filter_by_message_types'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['term_fields'] = isset($data['term_fields']) ? $data['term_fields'] : null;
        $this->container['min_date_time_created'] = isset($data['min_date_time_created']) ? $data['min_date_time_created'] : null;
        $this->container['max_date_time_created'] = isset($data['max_date_time_created']) ? $data['max_date_time_created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets filter_by_message_types
     *
     * @return \Swagger\Client\Model\MessageType[]
     */
    public function getFilterByMessageTypes()
    {
        return $this->container['filter_by_message_types'];
    }

    /**
     * Sets filter_by_message_types
     *
     * @param \Swagger\Client\Model\MessageType[] $filter_by_message_types Filter by items of given message type.
     *
     * @return $this
     */
    public function setFilterByMessageTypes($filter_by_message_types)
    {
        $this->container['filter_by_message_types'] = $filter_by_message_types;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return object
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param object $order_by Order the results by the indicated Message field.
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets term_fields
     *
     * @return \Swagger\Client\Model\MessageTermField[]
     */
    public function getTermFields()
    {
        return $this->container['term_fields'];
    }

    /**
     * Sets term_fields
     *
     * @param \Swagger\Client\Model\MessageTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case 'Term' is given.
     *
     * @return $this
     */
    public function setTermFields($term_fields)
    {
        $this->container['term_fields'] = $term_fields;

        return $this;
    }

    /**
     * Gets min_date_time_created
     *
     * @return \DateTime
     */
    public function getMinDateTimeCreated()
    {
        return $this->container['min_date_time_created'];
    }

    /**
     * Sets min_date_time_created
     *
     * @param \DateTime $min_date_time_created Filter by items created at or after the minimum datetime created.
     *
     * @return $this
     */
    public function setMinDateTimeCreated($min_date_time_created)
    {
        $this->container['min_date_time_created'] = $min_date_time_created;

        return $this;
    }

    /**
     * Gets max_date_time_created
     *
     * @return \DateTime
     */
    public function getMaxDateTimeCreated()
    {
        return $this->container['max_date_time_created'];
    }

    /**
     * Sets max_date_time_created
     *
     * @param \DateTime $max_date_time_created Filter by items created at or before the given maximum datetime created.
     *
     * @return $this
     */
    public function setMaxDateTimeCreated($max_date_time_created)
    {
        $this->container['max_date_time_created'] = $max_date_time_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


