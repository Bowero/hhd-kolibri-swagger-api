<?php
/**
 * ReminderNotificationSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ReminderNotificationSetting Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReminderNotificationSetting extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReminderNotificationSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'setting_is_active' => 'bool',
        'first_notification_in_days' => 'int',
        'second_notification_in_months' => 'int',
        'third_notification_in_years' => 'int',
        'single_notification' => 'int',
        'is_single_notification' => 'bool',
        'date_format' => '\Swagger\Client\Model\NotificationDateFormat',
        'setting_type' => '\Swagger\Client\Model\ReminderNotificationSettingType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'setting_is_active' => null,
        'first_notification_in_days' => 'int32',
        'second_notification_in_months' => 'int32',
        'third_notification_in_years' => 'int32',
        'single_notification' => 'int32',
        'is_single_notification' => null,
        'date_format' => null,
        'setting_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'setting_is_active' => 'settingIsActive',
        'first_notification_in_days' => 'firstNotificationInDays',
        'second_notification_in_months' => 'secondNotificationInMonths',
        'third_notification_in_years' => 'thirdNotificationInYears',
        'single_notification' => 'singleNotification',
        'is_single_notification' => 'isSingleNotification',
        'date_format' => 'dateFormat',
        'setting_type' => 'settingType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'setting_is_active' => 'setSettingIsActive',
        'first_notification_in_days' => 'setFirstNotificationInDays',
        'second_notification_in_months' => 'setSecondNotificationInMonths',
        'third_notification_in_years' => 'setThirdNotificationInYears',
        'single_notification' => 'setSingleNotification',
        'is_single_notification' => 'setIsSingleNotification',
        'date_format' => 'setDateFormat',
        'setting_type' => 'setSettingType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'setting_is_active' => 'getSettingIsActive',
        'first_notification_in_days' => 'getFirstNotificationInDays',
        'second_notification_in_months' => 'getSecondNotificationInMonths',
        'third_notification_in_years' => 'getThirdNotificationInYears',
        'single_notification' => 'getSingleNotification',
        'is_single_notification' => 'getIsSingleNotification',
        'date_format' => 'getDateFormat',
        'setting_type' => 'getSettingType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['setting_is_active'] = isset($data['setting_is_active']) ? $data['setting_is_active'] : null;
        $this->container['first_notification_in_days'] = isset($data['first_notification_in_days']) ? $data['first_notification_in_days'] : null;
        $this->container['second_notification_in_months'] = isset($data['second_notification_in_months']) ? $data['second_notification_in_months'] : null;
        $this->container['third_notification_in_years'] = isset($data['third_notification_in_years']) ? $data['third_notification_in_years'] : null;
        $this->container['single_notification'] = isset($data['single_notification']) ? $data['single_notification'] : null;
        $this->container['is_single_notification'] = isset($data['is_single_notification']) ? $data['is_single_notification'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
        $this->container['setting_type'] = isset($data['setting_type']) ? $data['setting_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets setting_is_active
     *
     * @return bool
     */
    public function getSettingIsActive()
    {
        return $this->container['setting_is_active'];
    }

    /**
     * Sets setting_is_active
     *
     * @param bool $setting_is_active setting_is_active
     *
     * @return $this
     */
    public function setSettingIsActive($setting_is_active)
    {
        $this->container['setting_is_active'] = $setting_is_active;

        return $this;
    }

    /**
     * Gets first_notification_in_days
     *
     * @return int
     */
    public function getFirstNotificationInDays()
    {
        return $this->container['first_notification_in_days'];
    }

    /**
     * Sets first_notification_in_days
     *
     * @param int $first_notification_in_days first_notification_in_days
     *
     * @return $this
     */
    public function setFirstNotificationInDays($first_notification_in_days)
    {
        $this->container['first_notification_in_days'] = $first_notification_in_days;

        return $this;
    }

    /**
     * Gets second_notification_in_months
     *
     * @return int
     */
    public function getSecondNotificationInMonths()
    {
        return $this->container['second_notification_in_months'];
    }

    /**
     * Sets second_notification_in_months
     *
     * @param int $second_notification_in_months second_notification_in_months
     *
     * @return $this
     */
    public function setSecondNotificationInMonths($second_notification_in_months)
    {
        $this->container['second_notification_in_months'] = $second_notification_in_months;

        return $this;
    }

    /**
     * Gets third_notification_in_years
     *
     * @return int
     */
    public function getThirdNotificationInYears()
    {
        return $this->container['third_notification_in_years'];
    }

    /**
     * Sets third_notification_in_years
     *
     * @param int $third_notification_in_years third_notification_in_years
     *
     * @return $this
     */
    public function setThirdNotificationInYears($third_notification_in_years)
    {
        $this->container['third_notification_in_years'] = $third_notification_in_years;

        return $this;
    }

    /**
     * Gets single_notification
     *
     * @return int
     */
    public function getSingleNotification()
    {
        return $this->container['single_notification'];
    }

    /**
     * Sets single_notification
     *
     * @param int $single_notification single_notification
     *
     * @return $this
     */
    public function setSingleNotification($single_notification)
    {
        $this->container['single_notification'] = $single_notification;

        return $this;
    }

    /**
     * Gets is_single_notification
     *
     * @return bool
     */
    public function getIsSingleNotification()
    {
        return $this->container['is_single_notification'];
    }

    /**
     * Sets is_single_notification
     *
     * @param bool $is_single_notification is_single_notification
     *
     * @return $this
     */
    public function setIsSingleNotification($is_single_notification)
    {
        $this->container['is_single_notification'] = $is_single_notification;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return \Swagger\Client\Model\NotificationDateFormat
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param \Swagger\Client\Model\NotificationDateFormat $date_format date_format
     *
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets setting_type
     *
     * @return \Swagger\Client\Model\ReminderNotificationSettingType
     */
    public function getSettingType()
    {
        return $this->container['setting_type'];
    }

    /**
     * Sets setting_type
     *
     * @param \Swagger\Client\Model\ReminderNotificationSettingType $setting_type setting_type
     *
     * @return $this
     */
    public function setSettingType($setting_type)
    {
        $this->container['setting_type'] = $setting_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


