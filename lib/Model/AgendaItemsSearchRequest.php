<?php
/**
 * AgendaItemsSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * AgendaItemsSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgendaItemsSearchRequest extends SearchRequest 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AgendaItemsSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category_ids' => 'string[]',
        'category_types' => '\Swagger\Client\Model\AgendaItemCategoryType[]',
        'employee_ids' => 'string[]',
        'order_by' => 'object',
        'period_date_time_max' => '\DateTime',
        'period_date_time_min' => '\DateTime',
        'term_fields' => '\Swagger\Client\Model\AgendaItemTermField[]',
        'culture' => 'string',
        'is_canceled' => 'bool',
        'is_confirmed' => 'bool',
        'return_occurences_of_recurring_agenda_items' => 'bool',
        'agenda_item_id' => 'string',
        'agenda_item_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category_ids' => 'guid',
        'category_types' => null,
        'employee_ids' => 'guid',
        'order_by' => null,
        'period_date_time_max' => 'date-time',
        'period_date_time_min' => 'date-time',
        'term_fields' => null,
        'culture' => null,
        'is_canceled' => null,
        'is_confirmed' => null,
        'return_occurences_of_recurring_agenda_items' => null,
        'agenda_item_id' => 'guid',
        'agenda_item_ids' => 'guid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_ids' => 'categoryIds',
        'category_types' => 'categoryTypes',
        'employee_ids' => 'employeeIds',
        'order_by' => 'orderBy',
        'period_date_time_max' => 'periodDateTimeMax',
        'period_date_time_min' => 'periodDateTimeMin',
        'term_fields' => 'termFields',
        'culture' => 'culture',
        'is_canceled' => 'isCanceled',
        'is_confirmed' => 'isConfirmed',
        'return_occurences_of_recurring_agenda_items' => 'returnOccurencesOfRecurringAgendaItems',
        'agenda_item_id' => 'agendaItemId',
        'agenda_item_ids' => 'agendaItemIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_ids' => 'setCategoryIds',
        'category_types' => 'setCategoryTypes',
        'employee_ids' => 'setEmployeeIds',
        'order_by' => 'setOrderBy',
        'period_date_time_max' => 'setPeriodDateTimeMax',
        'period_date_time_min' => 'setPeriodDateTimeMin',
        'term_fields' => 'setTermFields',
        'culture' => 'setCulture',
        'is_canceled' => 'setIsCanceled',
        'is_confirmed' => 'setIsConfirmed',
        'return_occurences_of_recurring_agenda_items' => 'setReturnOccurencesOfRecurringAgendaItems',
        'agenda_item_id' => 'setAgendaItemId',
        'agenda_item_ids' => 'setAgendaItemIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_ids' => 'getCategoryIds',
        'category_types' => 'getCategoryTypes',
        'employee_ids' => 'getEmployeeIds',
        'order_by' => 'getOrderBy',
        'period_date_time_max' => 'getPeriodDateTimeMax',
        'period_date_time_min' => 'getPeriodDateTimeMin',
        'term_fields' => 'getTermFields',
        'culture' => 'getCulture',
        'is_canceled' => 'getIsCanceled',
        'is_confirmed' => 'getIsConfirmed',
        'return_occurences_of_recurring_agenda_items' => 'getReturnOccurencesOfRecurringAgendaItems',
        'agenda_item_id' => 'getAgendaItemId',
        'agenda_item_ids' => 'getAgendaItemIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['category_ids'] = isset($data['category_ids']) ? $data['category_ids'] : null;
        $this->container['category_types'] = isset($data['category_types']) ? $data['category_types'] : null;
        $this->container['employee_ids'] = isset($data['employee_ids']) ? $data['employee_ids'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['period_date_time_max'] = isset($data['period_date_time_max']) ? $data['period_date_time_max'] : null;
        $this->container['period_date_time_min'] = isset($data['period_date_time_min']) ? $data['period_date_time_min'] : null;
        $this->container['term_fields'] = isset($data['term_fields']) ? $data['term_fields'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['is_canceled'] = isset($data['is_canceled']) ? $data['is_canceled'] : null;
        $this->container['is_confirmed'] = isset($data['is_confirmed']) ? $data['is_confirmed'] : null;
        $this->container['return_occurences_of_recurring_agenda_items'] = isset($data['return_occurences_of_recurring_agenda_items']) ? $data['return_occurences_of_recurring_agenda_items'] : null;
        $this->container['agenda_item_id'] = isset($data['agenda_item_id']) ? $data['agenda_item_id'] : null;
        $this->container['agenda_item_ids'] = isset($data['agenda_item_ids']) ? $data['agenda_item_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['culture']) && (mb_strlen($this->container['culture']) > 5)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['culture']) && (mb_strlen($this->container['culture']) < 0)) {
            $invalidProperties[] = "invalid value for 'culture', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_ids
     *
     * @return string[]
     */
    public function getCategoryIds()
    {
        return $this->container['category_ids'];
    }

    /**
     * Sets category_ids
     *
     * @param string[] $category_ids Only return agendaItems linked at one of the categories indicated by given AgendaItem category Id's.
     *
     * @return $this
     */
    public function setCategoryIds($category_ids)
    {
        $this->container['category_ids'] = $category_ids;

        return $this;
    }

    /**
     * Gets category_types
     *
     * @return \Swagger\Client\Model\AgendaItemCategoryType[]
     */
    public function getCategoryTypes()
    {
        return $this->container['category_types'];
    }

    /**
     * Sets category_types
     *
     * @param \Swagger\Client\Model\AgendaItemCategoryType[] $category_types Only return agendaItems linked at one of the categories with a category type indicated by given AgendaItem Category Types.
     *
     * @return $this
     */
    public function setCategoryTypes($category_types)
    {
        $this->container['category_types'] = $category_types;

        return $this;
    }

    /**
     * Gets employee_ids
     *
     * @return string[]
     */
    public function getEmployeeIds()
    {
        return $this->container['employee_ids'];
    }

    /**
     * Sets employee_ids
     *
     * @param string[] $employee_ids Search the agendaItems of the given employees.
     *
     * @return $this
     */
    public function setEmployeeIds($employee_ids)
    {
        $this->container['employee_ids'] = $employee_ids;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return object
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param object $order_by Order the results by the indicated AgendaItem field.
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets period_date_time_max
     *
     * @return \DateTime
     */
    public function getPeriodDateTimeMax()
    {
        return $this->container['period_date_time_max'];
    }

    /**
     * Sets period_date_time_max
     *
     * @param \DateTime $period_date_time_max Highest value agenda items should occur. Not required when searching by AgendaItemId.
     *
     * @return $this
     */
    public function setPeriodDateTimeMax($period_date_time_max)
    {
        $this->container['period_date_time_max'] = $period_date_time_max;

        return $this;
    }

    /**
     * Gets period_date_time_min
     *
     * @return \DateTime
     */
    public function getPeriodDateTimeMin()
    {
        return $this->container['period_date_time_min'];
    }

    /**
     * Sets period_date_time_min
     *
     * @param \DateTime $period_date_time_min Lowest value agenda items should occur. Not required when searching by AgendaItemId.
     *
     * @return $this
     */
    public function setPeriodDateTimeMin($period_date_time_min)
    {
        $this->container['period_date_time_min'] = $period_date_time_min;

        return $this;
    }

    /**
     * Gets term_fields
     *
     * @return \Swagger\Client\Model\AgendaItemTermField[]
     */
    public function getTermFields()
    {
        return $this->container['term_fields'];
    }

    /**
     * Sets term_fields
     *
     * @param \Swagger\Client\Model\AgendaItemTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case 'Term' is given.
     *
     * @return $this
     */
    public function setTermFields($term_fields)
    {
        $this->container['term_fields'] = $term_fields;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \"nl-NL\" and \"en-GB\". If no or an unsupported culture is given the default culture is used (\"nl-NL\").
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        if (!is_null($culture) && (mb_strlen($culture) > 5)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling AgendaItemsSearchRequest., must be smaller than or equal to 5.');
        }
        if (!is_null($culture) && (mb_strlen($culture) < 0)) {
            throw new \InvalidArgumentException('invalid length for $culture when calling AgendaItemsSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets is_canceled
     *
     * @return bool
     */
    public function getIsCanceled()
    {
        return $this->container['is_canceled'];
    }

    /**
     * Sets is_canceled
     *
     * @param bool $is_canceled If isCanceled is null, results are eiter canceled or not. If it is defined as true, only canceled results are returned. If it is defined as false, only not canceled results are returned.
     *
     * @return $this
     */
    public function setIsCanceled($is_canceled)
    {
        $this->container['is_canceled'] = $is_canceled;

        return $this;
    }

    /**
     * Gets is_confirmed
     *
     * @return bool
     */
    public function getIsConfirmed()
    {
        return $this->container['is_confirmed'];
    }

    /**
     * Sets is_confirmed
     *
     * @param bool $is_confirmed If isConfirmed is null, results are either confirmed or not. If it is defined as true, only confirmed results are returned. If it is defined as false, only non confirmed results are returned.
     *
     * @return $this
     */
    public function setIsConfirmed($is_confirmed)
    {
        $this->container['is_confirmed'] = $is_confirmed;

        return $this;
    }

    /**
     * Gets return_occurences_of_recurring_agenda_items
     *
     * @return bool
     */
    public function getReturnOccurencesOfRecurringAgendaItems()
    {
        return $this->container['return_occurences_of_recurring_agenda_items'];
    }

    /**
     * Sets return_occurences_of_recurring_agenda_items
     *
     * @param bool $return_occurences_of_recurring_agenda_items If returnOccurencesOfRecurringAgendaItems is set to true each occurence of a recurring agendaitem will be in the search results. When set to false only the recurring agendaItem (with its recurrency patter) is in the results. For the /AgendaItem/Search endpoint the default value of returnOccurencesOfRecurringAgendaItems is false. For the /AgendaItem/SearchAndExport endpoint the default value of returnOccurencesOfRecurringAgendaItems is true.
     *
     * @return $this
     */
    public function setReturnOccurencesOfRecurringAgendaItems($return_occurences_of_recurring_agenda_items)
    {
        $this->container['return_occurences_of_recurring_agenda_items'] = $return_occurences_of_recurring_agenda_items;

        return $this;
    }

    /**
     * Gets agenda_item_id
     *
     * @return string
     */
    public function getAgendaItemId()
    {
        return $this->container['agenda_item_id'];
    }

    /**
     * Sets agenda_item_id
     *
     * @param string $agenda_item_id Search by a specific agendaItem Id. Used to return/refresh one search result.
     *
     * @return $this
     */
    public function setAgendaItemId($agenda_item_id)
    {
        $this->container['agenda_item_id'] = $agenda_item_id;

        return $this;
    }

    /**
     * Gets agenda_item_ids
     *
     * @return string[]
     */
    public function getAgendaItemIds()
    {
        return $this->container['agenda_item_ids'];
    }

    /**
     * Sets agenda_item_ids
     *
     * @param string[] $agenda_item_ids Search by specific agenda item Ids.
     *
     * @return $this
     */
    public function setAgendaItemIds($agenda_item_ids)
    {
        $this->container['agenda_item_ids'] = $agenda_item_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


