<?php
/**
 * DocumentSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentSession Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentSession extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applicants_signing_info' => '\Swagger\Client\Model\SigningInfo',
        'form_element_values' => '\Swagger\Client\Model\FormElement[]',
        'linked_applicants' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'linked_document_template' => '\Swagger\Client\Model\LinkedDocumentTemplate',
        'linked_notary' => '\Swagger\Client\Model\LinkedRelation',
        'linked_property_managers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_vendors' => '\Swagger\Client\Model\LinkedRelation[]',
        'list_of_goods' => '\Swagger\Client\Model\ListOfGoodsValue',
        'md5_hash_generated_document' => 'string',
        'name' => 'string',
        'number_of_signings' => 'int',
        'url' => 'string',
        'vendors_signing_info' => '\Swagger\Client\Model\SigningInfo',
        'blob_details' => '\Swagger\Client\Model\DocumentSessionBlob'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applicants_signing_info' => null,
        'form_element_values' => null,
        'linked_applicants' => null,
        'linked_assignment' => null,
        'linked_document_template' => null,
        'linked_notary' => null,
        'linked_property_managers' => null,
        'linked_vendors' => null,
        'list_of_goods' => null,
        'md5_hash_generated_document' => null,
        'name' => null,
        'number_of_signings' => 'int32',
        'url' => null,
        'vendors_signing_info' => null,
        'blob_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicants_signing_info' => 'applicantsSigningInfo',
        'form_element_values' => 'formElementValues',
        'linked_applicants' => 'linkedApplicants',
        'linked_assignment' => 'linkedAssignment',
        'linked_document_template' => 'linkedDocumentTemplate',
        'linked_notary' => 'linkedNotary',
        'linked_property_managers' => 'linkedPropertyManagers',
        'linked_vendors' => 'linkedVendors',
        'list_of_goods' => 'listOfGoods',
        'md5_hash_generated_document' => 'md5HashGeneratedDocument',
        'name' => 'name',
        'number_of_signings' => 'numberOfSignings',
        'url' => 'url',
        'vendors_signing_info' => 'vendorsSigningInfo',
        'blob_details' => 'blobDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicants_signing_info' => 'setApplicantsSigningInfo',
        'form_element_values' => 'setFormElementValues',
        'linked_applicants' => 'setLinkedApplicants',
        'linked_assignment' => 'setLinkedAssignment',
        'linked_document_template' => 'setLinkedDocumentTemplate',
        'linked_notary' => 'setLinkedNotary',
        'linked_property_managers' => 'setLinkedPropertyManagers',
        'linked_vendors' => 'setLinkedVendors',
        'list_of_goods' => 'setListOfGoods',
        'md5_hash_generated_document' => 'setMd5HashGeneratedDocument',
        'name' => 'setName',
        'number_of_signings' => 'setNumberOfSignings',
        'url' => 'setUrl',
        'vendors_signing_info' => 'setVendorsSigningInfo',
        'blob_details' => 'setBlobDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicants_signing_info' => 'getApplicantsSigningInfo',
        'form_element_values' => 'getFormElementValues',
        'linked_applicants' => 'getLinkedApplicants',
        'linked_assignment' => 'getLinkedAssignment',
        'linked_document_template' => 'getLinkedDocumentTemplate',
        'linked_notary' => 'getLinkedNotary',
        'linked_property_managers' => 'getLinkedPropertyManagers',
        'linked_vendors' => 'getLinkedVendors',
        'list_of_goods' => 'getListOfGoods',
        'md5_hash_generated_document' => 'getMd5HashGeneratedDocument',
        'name' => 'getName',
        'number_of_signings' => 'getNumberOfSignings',
        'url' => 'getUrl',
        'vendors_signing_info' => 'getVendorsSigningInfo',
        'blob_details' => 'getBlobDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['applicants_signing_info'] = isset($data['applicants_signing_info']) ? $data['applicants_signing_info'] : null;
        $this->container['form_element_values'] = isset($data['form_element_values']) ? $data['form_element_values'] : null;
        $this->container['linked_applicants'] = isset($data['linked_applicants']) ? $data['linked_applicants'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['linked_document_template'] = isset($data['linked_document_template']) ? $data['linked_document_template'] : null;
        $this->container['linked_notary'] = isset($data['linked_notary']) ? $data['linked_notary'] : null;
        $this->container['linked_property_managers'] = isset($data['linked_property_managers']) ? $data['linked_property_managers'] : null;
        $this->container['linked_vendors'] = isset($data['linked_vendors']) ? $data['linked_vendors'] : null;
        $this->container['list_of_goods'] = isset($data['list_of_goods']) ? $data['list_of_goods'] : null;
        $this->container['md5_hash_generated_document'] = isset($data['md5_hash_generated_document']) ? $data['md5_hash_generated_document'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_signings'] = isset($data['number_of_signings']) ? $data['number_of_signings'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['vendors_signing_info'] = isset($data['vendors_signing_info']) ? $data['vendors_signing_info'] : null;
        $this->container['blob_details'] = isset($data['blob_details']) ? $data['blob_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applicants_signing_info
     *
     * @return \Swagger\Client\Model\SigningInfo
     */
    public function getApplicantsSigningInfo()
    {
        return $this->container['applicants_signing_info'];
    }

    /**
     * Sets applicants_signing_info
     *
     * @param \Swagger\Client\Model\SigningInfo $applicants_signing_info applicants_signing_info
     *
     * @return $this
     */
    public function setApplicantsSigningInfo($applicants_signing_info)
    {
        $this->container['applicants_signing_info'] = $applicants_signing_info;

        return $this;
    }

    /**
     * Gets form_element_values
     *
     * @return \Swagger\Client\Model\FormElement[]
     */
    public function getFormElementValues()
    {
        return $this->container['form_element_values'];
    }

    /**
     * Sets form_element_values
     *
     * @param \Swagger\Client\Model\FormElement[] $form_element_values form_element_values
     *
     * @return $this
     */
    public function setFormElementValues($form_element_values)
    {
        $this->container['form_element_values'] = $form_element_values;

        return $this;
    }

    /**
     * Gets linked_applicants
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedApplicants()
    {
        return $this->container['linked_applicants'];
    }

    /**
     * Sets linked_applicants
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_applicants linked_applicants
     *
     * @return $this
     */
    public function setLinkedApplicants($linked_applicants)
    {
        $this->container['linked_applicants'] = $linked_applicants;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets linked_document_template
     *
     * @return \Swagger\Client\Model\LinkedDocumentTemplate
     */
    public function getLinkedDocumentTemplate()
    {
        return $this->container['linked_document_template'];
    }

    /**
     * Sets linked_document_template
     *
     * @param \Swagger\Client\Model\LinkedDocumentTemplate $linked_document_template linked_document_template
     *
     * @return $this
     */
    public function setLinkedDocumentTemplate($linked_document_template)
    {
        $this->container['linked_document_template'] = $linked_document_template;

        return $this;
    }

    /**
     * Gets linked_notary
     *
     * @return \Swagger\Client\Model\LinkedRelation
     */
    public function getLinkedNotary()
    {
        return $this->container['linked_notary'];
    }

    /**
     * Sets linked_notary
     *
     * @param \Swagger\Client\Model\LinkedRelation $linked_notary linked_notary
     *
     * @return $this
     */
    public function setLinkedNotary($linked_notary)
    {
        $this->container['linked_notary'] = $linked_notary;

        return $this;
    }

    /**
     * Gets linked_property_managers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPropertyManagers()
    {
        return $this->container['linked_property_managers'];
    }

    /**
     * Sets linked_property_managers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_property_managers linked_property_managers
     *
     * @return $this
     */
    public function setLinkedPropertyManagers($linked_property_managers)
    {
        $this->container['linked_property_managers'] = $linked_property_managers;

        return $this;
    }

    /**
     * Gets linked_vendors
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedVendors()
    {
        return $this->container['linked_vendors'];
    }

    /**
     * Sets linked_vendors
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_vendors linked_vendors
     *
     * @return $this
     */
    public function setLinkedVendors($linked_vendors)
    {
        $this->container['linked_vendors'] = $linked_vendors;

        return $this;
    }

    /**
     * Gets list_of_goods
     *
     * @return \Swagger\Client\Model\ListOfGoodsValue
     */
    public function getListOfGoods()
    {
        return $this->container['list_of_goods'];
    }

    /**
     * Sets list_of_goods
     *
     * @param \Swagger\Client\Model\ListOfGoodsValue $list_of_goods list_of_goods
     *
     * @return $this
     */
    public function setListOfGoods($list_of_goods)
    {
        $this->container['list_of_goods'] = $list_of_goods;

        return $this;
    }

    /**
     * Gets md5_hash_generated_document
     *
     * @return string
     */
    public function getMd5HashGeneratedDocument()
    {
        return $this->container['md5_hash_generated_document'];
    }

    /**
     * Sets md5_hash_generated_document
     *
     * @param string $md5_hash_generated_document md5_hash_generated_document
     *
     * @return $this
     */
    public function setMd5HashGeneratedDocument($md5_hash_generated_document)
    {
        $this->container['md5_hash_generated_document'] = $md5_hash_generated_document;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_signings
     *
     * @return int
     */
    public function getNumberOfSignings()
    {
        return $this->container['number_of_signings'];
    }

    /**
     * Sets number_of_signings
     *
     * @param int $number_of_signings number_of_signings
     *
     * @return $this
     */
    public function setNumberOfSignings($number_of_signings)
    {
        $this->container['number_of_signings'] = $number_of_signings;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets vendors_signing_info
     *
     * @return \Swagger\Client\Model\SigningInfo
     */
    public function getVendorsSigningInfo()
    {
        return $this->container['vendors_signing_info'];
    }

    /**
     * Sets vendors_signing_info
     *
     * @param \Swagger\Client\Model\SigningInfo $vendors_signing_info vendors_signing_info
     *
     * @return $this
     */
    public function setVendorsSigningInfo($vendors_signing_info)
    {
        $this->container['vendors_signing_info'] = $vendors_signing_info;

        return $this;
    }

    /**
     * Gets blob_details
     *
     * @return \Swagger\Client\Model\DocumentSessionBlob
     */
    public function getBlobDetails()
    {
        return $this->container['blob_details'];
    }

    /**
     * Sets blob_details
     *
     * @param \Swagger\Client\Model\DocumentSessionBlob $blob_details blob_details
     *
     * @return $this
     */
    public function setBlobDetails($blob_details)
    {
        $this->container['blob_details'] = $blob_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


