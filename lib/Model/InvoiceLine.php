<?php
/**
 * InvoiceLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceLine Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'float',
        'description' => 'string',
        'export_ledger_account_code_product' => 'string',
        'export_ledger_account_code_tax' => 'string',
        'export_product_code' => 'string',
        'export_tex_code' => 'string',
        'product_id' => 'int',
        'tax_percentage' => 'float',
        'total_price_gross' => 'float',
        'tax_rate_id' => 'int',
        'total_price_net' => 'float',
        'total_tax' => 'float',
        'unit_price_gross' => 'float',
        'unit_price_net' => 'float',
        'unit_tax' => 'float',
        'product_to_pass_on_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => 'decimal',
        'description' => null,
        'export_ledger_account_code_product' => null,
        'export_ledger_account_code_tax' => null,
        'export_product_code' => null,
        'export_tex_code' => null,
        'product_id' => 'int32',
        'tax_percentage' => 'decimal',
        'total_price_gross' => 'decimal',
        'tax_rate_id' => 'int32',
        'total_price_net' => 'decimal',
        'total_tax' => 'decimal',
        'unit_price_gross' => 'decimal',
        'unit_price_net' => 'decimal',
        'unit_tax' => 'decimal',
        'product_to_pass_on_id' => 'guid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'description' => 'description',
        'export_ledger_account_code_product' => 'exportLedgerAccountCodeProduct',
        'export_ledger_account_code_tax' => 'exportLedgerAccountCodeTax',
        'export_product_code' => 'exportProductCode',
        'export_tex_code' => 'exportTexCode',
        'product_id' => 'productID',
        'tax_percentage' => 'taxPercentage',
        'total_price_gross' => 'totalPriceGross',
        'tax_rate_id' => 'taxRateID',
        'total_price_net' => 'totalPriceNet',
        'total_tax' => 'totalTax',
        'unit_price_gross' => 'unitPriceGross',
        'unit_price_net' => 'unitPriceNet',
        'unit_tax' => 'unitTax',
        'product_to_pass_on_id' => 'productToPassOnID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'description' => 'setDescription',
        'export_ledger_account_code_product' => 'setExportLedgerAccountCodeProduct',
        'export_ledger_account_code_tax' => 'setExportLedgerAccountCodeTax',
        'export_product_code' => 'setExportProductCode',
        'export_tex_code' => 'setExportTexCode',
        'product_id' => 'setProductId',
        'tax_percentage' => 'setTaxPercentage',
        'total_price_gross' => 'setTotalPriceGross',
        'tax_rate_id' => 'setTaxRateId',
        'total_price_net' => 'setTotalPriceNet',
        'total_tax' => 'setTotalTax',
        'unit_price_gross' => 'setUnitPriceGross',
        'unit_price_net' => 'setUnitPriceNet',
        'unit_tax' => 'setUnitTax',
        'product_to_pass_on_id' => 'setProductToPassOnId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'description' => 'getDescription',
        'export_ledger_account_code_product' => 'getExportLedgerAccountCodeProduct',
        'export_ledger_account_code_tax' => 'getExportLedgerAccountCodeTax',
        'export_product_code' => 'getExportProductCode',
        'export_tex_code' => 'getExportTexCode',
        'product_id' => 'getProductId',
        'tax_percentage' => 'getTaxPercentage',
        'total_price_gross' => 'getTotalPriceGross',
        'tax_rate_id' => 'getTaxRateId',
        'total_price_net' => 'getTotalPriceNet',
        'total_tax' => 'getTotalTax',
        'unit_price_gross' => 'getUnitPriceGross',
        'unit_price_net' => 'getUnitPriceNet',
        'unit_tax' => 'getUnitTax',
        'product_to_pass_on_id' => 'getProductToPassOnId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['export_ledger_account_code_product'] = isset($data['export_ledger_account_code_product']) ? $data['export_ledger_account_code_product'] : null;
        $this->container['export_ledger_account_code_tax'] = isset($data['export_ledger_account_code_tax']) ? $data['export_ledger_account_code_tax'] : null;
        $this->container['export_product_code'] = isset($data['export_product_code']) ? $data['export_product_code'] : null;
        $this->container['export_tex_code'] = isset($data['export_tex_code']) ? $data['export_tex_code'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['tax_percentage'] = isset($data['tax_percentage']) ? $data['tax_percentage'] : null;
        $this->container['total_price_gross'] = isset($data['total_price_gross']) ? $data['total_price_gross'] : null;
        $this->container['tax_rate_id'] = isset($data['tax_rate_id']) ? $data['tax_rate_id'] : null;
        $this->container['total_price_net'] = isset($data['total_price_net']) ? $data['total_price_net'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['unit_price_gross'] = isset($data['unit_price_gross']) ? $data['unit_price_gross'] : null;
        $this->container['unit_price_net'] = isset($data['unit_price_net']) ? $data['unit_price_net'] : null;
        $this->container['unit_tax'] = isset($data['unit_tax']) ? $data['unit_tax'] : null;
        $this->container['product_to_pass_on_id'] = isset($data['product_to_pass_on_id']) ? $data['product_to_pass_on_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['tax_percentage'] === null) {
            $invalidProperties[] = "'tax_percentage' can't be null";
        }
        if ($this->container['total_price_gross'] === null) {
            $invalidProperties[] = "'total_price_gross' can't be null";
        }
        if ($this->container['total_price_net'] === null) {
            $invalidProperties[] = "'total_price_net' can't be null";
        }
        if ($this->container['total_tax'] === null) {
            $invalidProperties[] = "'total_tax' can't be null";
        }
        if ($this->container['unit_price_gross'] === null) {
            $invalidProperties[] = "'unit_price_gross' can't be null";
        }
        if ($this->container['unit_price_net'] === null) {
            $invalidProperties[] = "'unit_price_net' can't be null";
        }
        if ($this->container['unit_tax'] === null) {
            $invalidProperties[] = "'unit_tax' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets export_ledger_account_code_product
     *
     * @return string
     */
    public function getExportLedgerAccountCodeProduct()
    {
        return $this->container['export_ledger_account_code_product'];
    }

    /**
     * Sets export_ledger_account_code_product
     *
     * @param string $export_ledger_account_code_product export_ledger_account_code_product
     *
     * @return $this
     */
    public function setExportLedgerAccountCodeProduct($export_ledger_account_code_product)
    {
        $this->container['export_ledger_account_code_product'] = $export_ledger_account_code_product;

        return $this;
    }

    /**
     * Gets export_ledger_account_code_tax
     *
     * @return string
     */
    public function getExportLedgerAccountCodeTax()
    {
        return $this->container['export_ledger_account_code_tax'];
    }

    /**
     * Sets export_ledger_account_code_tax
     *
     * @param string $export_ledger_account_code_tax export_ledger_account_code_tax
     *
     * @return $this
     */
    public function setExportLedgerAccountCodeTax($export_ledger_account_code_tax)
    {
        $this->container['export_ledger_account_code_tax'] = $export_ledger_account_code_tax;

        return $this;
    }

    /**
     * Gets export_product_code
     *
     * @return string
     */
    public function getExportProductCode()
    {
        return $this->container['export_product_code'];
    }

    /**
     * Sets export_product_code
     *
     * @param string $export_product_code export_product_code
     *
     * @return $this
     */
    public function setExportProductCode($export_product_code)
    {
        $this->container['export_product_code'] = $export_product_code;

        return $this;
    }

    /**
     * Gets export_tex_code
     *
     * @return string
     */
    public function getExportTexCode()
    {
        return $this->container['export_tex_code'];
    }

    /**
     * Sets export_tex_code
     *
     * @param string $export_tex_code export_tex_code
     *
     * @return $this
     */
    public function setExportTexCode($export_tex_code)
    {
        $this->container['export_tex_code'] = $export_tex_code;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return float
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param float $tax_percentage tax_percentage
     *
     * @return $this
     */
    public function setTaxPercentage($tax_percentage)
    {
        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }

    /**
     * Gets total_price_gross
     *
     * @return float
     */
    public function getTotalPriceGross()
    {
        return $this->container['total_price_gross'];
    }

    /**
     * Sets total_price_gross
     *
     * @param float $total_price_gross total_price_gross
     *
     * @return $this
     */
    public function setTotalPriceGross($total_price_gross)
    {
        $this->container['total_price_gross'] = $total_price_gross;

        return $this;
    }

    /**
     * Gets tax_rate_id
     *
     * @return int
     */
    public function getTaxRateId()
    {
        return $this->container['tax_rate_id'];
    }

    /**
     * Sets tax_rate_id
     *
     * @param int $tax_rate_id tax_rate_id
     *
     * @return $this
     */
    public function setTaxRateId($tax_rate_id)
    {
        $this->container['tax_rate_id'] = $tax_rate_id;

        return $this;
    }

    /**
     * Gets total_price_net
     *
     * @return float
     */
    public function getTotalPriceNet()
    {
        return $this->container['total_price_net'];
    }

    /**
     * Sets total_price_net
     *
     * @param float $total_price_net total_price_net
     *
     * @return $this
     */
    public function setTotalPriceNet($total_price_net)
    {
        $this->container['total_price_net'] = $total_price_net;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return float
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param float $total_tax total_tax
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets unit_price_gross
     *
     * @return float
     */
    public function getUnitPriceGross()
    {
        return $this->container['unit_price_gross'];
    }

    /**
     * Sets unit_price_gross
     *
     * @param float $unit_price_gross unit_price_gross
     *
     * @return $this
     */
    public function setUnitPriceGross($unit_price_gross)
    {
        $this->container['unit_price_gross'] = $unit_price_gross;

        return $this;
    }

    /**
     * Gets unit_price_net
     *
     * @return float
     */
    public function getUnitPriceNet()
    {
        return $this->container['unit_price_net'];
    }

    /**
     * Sets unit_price_net
     *
     * @param float $unit_price_net unit_price_net
     *
     * @return $this
     */
    public function setUnitPriceNet($unit_price_net)
    {
        $this->container['unit_price_net'] = $unit_price_net;

        return $this;
    }

    /**
     * Gets unit_tax
     *
     * @return float
     */
    public function getUnitTax()
    {
        return $this->container['unit_tax'];
    }

    /**
     * Sets unit_tax
     *
     * @param float $unit_tax unit_tax
     *
     * @return $this
     */
    public function setUnitTax($unit_tax)
    {
        $this->container['unit_tax'] = $unit_tax;

        return $this;
    }

    /**
     * Gets product_to_pass_on_id
     *
     * @return string
     */
    public function getProductToPassOnId()
    {
        return $this->container['product_to_pass_on_id'];
    }

    /**
     * Sets product_to_pass_on_id
     *
     * @param string $product_to_pass_on_id product_to_pass_on_id
     *
     * @return $this
     */
    public function setProductToPassOnId($product_to_pass_on_id)
    {
        $this->container['product_to_pass_on_id'] = $product_to_pass_on_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


