<?php
/**
 * FinancialAdministrationTaxRate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FinancialAdministrationTaxRate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinancialAdministrationTaxRate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FinancialAdministrationTaxRate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'description_short' => 'string',
        'export_ledger_account_code' => 'string',
        'export_tax_code' => 'string',
        'id' => 'int',
        'is_active' => 'bool',
        'tax_percentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'description_short' => null,
        'export_ledger_account_code' => null,
        'export_tax_code' => null,
        'id' => 'int32',
        'is_active' => null,
        'tax_percentage' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'description_short' => 'descriptionShort',
        'export_ledger_account_code' => 'exportLedgerAccountCode',
        'export_tax_code' => 'exportTaxCode',
        'id' => 'id',
        'is_active' => 'isActive',
        'tax_percentage' => 'taxPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'description_short' => 'setDescriptionShort',
        'export_ledger_account_code' => 'setExportLedgerAccountCode',
        'export_tax_code' => 'setExportTaxCode',
        'id' => 'setId',
        'is_active' => 'setIsActive',
        'tax_percentage' => 'setTaxPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'description_short' => 'getDescriptionShort',
        'export_ledger_account_code' => 'getExportLedgerAccountCode',
        'export_tax_code' => 'getExportTaxCode',
        'id' => 'getId',
        'is_active' => 'getIsActive',
        'tax_percentage' => 'getTaxPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_short'] = isset($data['description_short']) ? $data['description_short'] : null;
        $this->container['export_ledger_account_code'] = isset($data['export_ledger_account_code']) ? $data['export_ledger_account_code'] : null;
        $this->container['export_tax_code'] = isset($data['export_tax_code']) ? $data['export_tax_code'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['tax_percentage'] = isset($data['tax_percentage']) ? $data['tax_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 500)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description_short']) && (mb_strlen($this->container['description_short']) > 10)) {
            $invalidProperties[] = "invalid value for 'description_short', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['description_short']) && (mb_strlen($this->container['description_short']) < 0)) {
            $invalidProperties[] = "invalid value for 'description_short', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['export_ledger_account_code']) && (mb_strlen($this->container['export_ledger_account_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'export_ledger_account_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['export_ledger_account_code']) && (mb_strlen($this->container['export_ledger_account_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'export_ledger_account_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['export_tax_code']) && (mb_strlen($this->container['export_tax_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'export_tax_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['export_tax_code']) && (mb_strlen($this->container['export_tax_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'export_tax_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['tax_percentage'] === null) {
            $invalidProperties[] = "'tax_percentage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 500)) {
            throw new \InvalidArgumentException('invalid length for $description when calling FinancialAdministrationTaxRate., must be smaller than or equal to 500.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling FinancialAdministrationTaxRate., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_short
     *
     * @return string
     */
    public function getDescriptionShort()
    {
        return $this->container['description_short'];
    }

    /**
     * Sets description_short
     *
     * @param string $description_short description_short
     *
     * @return $this
     */
    public function setDescriptionShort($description_short)
    {
        if (!is_null($description_short) && (mb_strlen($description_short) > 10)) {
            throw new \InvalidArgumentException('invalid length for $description_short when calling FinancialAdministrationTaxRate., must be smaller than or equal to 10.');
        }
        if (!is_null($description_short) && (mb_strlen($description_short) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description_short when calling FinancialAdministrationTaxRate., must be bigger than or equal to 0.');
        }

        $this->container['description_short'] = $description_short;

        return $this;
    }

    /**
     * Gets export_ledger_account_code
     *
     * @return string
     */
    public function getExportLedgerAccountCode()
    {
        return $this->container['export_ledger_account_code'];
    }

    /**
     * Sets export_ledger_account_code
     *
     * @param string $export_ledger_account_code export_ledger_account_code
     *
     * @return $this
     */
    public function setExportLedgerAccountCode($export_ledger_account_code)
    {
        if (!is_null($export_ledger_account_code) && (mb_strlen($export_ledger_account_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $export_ledger_account_code when calling FinancialAdministrationTaxRate., must be smaller than or equal to 10.');
        }
        if (!is_null($export_ledger_account_code) && (mb_strlen($export_ledger_account_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $export_ledger_account_code when calling FinancialAdministrationTaxRate., must be bigger than or equal to 0.');
        }

        $this->container['export_ledger_account_code'] = $export_ledger_account_code;

        return $this;
    }

    /**
     * Gets export_tax_code
     *
     * @return string
     */
    public function getExportTaxCode()
    {
        return $this->container['export_tax_code'];
    }

    /**
     * Sets export_tax_code
     *
     * @param string $export_tax_code export_tax_code
     *
     * @return $this
     */
    public function setExportTaxCode($export_tax_code)
    {
        if (!is_null($export_tax_code) && (mb_strlen($export_tax_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $export_tax_code when calling FinancialAdministrationTaxRate., must be smaller than or equal to 10.');
        }
        if (!is_null($export_tax_code) && (mb_strlen($export_tax_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $export_tax_code when calling FinancialAdministrationTaxRate., must be bigger than or equal to 0.');
        }

        $this->container['export_tax_code'] = $export_tax_code;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return float
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param float $tax_percentage tax_percentage
     *
     * @return $this
     */
    public function setTaxPercentage($tax_percentage)
    {
        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


