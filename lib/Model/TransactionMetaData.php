<?php
/**
 * TransactionMetaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionMetaData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionMetaData extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionMetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'moving_reasons' => '\Swagger\Client\Model\MovingReason[]',
        'linked_assignment' => '\Swagger\Client\Model\LinkedAssignment',
        'is_resident' => 'bool',
        'number_of_household_members' => 'int',
        'buyer_type' => '\Swagger\Client\Model\BuyerType',
        'household_composition' => '\Swagger\Client\Model\HouseholdComposition',
        'age_main_money_maker' => '\Swagger\Client\Model\AgeRange',
        'age_oldest_child' => '\Swagger\Client\Model\ChildAgeRange',
        'family_income' => '\Swagger\Client\Model\FamilyIncome',
        'alv_continuation' => '\Swagger\Client\Model\AlvContinuation',
        'alv_agricultural_function' => '\Swagger\Client\Model\AlvAgriculturalFunction',
        'alv_non_agricultural_function' => '\Swagger\Client\Model\AlvNonAgriculturalFunction',
        'other_alv_function_description' => 'string',
        'left_behind_object' => '\Swagger\Client\Model\LeftBehindObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'moving_reasons' => null,
        'linked_assignment' => null,
        'is_resident' => null,
        'number_of_household_members' => 'int32',
        'buyer_type' => null,
        'household_composition' => null,
        'age_main_money_maker' => null,
        'age_oldest_child' => null,
        'family_income' => null,
        'alv_continuation' => null,
        'alv_agricultural_function' => null,
        'alv_non_agricultural_function' => null,
        'other_alv_function_description' => null,
        'left_behind_object' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'moving_reasons' => 'movingReasons',
        'linked_assignment' => 'linkedAssignment',
        'is_resident' => 'isResident',
        'number_of_household_members' => 'numberOfHouseholdMembers',
        'buyer_type' => 'buyerType',
        'household_composition' => 'householdComposition',
        'age_main_money_maker' => 'ageMainMoneyMaker',
        'age_oldest_child' => 'ageOldestChild',
        'family_income' => 'familyIncome',
        'alv_continuation' => 'alvContinuation',
        'alv_agricultural_function' => 'alvAgriculturalFunction',
        'alv_non_agricultural_function' => 'alvNonAgriculturalFunction',
        'other_alv_function_description' => 'otherAlvFunctionDescription',
        'left_behind_object' => 'leftBehindObject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'moving_reasons' => 'setMovingReasons',
        'linked_assignment' => 'setLinkedAssignment',
        'is_resident' => 'setIsResident',
        'number_of_household_members' => 'setNumberOfHouseholdMembers',
        'buyer_type' => 'setBuyerType',
        'household_composition' => 'setHouseholdComposition',
        'age_main_money_maker' => 'setAgeMainMoneyMaker',
        'age_oldest_child' => 'setAgeOldestChild',
        'family_income' => 'setFamilyIncome',
        'alv_continuation' => 'setAlvContinuation',
        'alv_agricultural_function' => 'setAlvAgriculturalFunction',
        'alv_non_agricultural_function' => 'setAlvNonAgriculturalFunction',
        'other_alv_function_description' => 'setOtherAlvFunctionDescription',
        'left_behind_object' => 'setLeftBehindObject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'moving_reasons' => 'getMovingReasons',
        'linked_assignment' => 'getLinkedAssignment',
        'is_resident' => 'getIsResident',
        'number_of_household_members' => 'getNumberOfHouseholdMembers',
        'buyer_type' => 'getBuyerType',
        'household_composition' => 'getHouseholdComposition',
        'age_main_money_maker' => 'getAgeMainMoneyMaker',
        'age_oldest_child' => 'getAgeOldestChild',
        'family_income' => 'getFamilyIncome',
        'alv_continuation' => 'getAlvContinuation',
        'alv_agricultural_function' => 'getAlvAgriculturalFunction',
        'alv_non_agricultural_function' => 'getAlvNonAgriculturalFunction',
        'other_alv_function_description' => 'getOtherAlvFunctionDescription',
        'left_behind_object' => 'getLeftBehindObject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['moving_reasons'] = isset($data['moving_reasons']) ? $data['moving_reasons'] : null;
        $this->container['linked_assignment'] = isset($data['linked_assignment']) ? $data['linked_assignment'] : null;
        $this->container['is_resident'] = isset($data['is_resident']) ? $data['is_resident'] : null;
        $this->container['number_of_household_members'] = isset($data['number_of_household_members']) ? $data['number_of_household_members'] : null;
        $this->container['buyer_type'] = isset($data['buyer_type']) ? $data['buyer_type'] : null;
        $this->container['household_composition'] = isset($data['household_composition']) ? $data['household_composition'] : null;
        $this->container['age_main_money_maker'] = isset($data['age_main_money_maker']) ? $data['age_main_money_maker'] : null;
        $this->container['age_oldest_child'] = isset($data['age_oldest_child']) ? $data['age_oldest_child'] : null;
        $this->container['family_income'] = isset($data['family_income']) ? $data['family_income'] : null;
        $this->container['alv_continuation'] = isset($data['alv_continuation']) ? $data['alv_continuation'] : null;
        $this->container['alv_agricultural_function'] = isset($data['alv_agricultural_function']) ? $data['alv_agricultural_function'] : null;
        $this->container['alv_non_agricultural_function'] = isset($data['alv_non_agricultural_function']) ? $data['alv_non_agricultural_function'] : null;
        $this->container['other_alv_function_description'] = isset($data['other_alv_function_description']) ? $data['other_alv_function_description'] : null;
        $this->container['left_behind_object'] = isset($data['left_behind_object']) ? $data['left_behind_object'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['other_alv_function_description']) && (mb_strlen($this->container['other_alv_function_description']) > 200)) {
            $invalidProperties[] = "invalid value for 'other_alv_function_description', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets moving_reasons
     *
     * @return \Swagger\Client\Model\MovingReason[]
     */
    public function getMovingReasons()
    {
        return $this->container['moving_reasons'];
    }

    /**
     * Sets moving_reasons
     *
     * @param \Swagger\Client\Model\MovingReason[] $moving_reasons moving_reasons
     *
     * @return $this
     */
    public function setMovingReasons($moving_reasons)
    {
        $this->container['moving_reasons'] = $moving_reasons;

        return $this;
    }

    /**
     * Gets linked_assignment
     *
     * @return \Swagger\Client\Model\LinkedAssignment
     */
    public function getLinkedAssignment()
    {
        return $this->container['linked_assignment'];
    }

    /**
     * Sets linked_assignment
     *
     * @param \Swagger\Client\Model\LinkedAssignment $linked_assignment linked_assignment
     *
     * @return $this
     */
    public function setLinkedAssignment($linked_assignment)
    {
        $this->container['linked_assignment'] = $linked_assignment;

        return $this;
    }

    /**
     * Gets is_resident
     *
     * @return bool
     */
    public function getIsResident()
    {
        return $this->container['is_resident'];
    }

    /**
     * Sets is_resident
     *
     * @param bool $is_resident is_resident
     *
     * @return $this
     */
    public function setIsResident($is_resident)
    {
        $this->container['is_resident'] = $is_resident;

        return $this;
    }

    /**
     * Gets number_of_household_members
     *
     * @return int
     */
    public function getNumberOfHouseholdMembers()
    {
        return $this->container['number_of_household_members'];
    }

    /**
     * Sets number_of_household_members
     *
     * @param int $number_of_household_members number_of_household_members
     *
     * @return $this
     */
    public function setNumberOfHouseholdMembers($number_of_household_members)
    {
        $this->container['number_of_household_members'] = $number_of_household_members;

        return $this;
    }

    /**
     * Gets buyer_type
     *
     * @return \Swagger\Client\Model\BuyerType
     */
    public function getBuyerType()
    {
        return $this->container['buyer_type'];
    }

    /**
     * Sets buyer_type
     *
     * @param \Swagger\Client\Model\BuyerType $buyer_type buyer_type
     *
     * @return $this
     */
    public function setBuyerType($buyer_type)
    {
        $this->container['buyer_type'] = $buyer_type;

        return $this;
    }

    /**
     * Gets household_composition
     *
     * @return \Swagger\Client\Model\HouseholdComposition
     */
    public function getHouseholdComposition()
    {
        return $this->container['household_composition'];
    }

    /**
     * Sets household_composition
     *
     * @param \Swagger\Client\Model\HouseholdComposition $household_composition household_composition
     *
     * @return $this
     */
    public function setHouseholdComposition($household_composition)
    {
        $this->container['household_composition'] = $household_composition;

        return $this;
    }

    /**
     * Gets age_main_money_maker
     *
     * @return \Swagger\Client\Model\AgeRange
     */
    public function getAgeMainMoneyMaker()
    {
        return $this->container['age_main_money_maker'];
    }

    /**
     * Sets age_main_money_maker
     *
     * @param \Swagger\Client\Model\AgeRange $age_main_money_maker age_main_money_maker
     *
     * @return $this
     */
    public function setAgeMainMoneyMaker($age_main_money_maker)
    {
        $this->container['age_main_money_maker'] = $age_main_money_maker;

        return $this;
    }

    /**
     * Gets age_oldest_child
     *
     * @return \Swagger\Client\Model\ChildAgeRange
     */
    public function getAgeOldestChild()
    {
        return $this->container['age_oldest_child'];
    }

    /**
     * Sets age_oldest_child
     *
     * @param \Swagger\Client\Model\ChildAgeRange $age_oldest_child age_oldest_child
     *
     * @return $this
     */
    public function setAgeOldestChild($age_oldest_child)
    {
        $this->container['age_oldest_child'] = $age_oldest_child;

        return $this;
    }

    /**
     * Gets family_income
     *
     * @return \Swagger\Client\Model\FamilyIncome
     */
    public function getFamilyIncome()
    {
        return $this->container['family_income'];
    }

    /**
     * Sets family_income
     *
     * @param \Swagger\Client\Model\FamilyIncome $family_income family_income
     *
     * @return $this
     */
    public function setFamilyIncome($family_income)
    {
        $this->container['family_income'] = $family_income;

        return $this;
    }

    /**
     * Gets alv_continuation
     *
     * @return \Swagger\Client\Model\AlvContinuation
     */
    public function getAlvContinuation()
    {
        return $this->container['alv_continuation'];
    }

    /**
     * Sets alv_continuation
     *
     * @param \Swagger\Client\Model\AlvContinuation $alv_continuation alv_continuation
     *
     * @return $this
     */
    public function setAlvContinuation($alv_continuation)
    {
        $this->container['alv_continuation'] = $alv_continuation;

        return $this;
    }

    /**
     * Gets alv_agricultural_function
     *
     * @return \Swagger\Client\Model\AlvAgriculturalFunction
     */
    public function getAlvAgriculturalFunction()
    {
        return $this->container['alv_agricultural_function'];
    }

    /**
     * Sets alv_agricultural_function
     *
     * @param \Swagger\Client\Model\AlvAgriculturalFunction $alv_agricultural_function alv_agricultural_function
     *
     * @return $this
     */
    public function setAlvAgriculturalFunction($alv_agricultural_function)
    {
        $this->container['alv_agricultural_function'] = $alv_agricultural_function;

        return $this;
    }

    /**
     * Gets alv_non_agricultural_function
     *
     * @return \Swagger\Client\Model\AlvNonAgriculturalFunction
     */
    public function getAlvNonAgriculturalFunction()
    {
        return $this->container['alv_non_agricultural_function'];
    }

    /**
     * Sets alv_non_agricultural_function
     *
     * @param \Swagger\Client\Model\AlvNonAgriculturalFunction $alv_non_agricultural_function alv_non_agricultural_function
     *
     * @return $this
     */
    public function setAlvNonAgriculturalFunction($alv_non_agricultural_function)
    {
        $this->container['alv_non_agricultural_function'] = $alv_non_agricultural_function;

        return $this;
    }

    /**
     * Gets other_alv_function_description
     *
     * @return string
     */
    public function getOtherAlvFunctionDescription()
    {
        return $this->container['other_alv_function_description'];
    }

    /**
     * Sets other_alv_function_description
     *
     * @param string $other_alv_function_description other_alv_function_description
     *
     * @return $this
     */
    public function setOtherAlvFunctionDescription($other_alv_function_description)
    {
        if (!is_null($other_alv_function_description) && (mb_strlen($other_alv_function_description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $other_alv_function_description when calling TransactionMetaData., must be smaller than or equal to 200.');
        }

        $this->container['other_alv_function_description'] = $other_alv_function_description;

        return $this;
    }

    /**
     * Gets left_behind_object
     *
     * @return \Swagger\Client\Model\LeftBehindObject
     */
    public function getLeftBehindObject()
    {
        return $this->container['left_behind_object'];
    }

    /**
     * Sets left_behind_object
     *
     * @param \Swagger\Client\Model\LeftBehindObject $left_behind_object left_behind_object
     *
     * @return $this
     */
    public function setLeftBehindObject($left_behind_object)
    {
        $this->container['left_behind_object'] = $left_behind_object;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


