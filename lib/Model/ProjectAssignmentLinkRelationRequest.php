<?php
/**
 * ProjectAssignmentLinkRelationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProjectAssignmentLinkRelationRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectAssignmentLinkRelationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectAssignmentLinkRelationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'relation_id' => 'string',
        'relation_type' => '\Swagger\Client\Model\AcquisitionAssignmentLinkRelationRequestRelationType',
        'project_assignment_id' => 'string',
        'relation_role' => '\Swagger\Client\Model\AcquisitionAssignmentLinkRelationRequestRelationRole'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'relation_id' => 'guid',
        'relation_type' => null,
        'project_assignment_id' => 'guid',
        'relation_role' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'relation_id' => 'relationId',
        'relation_type' => 'relationType',
        'project_assignment_id' => 'projectAssignmentId',
        'relation_role' => 'relationRole'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'relation_id' => 'setRelationId',
        'relation_type' => 'setRelationType',
        'project_assignment_id' => 'setProjectAssignmentId',
        'relation_role' => 'setRelationRole'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'relation_id' => 'getRelationId',
        'relation_type' => 'getRelationType',
        'project_assignment_id' => 'getProjectAssignmentId',
        'relation_role' => 'getRelationRole'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['relation_id'] = isset($data['relation_id']) ? $data['relation_id'] : null;
        $this->container['relation_type'] = isset($data['relation_type']) ? $data['relation_type'] : null;
        $this->container['project_assignment_id'] = isset($data['project_assignment_id']) ? $data['project_assignment_id'] : null;
        $this->container['relation_role'] = isset($data['relation_role']) ? $data['relation_role'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['relation_id'] === null) {
            $invalidProperties[] = "'relation_id' can't be null";
        }
        if ((mb_strlen($this->container['relation_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'relation_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['relation_type'] === null) {
            $invalidProperties[] = "'relation_type' can't be null";
        }
        if ($this->container['project_assignment_id'] === null) {
            $invalidProperties[] = "'project_assignment_id' can't be null";
        }
        if ((mb_strlen($this->container['project_assignment_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'project_assignment_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['relation_role'] === null) {
            $invalidProperties[] = "'relation_role' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets relation_id
     *
     * @return string
     */
    public function getRelationId()
    {
        return $this->container['relation_id'];
    }

    /**
     * Sets relation_id
     *
     * @param string $relation_id The ID of the relation (either a contact company or contact person)
     *
     * @return $this
     */
    public function setRelationId($relation_id)
    {

        if ((mb_strlen($relation_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $relation_id when calling ProjectAssignmentLinkRelationRequest., must be bigger than or equal to 1.');
        }

        $this->container['relation_id'] = $relation_id;

        return $this;
    }

    /**
     * Gets relation_type
     *
     * @return \Swagger\Client\Model\AcquisitionAssignmentLinkRelationRequestRelationType
     */
    public function getRelationType()
    {
        return $this->container['relation_type'];
    }

    /**
     * Sets relation_type
     *
     * @param \Swagger\Client\Model\AcquisitionAssignmentLinkRelationRequestRelationType $relation_type relation_type
     *
     * @return $this
     */
    public function setRelationType($relation_type)
    {
        $this->container['relation_type'] = $relation_type;

        return $this;
    }

    /**
     * Gets project_assignment_id
     *
     * @return string
     */
    public function getProjectAssignmentId()
    {
        return $this->container['project_assignment_id'];
    }

    /**
     * Sets project_assignment_id
     *
     * @param string $project_assignment_id The project assignment to link the relation to.
     *
     * @return $this
     */
    public function setProjectAssignmentId($project_assignment_id)
    {

        if ((mb_strlen($project_assignment_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $project_assignment_id when calling ProjectAssignmentLinkRelationRequest., must be bigger than or equal to 1.');
        }

        $this->container['project_assignment_id'] = $project_assignment_id;

        return $this;
    }

    /**
     * Gets relation_role
     *
     * @return \Swagger\Client\Model\AcquisitionAssignmentLinkRelationRequestRelationRole
     */
    public function getRelationRole()
    {
        return $this->container['relation_role'];
    }

    /**
     * Sets relation_role
     *
     * @param \Swagger\Client\Model\AcquisitionAssignmentLinkRelationRequestRelationRole $relation_role relation_role
     *
     * @return $this
     */
    public function setRelationRole($relation_role)
    {
        $this->container['relation_role'] = $relation_role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


