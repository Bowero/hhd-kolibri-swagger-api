<?php
/**
 * ReminderSnapShot
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ReminderSnapShot Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReminderSnapShot extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReminderSnapShot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parent_root_entity_id' => 'string',
        'real_estate_agency_id' => 'string',
        'employee_id' => 'string',
        'reminder_type' => 'object',
        'subject' => 'string',
        'location' => 'string',
        'start_date_time' => '\DateTime',
        'reminder_time' => '\DateTime',
        'linked_created_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_modified_by' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_employee' => '\Swagger\Client\Model\LinkedEmployee',
        'linked_relations' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_assignments' => '\Swagger\Client\Model\LinkedAssignment[]',
        'end_date_time' => '\DateTime',
        'category_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parent_root_entity_id' => 'guid',
        'real_estate_agency_id' => 'guid',
        'employee_id' => 'guid',
        'reminder_type' => null,
        'subject' => null,
        'location' => null,
        'start_date_time' => 'date-time',
        'reminder_time' => 'date-time',
        'linked_created_by' => null,
        'linked_modified_by' => null,
        'linked_employee' => null,
        'linked_relations' => null,
        'linked_assignments' => null,
        'end_date_time' => 'date-time',
        'category_id' => 'guid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent_root_entity_id' => 'parentRootEntityId',
        'real_estate_agency_id' => 'realEstateAgencyId',
        'employee_id' => 'employeeId',
        'reminder_type' => 'reminderType',
        'subject' => 'subject',
        'location' => 'location',
        'start_date_time' => 'startDateTime',
        'reminder_time' => 'reminderTime',
        'linked_created_by' => 'linkedCreatedBy',
        'linked_modified_by' => 'linkedModifiedBy',
        'linked_employee' => 'linkedEmployee',
        'linked_relations' => 'linkedRelations',
        'linked_assignments' => 'linkedAssignments',
        'end_date_time' => 'endDateTime',
        'category_id' => 'categoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent_root_entity_id' => 'setParentRootEntityId',
        'real_estate_agency_id' => 'setRealEstateAgencyId',
        'employee_id' => 'setEmployeeId',
        'reminder_type' => 'setReminderType',
        'subject' => 'setSubject',
        'location' => 'setLocation',
        'start_date_time' => 'setStartDateTime',
        'reminder_time' => 'setReminderTime',
        'linked_created_by' => 'setLinkedCreatedBy',
        'linked_modified_by' => 'setLinkedModifiedBy',
        'linked_employee' => 'setLinkedEmployee',
        'linked_relations' => 'setLinkedRelations',
        'linked_assignments' => 'setLinkedAssignments',
        'end_date_time' => 'setEndDateTime',
        'category_id' => 'setCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent_root_entity_id' => 'getParentRootEntityId',
        'real_estate_agency_id' => 'getRealEstateAgencyId',
        'employee_id' => 'getEmployeeId',
        'reminder_type' => 'getReminderType',
        'subject' => 'getSubject',
        'location' => 'getLocation',
        'start_date_time' => 'getStartDateTime',
        'reminder_time' => 'getReminderTime',
        'linked_created_by' => 'getLinkedCreatedBy',
        'linked_modified_by' => 'getLinkedModifiedBy',
        'linked_employee' => 'getLinkedEmployee',
        'linked_relations' => 'getLinkedRelations',
        'linked_assignments' => 'getLinkedAssignments',
        'end_date_time' => 'getEndDateTime',
        'category_id' => 'getCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['parent_root_entity_id'] = isset($data['parent_root_entity_id']) ? $data['parent_root_entity_id'] : null;
        $this->container['real_estate_agency_id'] = isset($data['real_estate_agency_id']) ? $data['real_estate_agency_id'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['reminder_type'] = isset($data['reminder_type']) ? $data['reminder_type'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['reminder_time'] = isset($data['reminder_time']) ? $data['reminder_time'] : null;
        $this->container['linked_created_by'] = isset($data['linked_created_by']) ? $data['linked_created_by'] : null;
        $this->container['linked_modified_by'] = isset($data['linked_modified_by']) ? $data['linked_modified_by'] : null;
        $this->container['linked_employee'] = isset($data['linked_employee']) ? $data['linked_employee'] : null;
        $this->container['linked_relations'] = isset($data['linked_relations']) ? $data['linked_relations'] : null;
        $this->container['linked_assignments'] = isset($data['linked_assignments']) ? $data['linked_assignments'] : null;
        $this->container['end_date_time'] = isset($data['end_date_time']) ? $data['end_date_time'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['parent_root_entity_id']) && (mb_strlen($this->container['parent_root_entity_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'parent_root_entity_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['real_estate_agency_id']) && (mb_strlen($this->container['real_estate_agency_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'real_estate_agency_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['employee_id']) && (mb_strlen($this->container['employee_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent_root_entity_id
     *
     * @return string
     */
    public function getParentRootEntityId()
    {
        return $this->container['parent_root_entity_id'];
    }

    /**
     * Sets parent_root_entity_id
     *
     * @param string $parent_root_entity_id Id of Task or AgendaItem. Remember: the Id of the Reminder might be different from the Id of the Parent Root Entity. Example: An AgendaItem may have multiple reminders: one for each attendee (employee).
     *
     * @return $this
     */
    public function setParentRootEntityId($parent_root_entity_id)
    {

        if (!is_null($parent_root_entity_id) && (mb_strlen($parent_root_entity_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parent_root_entity_id when calling ReminderSnapShot., must be bigger than or equal to 1.');
        }

        $this->container['parent_root_entity_id'] = $parent_root_entity_id;

        return $this;
    }

    /**
     * Gets real_estate_agency_id
     *
     * @return string
     */
    public function getRealEstateAgencyId()
    {
        return $this->container['real_estate_agency_id'];
    }

    /**
     * Sets real_estate_agency_id
     *
     * @param string $real_estate_agency_id real_estate_agency_id
     *
     * @return $this
     */
    public function setRealEstateAgencyId($real_estate_agency_id)
    {

        if (!is_null($real_estate_agency_id) && (mb_strlen($real_estate_agency_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $real_estate_agency_id when calling ReminderSnapShot., must be bigger than or equal to 1.');
        }

        $this->container['real_estate_agency_id'] = $real_estate_agency_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id The employee responsible for the task or agenda item (e.g. attendee).
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {

        if (!is_null($employee_id) && (mb_strlen($employee_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling ReminderSnapShot., must be bigger than or equal to 1.');
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets reminder_type
     *
     * @return object
     */
    public function getReminderType()
    {
        return $this->container['reminder_type'];
    }

    /**
     * Sets reminder_type
     *
     * @param object $reminder_type reminder_type
     *
     * @return $this
     */
    public function setReminderType($reminder_type)
    {
        $this->container['reminder_type'] = $reminder_type;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The subject of the task or agenda item.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location The location of the task or agenda item.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time The startdatetime of the task or agenda item.
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets reminder_time
     *
     * @return \DateTime
     */
    public function getReminderTime()
    {
        return $this->container['reminder_time'];
    }

    /**
     * Sets reminder_time
     *
     * @param \DateTime $reminder_time The time the reminder should be shown.
     *
     * @return $this
     */
    public function setReminderTime($reminder_time)
    {
        $this->container['reminder_time'] = $reminder_time;

        return $this;
    }

    /**
     * Gets linked_created_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedCreatedBy()
    {
        return $this->container['linked_created_by'];
    }

    /**
     * Sets linked_created_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_created_by linked_created_by
     *
     * @return $this
     */
    public function setLinkedCreatedBy($linked_created_by)
    {
        $this->container['linked_created_by'] = $linked_created_by;

        return $this;
    }

    /**
     * Gets linked_modified_by
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedModifiedBy()
    {
        return $this->container['linked_modified_by'];
    }

    /**
     * Sets linked_modified_by
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_modified_by linked_modified_by
     *
     * @return $this
     */
    public function setLinkedModifiedBy($linked_modified_by)
    {
        $this->container['linked_modified_by'] = $linked_modified_by;

        return $this;
    }

    /**
     * Gets linked_employee
     *
     * @return \Swagger\Client\Model\LinkedEmployee
     */
    public function getLinkedEmployee()
    {
        return $this->container['linked_employee'];
    }

    /**
     * Sets linked_employee
     *
     * @param \Swagger\Client\Model\LinkedEmployee $linked_employee linked_employee
     *
     * @return $this
     */
    public function setLinkedEmployee($linked_employee)
    {
        $this->container['linked_employee'] = $linked_employee;

        return $this;
    }

    /**
     * Gets linked_relations
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedRelations()
    {
        return $this->container['linked_relations'];
    }

    /**
     * Sets linked_relations
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_relations linked_relations
     *
     * @return $this
     */
    public function setLinkedRelations($linked_relations)
    {
        $this->container['linked_relations'] = $linked_relations;

        return $this;
    }

    /**
     * Gets linked_assignments
     *
     * @return \Swagger\Client\Model\LinkedAssignment[]
     */
    public function getLinkedAssignments()
    {
        return $this->container['linked_assignments'];
    }

    /**
     * Sets linked_assignments
     *
     * @param \Swagger\Client\Model\LinkedAssignment[] $linked_assignments linked_assignments
     *
     * @return $this
     */
    public function setLinkedAssignments($linked_assignments)
    {
        $this->container['linked_assignments'] = $linked_assignments;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time end_date_time
     *
     * @return $this
     */
    public function setEndDateTime($end_date_time)
    {
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


