<?php
/**
 * BaseAssignment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * BaseAssignment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseAssignment extends RootEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acceptance_details' => '\Swagger\Client\Model\AcceptanceDetails',
        'advertisement_text' => '\Swagger\Client\Model\TranslatedText[]',
        'assignment_phase' => '\Swagger\Client\Model\AssignmentPhase',
        'availability_status' => '\Swagger\Client\Model\AvailabilityStatus',
        'balcony_text' => '\Swagger\Client\Model\TranslatedText[]',
        'brochures' => '\Swagger\Client\Model\BrochureBlob[]',
        'business_partners' => '\Swagger\Client\Model\AssignmentBusinessPartner[]',
        'calculate_price_per_m2' => 'bool',
        'changes_number_of_inside_parking_lots' => '\Swagger\Client\Model\PartialChange[]',
        'changes_number_of_parking_lots' => '\Swagger\Client\Model\PartialChange[]',
        'changes_surface' => '\Swagger\Client\Model\PartialChange[]',
        'confidentiality_level' => '\Swagger\Client\Model\ConfidentialityLevel',
        'contract_reason' => '\Swagger\Client\Model\ContractReason',
        'contract_source' => '\Swagger\Client\Model\ContractSource',
        'end_date_publication' => '\DateTime',
        'environment_text' => '\Swagger\Client\Model\TranslatedText[]',
        'first_floor_text' => '\Swagger\Client\Model\TranslatedText[]',
        'for_rent' => 'bool',
        'for_sale' => 'bool',
        'gardens_text' => '\Swagger\Client\Model\TranslatedText[]',
        'ground_floor_text' => '\Swagger\Client\Model\TranslatedText[]',
        'hide_on_funda_until' => '\DateTime',
        'funda_postal_code' => 'string',
        'funda_street' => 'string',
        'funda_locality' => 'string',
        'is_temporarily_removed_from_funda' => 'bool',
        'hide_price' => 'bool',
        'import_details' => '\Swagger\Client\Model\ImportDetails',
        'internal_memo' => 'string',
        'is_acquisition_assignment' => 'bool',
        'is_cleared' => 'bool',
        'is_confidential' => 'bool',
        'is_private' => 'bool',
        'is_production_rights' => 'bool',
        'is_self_interest' => 'bool',
        'is_special' => 'bool',
        'is_topper' => 'bool',
        'is_transaction_data_confidential' => 'bool',
        'key_note' => 'string',
        'key_nr' => 'int',
        'linked_cadastres' => '\Swagger\Client\Model\LinkedCadastre[]',
        'linked_company_listings' => '\Swagger\Client\Model\LinkedCompanyListing[]',
        'linked_applicants' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_notaries' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_property_managers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_vendors' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_financial_advisors' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_appraisers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_clients' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_offering_agencies' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_purchasing_brokers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_inspectors' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_stylists' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_photographers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_potentials' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_occupants' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_people_who_opted' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_project_developers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_tenant_representation_brokers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_rental_agents' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_sales_brokers' => '\Swagger\Client\Model\LinkedRelation[]',
        'linked_contact_persons' => '\Swagger\Client\Model\LinkedRelation[]',
        'list_of_business' => '\Swagger\Client\Model\BusinessToTakeOver[]',
        'lot_description_text' => '\Swagger\Client\Model\TranslatedText[]',
        'mandate_date_time' => '\DateTime',
        'maps' => '\Swagger\Client\Model\MapBlob[]',
        'office_id' => 'string',
        'open_house' => '\Swagger\Client\Model\OpenHouse',
        'other_contract_source' => 'string',
        'other_floors_text' => '\Swagger\Client\Model\TranslatedText[]',
        'parking_text' => '\Swagger\Client\Model\TranslatedText[]',
        'parties_description_text' => '\Swagger\Client\Model\TranslatedText[]',
        'peculiarities_text' => '\Swagger\Client\Model\TranslatedText[]',
        'photos' => '\Swagger\Client\Model\PhotoBlob[]',
        'price_description_text' => '\Swagger\Client\Model\TranslatedText[]',
        'products_to_pass_on' => '\Swagger\Client\Model\ProductToPassOn[]',
        'registration_conditions' => '\Swagger\Client\Model\TranslatedText[]',
        'rent_offer' => '\Swagger\Client\Model\RentOffer',
        'sale_offer' => '\Swagger\Client\Model\SaleOffer',
        'second_floor_text' => '\Swagger\Client\Model\TranslatedText[]',
        'special_text' => '\Swagger\Client\Model\TranslatedText[]',
        'tags' => 'string',
        'third_party_media' => '\Swagger\Client\Model\ThirdPartyMedia[]',
        'title_text' => '\Swagger\Client\Model\TranslatedText[]',
        'videos' => '\Swagger\Client\Model\VideoBlob[]',
        'waiting_time' => '\Swagger\Client\Model\WaitingTime',
        'web_address' => 'string',
        'withdrawn_date_time' => '\DateTime',
        'withdraw_reason' => '\Swagger\Client\Model\WithdrawReason'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acceptance_details' => null,
        'advertisement_text' => null,
        'assignment_phase' => null,
        'availability_status' => null,
        'balcony_text' => null,
        'brochures' => null,
        'business_partners' => null,
        'calculate_price_per_m2' => null,
        'changes_number_of_inside_parking_lots' => null,
        'changes_number_of_parking_lots' => null,
        'changes_surface' => null,
        'confidentiality_level' => null,
        'contract_reason' => null,
        'contract_source' => null,
        'end_date_publication' => 'date-time',
        'environment_text' => null,
        'first_floor_text' => null,
        'for_rent' => null,
        'for_sale' => null,
        'gardens_text' => null,
        'ground_floor_text' => null,
        'hide_on_funda_until' => 'date-time',
        'funda_postal_code' => null,
        'funda_street' => null,
        'funda_locality' => null,
        'is_temporarily_removed_from_funda' => null,
        'hide_price' => null,
        'import_details' => null,
        'internal_memo' => null,
        'is_acquisition_assignment' => null,
        'is_cleared' => null,
        'is_confidential' => null,
        'is_private' => null,
        'is_production_rights' => null,
        'is_self_interest' => null,
        'is_special' => null,
        'is_topper' => null,
        'is_transaction_data_confidential' => null,
        'key_note' => null,
        'key_nr' => 'int32',
        'linked_cadastres' => null,
        'linked_company_listings' => null,
        'linked_applicants' => null,
        'linked_notaries' => null,
        'linked_property_managers' => null,
        'linked_vendors' => null,
        'linked_financial_advisors' => null,
        'linked_appraisers' => null,
        'linked_clients' => null,
        'linked_offering_agencies' => null,
        'linked_purchasing_brokers' => null,
        'linked_inspectors' => null,
        'linked_stylists' => null,
        'linked_photographers' => null,
        'linked_potentials' => null,
        'linked_occupants' => null,
        'linked_people_who_opted' => null,
        'linked_project_developers' => null,
        'linked_tenant_representation_brokers' => null,
        'linked_rental_agents' => null,
        'linked_sales_brokers' => null,
        'linked_contact_persons' => null,
        'list_of_business' => null,
        'lot_description_text' => null,
        'mandate_date_time' => 'date-time',
        'maps' => null,
        'office_id' => 'guid',
        'open_house' => null,
        'other_contract_source' => null,
        'other_floors_text' => null,
        'parking_text' => null,
        'parties_description_text' => null,
        'peculiarities_text' => null,
        'photos' => null,
        'price_description_text' => null,
        'products_to_pass_on' => null,
        'registration_conditions' => null,
        'rent_offer' => null,
        'sale_offer' => null,
        'second_floor_text' => null,
        'special_text' => null,
        'tags' => null,
        'third_party_media' => null,
        'title_text' => null,
        'videos' => null,
        'waiting_time' => null,
        'web_address' => null,
        'withdrawn_date_time' => 'date-time',
        'withdraw_reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptance_details' => 'acceptanceDetails',
        'advertisement_text' => 'advertisementText',
        'assignment_phase' => 'assignmentPhase',
        'availability_status' => 'availabilityStatus',
        'balcony_text' => 'balconyText',
        'brochures' => 'brochures',
        'business_partners' => 'businessPartners',
        'calculate_price_per_m2' => 'calculatePricePerM2',
        'changes_number_of_inside_parking_lots' => 'changesNumberOfInsideParkingLots',
        'changes_number_of_parking_lots' => 'changesNumberOfParkingLots',
        'changes_surface' => 'changesSurface',
        'confidentiality_level' => 'confidentialityLevel',
        'contract_reason' => 'contractReason',
        'contract_source' => 'contractSource',
        'end_date_publication' => 'endDatePublication',
        'environment_text' => 'environmentText',
        'first_floor_text' => 'firstFloorText',
        'for_rent' => 'forRent',
        'for_sale' => 'forSale',
        'gardens_text' => 'gardensText',
        'ground_floor_text' => 'groundFloorText',
        'hide_on_funda_until' => 'hideOnFundaUntil',
        'funda_postal_code' => 'fundaPostalCode',
        'funda_street' => 'fundaStreet',
        'funda_locality' => 'fundaLocality',
        'is_temporarily_removed_from_funda' => 'isTemporarilyRemovedFromFunda',
        'hide_price' => 'hidePrice',
        'import_details' => 'importDetails',
        'internal_memo' => 'internalMemo',
        'is_acquisition_assignment' => 'isAcquisitionAssignment',
        'is_cleared' => 'isCleared',
        'is_confidential' => 'isConfidential',
        'is_private' => 'isPrivate',
        'is_production_rights' => 'isProductionRights',
        'is_self_interest' => 'isSelfInterest',
        'is_special' => 'isSpecial',
        'is_topper' => 'isTopper',
        'is_transaction_data_confidential' => 'isTransactionDataConfidential',
        'key_note' => 'keyNote',
        'key_nr' => 'keyNr',
        'linked_cadastres' => 'linkedCadastres',
        'linked_company_listings' => 'linkedCompanyListings',
        'linked_applicants' => 'linkedApplicants',
        'linked_notaries' => 'linkedNotaries',
        'linked_property_managers' => 'linkedPropertyManagers',
        'linked_vendors' => 'linkedVendors',
        'linked_financial_advisors' => 'linkedFinancialAdvisors',
        'linked_appraisers' => 'linkedAppraisers',
        'linked_clients' => 'linkedClients',
        'linked_offering_agencies' => 'linkedOfferingAgencies',
        'linked_purchasing_brokers' => 'linkedPurchasingBrokers',
        'linked_inspectors' => 'linkedInspectors',
        'linked_stylists' => 'linkedStylists',
        'linked_photographers' => 'linkedPhotographers',
        'linked_potentials' => 'linkedPotentials',
        'linked_occupants' => 'linkedOccupants',
        'linked_people_who_opted' => 'linkedPeopleWhoOpted',
        'linked_project_developers' => 'linkedProjectDevelopers',
        'linked_tenant_representation_brokers' => 'linkedTenantRepresentationBrokers',
        'linked_rental_agents' => 'linkedRentalAgents',
        'linked_sales_brokers' => 'linkedSalesBrokers',
        'linked_contact_persons' => 'linkedContactPersons',
        'list_of_business' => 'listOfBusiness',
        'lot_description_text' => 'lotDescriptionText',
        'mandate_date_time' => 'mandateDateTime',
        'maps' => 'maps',
        'office_id' => 'officeID',
        'open_house' => 'openHouse',
        'other_contract_source' => 'otherContractSource',
        'other_floors_text' => 'otherFloorsText',
        'parking_text' => 'parkingText',
        'parties_description_text' => 'partiesDescriptionText',
        'peculiarities_text' => 'peculiaritiesText',
        'photos' => 'photos',
        'price_description_text' => 'priceDescriptionText',
        'products_to_pass_on' => 'productsToPassOn',
        'registration_conditions' => 'registrationConditions',
        'rent_offer' => 'rentOffer',
        'sale_offer' => 'saleOffer',
        'second_floor_text' => 'secondFloorText',
        'special_text' => 'specialText',
        'tags' => 'tags',
        'third_party_media' => 'thirdPartyMedia',
        'title_text' => 'titleText',
        'videos' => 'videos',
        'waiting_time' => 'waitingTime',
        'web_address' => 'webAddress',
        'withdrawn_date_time' => 'withdrawnDateTime',
        'withdraw_reason' => 'withdrawReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptance_details' => 'setAcceptanceDetails',
        'advertisement_text' => 'setAdvertisementText',
        'assignment_phase' => 'setAssignmentPhase',
        'availability_status' => 'setAvailabilityStatus',
        'balcony_text' => 'setBalconyText',
        'brochures' => 'setBrochures',
        'business_partners' => 'setBusinessPartners',
        'calculate_price_per_m2' => 'setCalculatePricePerM2',
        'changes_number_of_inside_parking_lots' => 'setChangesNumberOfInsideParkingLots',
        'changes_number_of_parking_lots' => 'setChangesNumberOfParkingLots',
        'changes_surface' => 'setChangesSurface',
        'confidentiality_level' => 'setConfidentialityLevel',
        'contract_reason' => 'setContractReason',
        'contract_source' => 'setContractSource',
        'end_date_publication' => 'setEndDatePublication',
        'environment_text' => 'setEnvironmentText',
        'first_floor_text' => 'setFirstFloorText',
        'for_rent' => 'setForRent',
        'for_sale' => 'setForSale',
        'gardens_text' => 'setGardensText',
        'ground_floor_text' => 'setGroundFloorText',
        'hide_on_funda_until' => 'setHideOnFundaUntil',
        'funda_postal_code' => 'setFundaPostalCode',
        'funda_street' => 'setFundaStreet',
        'funda_locality' => 'setFundaLocality',
        'is_temporarily_removed_from_funda' => 'setIsTemporarilyRemovedFromFunda',
        'hide_price' => 'setHidePrice',
        'import_details' => 'setImportDetails',
        'internal_memo' => 'setInternalMemo',
        'is_acquisition_assignment' => 'setIsAcquisitionAssignment',
        'is_cleared' => 'setIsCleared',
        'is_confidential' => 'setIsConfidential',
        'is_private' => 'setIsPrivate',
        'is_production_rights' => 'setIsProductionRights',
        'is_self_interest' => 'setIsSelfInterest',
        'is_special' => 'setIsSpecial',
        'is_topper' => 'setIsTopper',
        'is_transaction_data_confidential' => 'setIsTransactionDataConfidential',
        'key_note' => 'setKeyNote',
        'key_nr' => 'setKeyNr',
        'linked_cadastres' => 'setLinkedCadastres',
        'linked_company_listings' => 'setLinkedCompanyListings',
        'linked_applicants' => 'setLinkedApplicants',
        'linked_notaries' => 'setLinkedNotaries',
        'linked_property_managers' => 'setLinkedPropertyManagers',
        'linked_vendors' => 'setLinkedVendors',
        'linked_financial_advisors' => 'setLinkedFinancialAdvisors',
        'linked_appraisers' => 'setLinkedAppraisers',
        'linked_clients' => 'setLinkedClients',
        'linked_offering_agencies' => 'setLinkedOfferingAgencies',
        'linked_purchasing_brokers' => 'setLinkedPurchasingBrokers',
        'linked_inspectors' => 'setLinkedInspectors',
        'linked_stylists' => 'setLinkedStylists',
        'linked_photographers' => 'setLinkedPhotographers',
        'linked_potentials' => 'setLinkedPotentials',
        'linked_occupants' => 'setLinkedOccupants',
        'linked_people_who_opted' => 'setLinkedPeopleWhoOpted',
        'linked_project_developers' => 'setLinkedProjectDevelopers',
        'linked_tenant_representation_brokers' => 'setLinkedTenantRepresentationBrokers',
        'linked_rental_agents' => 'setLinkedRentalAgents',
        'linked_sales_brokers' => 'setLinkedSalesBrokers',
        'linked_contact_persons' => 'setLinkedContactPersons',
        'list_of_business' => 'setListOfBusiness',
        'lot_description_text' => 'setLotDescriptionText',
        'mandate_date_time' => 'setMandateDateTime',
        'maps' => 'setMaps',
        'office_id' => 'setOfficeId',
        'open_house' => 'setOpenHouse',
        'other_contract_source' => 'setOtherContractSource',
        'other_floors_text' => 'setOtherFloorsText',
        'parking_text' => 'setParkingText',
        'parties_description_text' => 'setPartiesDescriptionText',
        'peculiarities_text' => 'setPeculiaritiesText',
        'photos' => 'setPhotos',
        'price_description_text' => 'setPriceDescriptionText',
        'products_to_pass_on' => 'setProductsToPassOn',
        'registration_conditions' => 'setRegistrationConditions',
        'rent_offer' => 'setRentOffer',
        'sale_offer' => 'setSaleOffer',
        'second_floor_text' => 'setSecondFloorText',
        'special_text' => 'setSpecialText',
        'tags' => 'setTags',
        'third_party_media' => 'setThirdPartyMedia',
        'title_text' => 'setTitleText',
        'videos' => 'setVideos',
        'waiting_time' => 'setWaitingTime',
        'web_address' => 'setWebAddress',
        'withdrawn_date_time' => 'setWithdrawnDateTime',
        'withdraw_reason' => 'setWithdrawReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptance_details' => 'getAcceptanceDetails',
        'advertisement_text' => 'getAdvertisementText',
        'assignment_phase' => 'getAssignmentPhase',
        'availability_status' => 'getAvailabilityStatus',
        'balcony_text' => 'getBalconyText',
        'brochures' => 'getBrochures',
        'business_partners' => 'getBusinessPartners',
        'calculate_price_per_m2' => 'getCalculatePricePerM2',
        'changes_number_of_inside_parking_lots' => 'getChangesNumberOfInsideParkingLots',
        'changes_number_of_parking_lots' => 'getChangesNumberOfParkingLots',
        'changes_surface' => 'getChangesSurface',
        'confidentiality_level' => 'getConfidentialityLevel',
        'contract_reason' => 'getContractReason',
        'contract_source' => 'getContractSource',
        'end_date_publication' => 'getEndDatePublication',
        'environment_text' => 'getEnvironmentText',
        'first_floor_text' => 'getFirstFloorText',
        'for_rent' => 'getForRent',
        'for_sale' => 'getForSale',
        'gardens_text' => 'getGardensText',
        'ground_floor_text' => 'getGroundFloorText',
        'hide_on_funda_until' => 'getHideOnFundaUntil',
        'funda_postal_code' => 'getFundaPostalCode',
        'funda_street' => 'getFundaStreet',
        'funda_locality' => 'getFundaLocality',
        'is_temporarily_removed_from_funda' => 'getIsTemporarilyRemovedFromFunda',
        'hide_price' => 'getHidePrice',
        'import_details' => 'getImportDetails',
        'internal_memo' => 'getInternalMemo',
        'is_acquisition_assignment' => 'getIsAcquisitionAssignment',
        'is_cleared' => 'getIsCleared',
        'is_confidential' => 'getIsConfidential',
        'is_private' => 'getIsPrivate',
        'is_production_rights' => 'getIsProductionRights',
        'is_self_interest' => 'getIsSelfInterest',
        'is_special' => 'getIsSpecial',
        'is_topper' => 'getIsTopper',
        'is_transaction_data_confidential' => 'getIsTransactionDataConfidential',
        'key_note' => 'getKeyNote',
        'key_nr' => 'getKeyNr',
        'linked_cadastres' => 'getLinkedCadastres',
        'linked_company_listings' => 'getLinkedCompanyListings',
        'linked_applicants' => 'getLinkedApplicants',
        'linked_notaries' => 'getLinkedNotaries',
        'linked_property_managers' => 'getLinkedPropertyManagers',
        'linked_vendors' => 'getLinkedVendors',
        'linked_financial_advisors' => 'getLinkedFinancialAdvisors',
        'linked_appraisers' => 'getLinkedAppraisers',
        'linked_clients' => 'getLinkedClients',
        'linked_offering_agencies' => 'getLinkedOfferingAgencies',
        'linked_purchasing_brokers' => 'getLinkedPurchasingBrokers',
        'linked_inspectors' => 'getLinkedInspectors',
        'linked_stylists' => 'getLinkedStylists',
        'linked_photographers' => 'getLinkedPhotographers',
        'linked_potentials' => 'getLinkedPotentials',
        'linked_occupants' => 'getLinkedOccupants',
        'linked_people_who_opted' => 'getLinkedPeopleWhoOpted',
        'linked_project_developers' => 'getLinkedProjectDevelopers',
        'linked_tenant_representation_brokers' => 'getLinkedTenantRepresentationBrokers',
        'linked_rental_agents' => 'getLinkedRentalAgents',
        'linked_sales_brokers' => 'getLinkedSalesBrokers',
        'linked_contact_persons' => 'getLinkedContactPersons',
        'list_of_business' => 'getListOfBusiness',
        'lot_description_text' => 'getLotDescriptionText',
        'mandate_date_time' => 'getMandateDateTime',
        'maps' => 'getMaps',
        'office_id' => 'getOfficeId',
        'open_house' => 'getOpenHouse',
        'other_contract_source' => 'getOtherContractSource',
        'other_floors_text' => 'getOtherFloorsText',
        'parking_text' => 'getParkingText',
        'parties_description_text' => 'getPartiesDescriptionText',
        'peculiarities_text' => 'getPeculiaritiesText',
        'photos' => 'getPhotos',
        'price_description_text' => 'getPriceDescriptionText',
        'products_to_pass_on' => 'getProductsToPassOn',
        'registration_conditions' => 'getRegistrationConditions',
        'rent_offer' => 'getRentOffer',
        'sale_offer' => 'getSaleOffer',
        'second_floor_text' => 'getSecondFloorText',
        'special_text' => 'getSpecialText',
        'tags' => 'getTags',
        'third_party_media' => 'getThirdPartyMedia',
        'title_text' => 'getTitleText',
        'videos' => 'getVideos',
        'waiting_time' => 'getWaitingTime',
        'web_address' => 'getWebAddress',
        'withdrawn_date_time' => 'getWithdrawnDateTime',
        'withdraw_reason' => 'getWithdrawReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['acceptance_details'] = isset($data['acceptance_details']) ? $data['acceptance_details'] : null;
        $this->container['advertisement_text'] = isset($data['advertisement_text']) ? $data['advertisement_text'] : null;
        $this->container['assignment_phase'] = isset($data['assignment_phase']) ? $data['assignment_phase'] : null;
        $this->container['availability_status'] = isset($data['availability_status']) ? $data['availability_status'] : null;
        $this->container['balcony_text'] = isset($data['balcony_text']) ? $data['balcony_text'] : null;
        $this->container['brochures'] = isset($data['brochures']) ? $data['brochures'] : null;
        $this->container['business_partners'] = isset($data['business_partners']) ? $data['business_partners'] : null;
        $this->container['calculate_price_per_m2'] = isset($data['calculate_price_per_m2']) ? $data['calculate_price_per_m2'] : null;
        $this->container['changes_number_of_inside_parking_lots'] = isset($data['changes_number_of_inside_parking_lots']) ? $data['changes_number_of_inside_parking_lots'] : null;
        $this->container['changes_number_of_parking_lots'] = isset($data['changes_number_of_parking_lots']) ? $data['changes_number_of_parking_lots'] : null;
        $this->container['changes_surface'] = isset($data['changes_surface']) ? $data['changes_surface'] : null;
        $this->container['confidentiality_level'] = isset($data['confidentiality_level']) ? $data['confidentiality_level'] : null;
        $this->container['contract_reason'] = isset($data['contract_reason']) ? $data['contract_reason'] : null;
        $this->container['contract_source'] = isset($data['contract_source']) ? $data['contract_source'] : null;
        $this->container['end_date_publication'] = isset($data['end_date_publication']) ? $data['end_date_publication'] : null;
        $this->container['environment_text'] = isset($data['environment_text']) ? $data['environment_text'] : null;
        $this->container['first_floor_text'] = isset($data['first_floor_text']) ? $data['first_floor_text'] : null;
        $this->container['for_rent'] = isset($data['for_rent']) ? $data['for_rent'] : null;
        $this->container['for_sale'] = isset($data['for_sale']) ? $data['for_sale'] : null;
        $this->container['gardens_text'] = isset($data['gardens_text']) ? $data['gardens_text'] : null;
        $this->container['ground_floor_text'] = isset($data['ground_floor_text']) ? $data['ground_floor_text'] : null;
        $this->container['hide_on_funda_until'] = isset($data['hide_on_funda_until']) ? $data['hide_on_funda_until'] : null;
        $this->container['funda_postal_code'] = isset($data['funda_postal_code']) ? $data['funda_postal_code'] : null;
        $this->container['funda_street'] = isset($data['funda_street']) ? $data['funda_street'] : null;
        $this->container['funda_locality'] = isset($data['funda_locality']) ? $data['funda_locality'] : null;
        $this->container['is_temporarily_removed_from_funda'] = isset($data['is_temporarily_removed_from_funda']) ? $data['is_temporarily_removed_from_funda'] : null;
        $this->container['hide_price'] = isset($data['hide_price']) ? $data['hide_price'] : null;
        $this->container['import_details'] = isset($data['import_details']) ? $data['import_details'] : null;
        $this->container['internal_memo'] = isset($data['internal_memo']) ? $data['internal_memo'] : null;
        $this->container['is_acquisition_assignment'] = isset($data['is_acquisition_assignment']) ? $data['is_acquisition_assignment'] : null;
        $this->container['is_cleared'] = isset($data['is_cleared']) ? $data['is_cleared'] : null;
        $this->container['is_confidential'] = isset($data['is_confidential']) ? $data['is_confidential'] : null;
        $this->container['is_private'] = isset($data['is_private']) ? $data['is_private'] : null;
        $this->container['is_production_rights'] = isset($data['is_production_rights']) ? $data['is_production_rights'] : null;
        $this->container['is_self_interest'] = isset($data['is_self_interest']) ? $data['is_self_interest'] : null;
        $this->container['is_special'] = isset($data['is_special']) ? $data['is_special'] : null;
        $this->container['is_topper'] = isset($data['is_topper']) ? $data['is_topper'] : null;
        $this->container['is_transaction_data_confidential'] = isset($data['is_transaction_data_confidential']) ? $data['is_transaction_data_confidential'] : null;
        $this->container['key_note'] = isset($data['key_note']) ? $data['key_note'] : null;
        $this->container['key_nr'] = isset($data['key_nr']) ? $data['key_nr'] : null;
        $this->container['linked_cadastres'] = isset($data['linked_cadastres']) ? $data['linked_cadastres'] : null;
        $this->container['linked_company_listings'] = isset($data['linked_company_listings']) ? $data['linked_company_listings'] : null;
        $this->container['linked_applicants'] = isset($data['linked_applicants']) ? $data['linked_applicants'] : null;
        $this->container['linked_notaries'] = isset($data['linked_notaries']) ? $data['linked_notaries'] : null;
        $this->container['linked_property_managers'] = isset($data['linked_property_managers']) ? $data['linked_property_managers'] : null;
        $this->container['linked_vendors'] = isset($data['linked_vendors']) ? $data['linked_vendors'] : null;
        $this->container['linked_financial_advisors'] = isset($data['linked_financial_advisors']) ? $data['linked_financial_advisors'] : null;
        $this->container['linked_appraisers'] = isset($data['linked_appraisers']) ? $data['linked_appraisers'] : null;
        $this->container['linked_clients'] = isset($data['linked_clients']) ? $data['linked_clients'] : null;
        $this->container['linked_offering_agencies'] = isset($data['linked_offering_agencies']) ? $data['linked_offering_agencies'] : null;
        $this->container['linked_purchasing_brokers'] = isset($data['linked_purchasing_brokers']) ? $data['linked_purchasing_brokers'] : null;
        $this->container['linked_inspectors'] = isset($data['linked_inspectors']) ? $data['linked_inspectors'] : null;
        $this->container['linked_stylists'] = isset($data['linked_stylists']) ? $data['linked_stylists'] : null;
        $this->container['linked_photographers'] = isset($data['linked_photographers']) ? $data['linked_photographers'] : null;
        $this->container['linked_potentials'] = isset($data['linked_potentials']) ? $data['linked_potentials'] : null;
        $this->container['linked_occupants'] = isset($data['linked_occupants']) ? $data['linked_occupants'] : null;
        $this->container['linked_people_who_opted'] = isset($data['linked_people_who_opted']) ? $data['linked_people_who_opted'] : null;
        $this->container['linked_project_developers'] = isset($data['linked_project_developers']) ? $data['linked_project_developers'] : null;
        $this->container['linked_tenant_representation_brokers'] = isset($data['linked_tenant_representation_brokers']) ? $data['linked_tenant_representation_brokers'] : null;
        $this->container['linked_rental_agents'] = isset($data['linked_rental_agents']) ? $data['linked_rental_agents'] : null;
        $this->container['linked_sales_brokers'] = isset($data['linked_sales_brokers']) ? $data['linked_sales_brokers'] : null;
        $this->container['linked_contact_persons'] = isset($data['linked_contact_persons']) ? $data['linked_contact_persons'] : null;
        $this->container['list_of_business'] = isset($data['list_of_business']) ? $data['list_of_business'] : null;
        $this->container['lot_description_text'] = isset($data['lot_description_text']) ? $data['lot_description_text'] : null;
        $this->container['mandate_date_time'] = isset($data['mandate_date_time']) ? $data['mandate_date_time'] : null;
        $this->container['maps'] = isset($data['maps']) ? $data['maps'] : null;
        $this->container['office_id'] = isset($data['office_id']) ? $data['office_id'] : null;
        $this->container['open_house'] = isset($data['open_house']) ? $data['open_house'] : null;
        $this->container['other_contract_source'] = isset($data['other_contract_source']) ? $data['other_contract_source'] : null;
        $this->container['other_floors_text'] = isset($data['other_floors_text']) ? $data['other_floors_text'] : null;
        $this->container['parking_text'] = isset($data['parking_text']) ? $data['parking_text'] : null;
        $this->container['parties_description_text'] = isset($data['parties_description_text']) ? $data['parties_description_text'] : null;
        $this->container['peculiarities_text'] = isset($data['peculiarities_text']) ? $data['peculiarities_text'] : null;
        $this->container['photos'] = isset($data['photos']) ? $data['photos'] : null;
        $this->container['price_description_text'] = isset($data['price_description_text']) ? $data['price_description_text'] : null;
        $this->container['products_to_pass_on'] = isset($data['products_to_pass_on']) ? $data['products_to_pass_on'] : null;
        $this->container['registration_conditions'] = isset($data['registration_conditions']) ? $data['registration_conditions'] : null;
        $this->container['rent_offer'] = isset($data['rent_offer']) ? $data['rent_offer'] : null;
        $this->container['sale_offer'] = isset($data['sale_offer']) ? $data['sale_offer'] : null;
        $this->container['second_floor_text'] = isset($data['second_floor_text']) ? $data['second_floor_text'] : null;
        $this->container['special_text'] = isset($data['special_text']) ? $data['special_text'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['third_party_media'] = isset($data['third_party_media']) ? $data['third_party_media'] : null;
        $this->container['title_text'] = isset($data['title_text']) ? $data['title_text'] : null;
        $this->container['videos'] = isset($data['videos']) ? $data['videos'] : null;
        $this->container['waiting_time'] = isset($data['waiting_time']) ? $data['waiting_time'] : null;
        $this->container['web_address'] = isset($data['web_address']) ? $data['web_address'] : null;
        $this->container['withdrawn_date_time'] = isset($data['withdrawn_date_time']) ? $data['withdrawn_date_time'] : null;
        $this->container['withdraw_reason'] = isset($data['withdraw_reason']) ? $data['withdraw_reason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['funda_postal_code']) && (mb_strlen($this->container['funda_postal_code']) > 7)) {
            $invalidProperties[] = "invalid value for 'funda_postal_code', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['funda_street']) && (mb_strlen($this->container['funda_street']) > 43)) {
            $invalidProperties[] = "invalid value for 'funda_street', the character length must be smaller than or equal to 43.";
        }

        if (!is_null($this->container['funda_locality']) && (mb_strlen($this->container['funda_locality']) > 24)) {
            $invalidProperties[] = "invalid value for 'funda_locality', the character length must be smaller than or equal to 24.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acceptance_details
     *
     * @return \Swagger\Client\Model\AcceptanceDetails
     */
    public function getAcceptanceDetails()
    {
        return $this->container['acceptance_details'];
    }

    /**
     * Sets acceptance_details
     *
     * @param \Swagger\Client\Model\AcceptanceDetails $acceptance_details acceptance_details
     *
     * @return $this
     */
    public function setAcceptanceDetails($acceptance_details)
    {
        $this->container['acceptance_details'] = $acceptance_details;

        return $this;
    }

    /**
     * Gets advertisement_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getAdvertisementText()
    {
        return $this->container['advertisement_text'];
    }

    /**
     * Sets advertisement_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $advertisement_text advertisement_text
     *
     * @return $this
     */
    public function setAdvertisementText($advertisement_text)
    {
        $this->container['advertisement_text'] = $advertisement_text;

        return $this;
    }

    /**
     * Gets assignment_phase
     *
     * @return \Swagger\Client\Model\AssignmentPhase
     */
    public function getAssignmentPhase()
    {
        return $this->container['assignment_phase'];
    }

    /**
     * Sets assignment_phase
     *
     * @param \Swagger\Client\Model\AssignmentPhase $assignment_phase assignment_phase
     *
     * @return $this
     */
    public function setAssignmentPhase($assignment_phase)
    {
        $this->container['assignment_phase'] = $assignment_phase;

        return $this;
    }

    /**
     * Gets availability_status
     *
     * @return \Swagger\Client\Model\AvailabilityStatus
     */
    public function getAvailabilityStatus()
    {
        return $this->container['availability_status'];
    }

    /**
     * Sets availability_status
     *
     * @param \Swagger\Client\Model\AvailabilityStatus $availability_status availability_status
     *
     * @return $this
     */
    public function setAvailabilityStatus($availability_status)
    {
        $this->container['availability_status'] = $availability_status;

        return $this;
    }

    /**
     * Gets balcony_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getBalconyText()
    {
        return $this->container['balcony_text'];
    }

    /**
     * Sets balcony_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $balcony_text balcony_text
     *
     * @return $this
     */
    public function setBalconyText($balcony_text)
    {
        $this->container['balcony_text'] = $balcony_text;

        return $this;
    }

    /**
     * Gets brochures
     *
     * @return \Swagger\Client\Model\BrochureBlob[]
     */
    public function getBrochures()
    {
        return $this->container['brochures'];
    }

    /**
     * Sets brochures
     *
     * @param \Swagger\Client\Model\BrochureBlob[] $brochures brochures
     *
     * @return $this
     */
    public function setBrochures($brochures)
    {
        $this->container['brochures'] = $brochures;

        return $this;
    }

    /**
     * Gets business_partners
     *
     * @return \Swagger\Client\Model\AssignmentBusinessPartner[]
     */
    public function getBusinessPartners()
    {
        return $this->container['business_partners'];
    }

    /**
     * Sets business_partners
     *
     * @param \Swagger\Client\Model\AssignmentBusinessPartner[] $business_partners business_partners
     *
     * @return $this
     */
    public function setBusinessPartners($business_partners)
    {
        $this->container['business_partners'] = $business_partners;

        return $this;
    }

    /**
     * Gets calculate_price_per_m2
     *
     * @return bool
     */
    public function getCalculatePricePerM2()
    {
        return $this->container['calculate_price_per_m2'];
    }

    /**
     * Sets calculate_price_per_m2
     *
     * @param bool $calculate_price_per_m2 calculate_price_per_m2
     *
     * @return $this
     */
    public function setCalculatePricePerM2($calculate_price_per_m2)
    {
        $this->container['calculate_price_per_m2'] = $calculate_price_per_m2;

        return $this;
    }

    /**
     * Gets changes_number_of_inside_parking_lots
     *
     * @return \Swagger\Client\Model\PartialChange[]
     */
    public function getChangesNumberOfInsideParkingLots()
    {
        return $this->container['changes_number_of_inside_parking_lots'];
    }

    /**
     * Sets changes_number_of_inside_parking_lots
     *
     * @param \Swagger\Client\Model\PartialChange[] $changes_number_of_inside_parking_lots changes_number_of_inside_parking_lots
     *
     * @return $this
     */
    public function setChangesNumberOfInsideParkingLots($changes_number_of_inside_parking_lots)
    {
        $this->container['changes_number_of_inside_parking_lots'] = $changes_number_of_inside_parking_lots;

        return $this;
    }

    /**
     * Gets changes_number_of_parking_lots
     *
     * @return \Swagger\Client\Model\PartialChange[]
     */
    public function getChangesNumberOfParkingLots()
    {
        return $this->container['changes_number_of_parking_lots'];
    }

    /**
     * Sets changes_number_of_parking_lots
     *
     * @param \Swagger\Client\Model\PartialChange[] $changes_number_of_parking_lots changes_number_of_parking_lots
     *
     * @return $this
     */
    public function setChangesNumberOfParkingLots($changes_number_of_parking_lots)
    {
        $this->container['changes_number_of_parking_lots'] = $changes_number_of_parking_lots;

        return $this;
    }

    /**
     * Gets changes_surface
     *
     * @return \Swagger\Client\Model\PartialChange[]
     */
    public function getChangesSurface()
    {
        return $this->container['changes_surface'];
    }

    /**
     * Sets changes_surface
     *
     * @param \Swagger\Client\Model\PartialChange[] $changes_surface changes_surface
     *
     * @return $this
     */
    public function setChangesSurface($changes_surface)
    {
        $this->container['changes_surface'] = $changes_surface;

        return $this;
    }

    /**
     * Gets confidentiality_level
     *
     * @return \Swagger\Client\Model\ConfidentialityLevel
     */
    public function getConfidentialityLevel()
    {
        return $this->container['confidentiality_level'];
    }

    /**
     * Sets confidentiality_level
     *
     * @param \Swagger\Client\Model\ConfidentialityLevel $confidentiality_level confidentiality_level
     *
     * @return $this
     */
    public function setConfidentialityLevel($confidentiality_level)
    {
        $this->container['confidentiality_level'] = $confidentiality_level;

        return $this;
    }

    /**
     * Gets contract_reason
     *
     * @return \Swagger\Client\Model\ContractReason
     */
    public function getContractReason()
    {
        return $this->container['contract_reason'];
    }

    /**
     * Sets contract_reason
     *
     * @param \Swagger\Client\Model\ContractReason $contract_reason contract_reason
     *
     * @return $this
     */
    public function setContractReason($contract_reason)
    {
        $this->container['contract_reason'] = $contract_reason;

        return $this;
    }

    /**
     * Gets contract_source
     *
     * @return \Swagger\Client\Model\ContractSource
     */
    public function getContractSource()
    {
        return $this->container['contract_source'];
    }

    /**
     * Sets contract_source
     *
     * @param \Swagger\Client\Model\ContractSource $contract_source contract_source
     *
     * @return $this
     */
    public function setContractSource($contract_source)
    {
        $this->container['contract_source'] = $contract_source;

        return $this;
    }

    /**
     * Gets end_date_publication
     *
     * @return \DateTime
     */
    public function getEndDatePublication()
    {
        return $this->container['end_date_publication'];
    }

    /**
     * Sets end_date_publication
     *
     * @param \DateTime $end_date_publication end_date_publication
     *
     * @return $this
     */
    public function setEndDatePublication($end_date_publication)
    {
        $this->container['end_date_publication'] = $end_date_publication;

        return $this;
    }

    /**
     * Gets environment_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getEnvironmentText()
    {
        return $this->container['environment_text'];
    }

    /**
     * Sets environment_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $environment_text environment_text
     *
     * @return $this
     */
    public function setEnvironmentText($environment_text)
    {
        $this->container['environment_text'] = $environment_text;

        return $this;
    }

    /**
     * Gets first_floor_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getFirstFloorText()
    {
        return $this->container['first_floor_text'];
    }

    /**
     * Sets first_floor_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $first_floor_text first_floor_text
     *
     * @return $this
     */
    public function setFirstFloorText($first_floor_text)
    {
        $this->container['first_floor_text'] = $first_floor_text;

        return $this;
    }

    /**
     * Gets for_rent
     *
     * @return bool
     */
    public function getForRent()
    {
        return $this->container['for_rent'];
    }

    /**
     * Sets for_rent
     *
     * @param bool $for_rent for_rent
     *
     * @return $this
     */
    public function setForRent($for_rent)
    {
        $this->container['for_rent'] = $for_rent;

        return $this;
    }

    /**
     * Gets for_sale
     *
     * @return bool
     */
    public function getForSale()
    {
        return $this->container['for_sale'];
    }

    /**
     * Sets for_sale
     *
     * @param bool $for_sale for_sale
     *
     * @return $this
     */
    public function setForSale($for_sale)
    {
        $this->container['for_sale'] = $for_sale;

        return $this;
    }

    /**
     * Gets gardens_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getGardensText()
    {
        return $this->container['gardens_text'];
    }

    /**
     * Sets gardens_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $gardens_text gardens_text
     *
     * @return $this
     */
    public function setGardensText($gardens_text)
    {
        $this->container['gardens_text'] = $gardens_text;

        return $this;
    }

    /**
     * Gets ground_floor_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getGroundFloorText()
    {
        return $this->container['ground_floor_text'];
    }

    /**
     * Sets ground_floor_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $ground_floor_text ground_floor_text
     *
     * @return $this
     */
    public function setGroundFloorText($ground_floor_text)
    {
        $this->container['ground_floor_text'] = $ground_floor_text;

        return $this;
    }

    /**
     * Gets hide_on_funda_until
     *
     * @return \DateTime
     */
    public function getHideOnFundaUntil()
    {
        return $this->container['hide_on_funda_until'];
    }

    /**
     * Sets hide_on_funda_until
     *
     * @param \DateTime $hide_on_funda_until hide_on_funda_until
     *
     * @return $this
     */
    public function setHideOnFundaUntil($hide_on_funda_until)
    {
        $this->container['hide_on_funda_until'] = $hide_on_funda_until;

        return $this;
    }

    /**
     * Gets funda_postal_code
     *
     * @return string
     */
    public function getFundaPostalCode()
    {
        return $this->container['funda_postal_code'];
    }

    /**
     * Sets funda_postal_code
     *
     * @param string $funda_postal_code funda_postal_code
     *
     * @return $this
     */
    public function setFundaPostalCode($funda_postal_code)
    {
        if (!is_null($funda_postal_code) && (mb_strlen($funda_postal_code) > 7)) {
            throw new \InvalidArgumentException('invalid length for $funda_postal_code when calling BaseAssignment., must be smaller than or equal to 7.');
        }

        $this->container['funda_postal_code'] = $funda_postal_code;

        return $this;
    }

    /**
     * Gets funda_street
     *
     * @return string
     */
    public function getFundaStreet()
    {
        return $this->container['funda_street'];
    }

    /**
     * Sets funda_street
     *
     * @param string $funda_street funda_street
     *
     * @return $this
     */
    public function setFundaStreet($funda_street)
    {
        if (!is_null($funda_street) && (mb_strlen($funda_street) > 43)) {
            throw new \InvalidArgumentException('invalid length for $funda_street when calling BaseAssignment., must be smaller than or equal to 43.');
        }

        $this->container['funda_street'] = $funda_street;

        return $this;
    }

    /**
     * Gets funda_locality
     *
     * @return string
     */
    public function getFundaLocality()
    {
        return $this->container['funda_locality'];
    }

    /**
     * Sets funda_locality
     *
     * @param string $funda_locality funda_locality
     *
     * @return $this
     */
    public function setFundaLocality($funda_locality)
    {
        if (!is_null($funda_locality) && (mb_strlen($funda_locality) > 24)) {
            throw new \InvalidArgumentException('invalid length for $funda_locality when calling BaseAssignment., must be smaller than or equal to 24.');
        }

        $this->container['funda_locality'] = $funda_locality;

        return $this;
    }

    /**
     * Gets is_temporarily_removed_from_funda
     *
     * @return bool
     */
    public function getIsTemporarilyRemovedFromFunda()
    {
        return $this->container['is_temporarily_removed_from_funda'];
    }

    /**
     * Sets is_temporarily_removed_from_funda
     *
     * @param bool $is_temporarily_removed_from_funda is_temporarily_removed_from_funda
     *
     * @return $this
     */
    public function setIsTemporarilyRemovedFromFunda($is_temporarily_removed_from_funda)
    {
        $this->container['is_temporarily_removed_from_funda'] = $is_temporarily_removed_from_funda;

        return $this;
    }

    /**
     * Gets hide_price
     *
     * @return bool
     */
    public function getHidePrice()
    {
        return $this->container['hide_price'];
    }

    /**
     * Sets hide_price
     *
     * @param bool $hide_price hide_price
     *
     * @return $this
     */
    public function setHidePrice($hide_price)
    {
        $this->container['hide_price'] = $hide_price;

        return $this;
    }

    /**
     * Gets import_details
     *
     * @return \Swagger\Client\Model\ImportDetails
     */
    public function getImportDetails()
    {
        return $this->container['import_details'];
    }

    /**
     * Sets import_details
     *
     * @param \Swagger\Client\Model\ImportDetails $import_details import_details
     *
     * @return $this
     */
    public function setImportDetails($import_details)
    {
        $this->container['import_details'] = $import_details;

        return $this;
    }

    /**
     * Gets internal_memo
     *
     * @return string
     */
    public function getInternalMemo()
    {
        return $this->container['internal_memo'];
    }

    /**
     * Sets internal_memo
     *
     * @param string $internal_memo internal_memo
     *
     * @return $this
     */
    public function setInternalMemo($internal_memo)
    {
        $this->container['internal_memo'] = $internal_memo;

        return $this;
    }

    /**
     * Gets is_acquisition_assignment
     *
     * @return bool
     */
    public function getIsAcquisitionAssignment()
    {
        return $this->container['is_acquisition_assignment'];
    }

    /**
     * Sets is_acquisition_assignment
     *
     * @param bool $is_acquisition_assignment is_acquisition_assignment
     *
     * @return $this
     */
    public function setIsAcquisitionAssignment($is_acquisition_assignment)
    {
        $this->container['is_acquisition_assignment'] = $is_acquisition_assignment;

        return $this;
    }

    /**
     * Gets is_cleared
     *
     * @return bool
     */
    public function getIsCleared()
    {
        return $this->container['is_cleared'];
    }

    /**
     * Sets is_cleared
     *
     * @param bool $is_cleared is_cleared
     *
     * @return $this
     */
    public function setIsCleared($is_cleared)
    {
        $this->container['is_cleared'] = $is_cleared;

        return $this;
    }

    /**
     * Gets is_confidential
     *
     * @return bool
     */
    public function getIsConfidential()
    {
        return $this->container['is_confidential'];
    }

    /**
     * Sets is_confidential
     *
     * @param bool $is_confidential is_confidential
     *
     * @return $this
     */
    public function setIsConfidential($is_confidential)
    {
        $this->container['is_confidential'] = $is_confidential;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool $is_private is_private
     *
     * @return $this
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets is_production_rights
     *
     * @return bool
     */
    public function getIsProductionRights()
    {
        return $this->container['is_production_rights'];
    }

    /**
     * Sets is_production_rights
     *
     * @param bool $is_production_rights is_production_rights
     *
     * @return $this
     */
    public function setIsProductionRights($is_production_rights)
    {
        $this->container['is_production_rights'] = $is_production_rights;

        return $this;
    }

    /**
     * Gets is_self_interest
     *
     * @return bool
     */
    public function getIsSelfInterest()
    {
        return $this->container['is_self_interest'];
    }

    /**
     * Sets is_self_interest
     *
     * @param bool $is_self_interest is_self_interest
     *
     * @return $this
     */
    public function setIsSelfInterest($is_self_interest)
    {
        $this->container['is_self_interest'] = $is_self_interest;

        return $this;
    }

    /**
     * Gets is_special
     *
     * @return bool
     */
    public function getIsSpecial()
    {
        return $this->container['is_special'];
    }

    /**
     * Sets is_special
     *
     * @param bool $is_special is_special
     *
     * @return $this
     */
    public function setIsSpecial($is_special)
    {
        $this->container['is_special'] = $is_special;

        return $this;
    }

    /**
     * Gets is_topper
     *
     * @return bool
     */
    public function getIsTopper()
    {
        return $this->container['is_topper'];
    }

    /**
     * Sets is_topper
     *
     * @param bool $is_topper is_topper
     *
     * @return $this
     */
    public function setIsTopper($is_topper)
    {
        $this->container['is_topper'] = $is_topper;

        return $this;
    }

    /**
     * Gets is_transaction_data_confidential
     *
     * @return bool
     */
    public function getIsTransactionDataConfidential()
    {
        return $this->container['is_transaction_data_confidential'];
    }

    /**
     * Sets is_transaction_data_confidential
     *
     * @param bool $is_transaction_data_confidential is_transaction_data_confidential
     *
     * @return $this
     */
    public function setIsTransactionDataConfidential($is_transaction_data_confidential)
    {
        $this->container['is_transaction_data_confidential'] = $is_transaction_data_confidential;

        return $this;
    }

    /**
     * Gets key_note
     *
     * @return string
     */
    public function getKeyNote()
    {
        return $this->container['key_note'];
    }

    /**
     * Sets key_note
     *
     * @param string $key_note key_note
     *
     * @return $this
     */
    public function setKeyNote($key_note)
    {
        $this->container['key_note'] = $key_note;

        return $this;
    }

    /**
     * Gets key_nr
     *
     * @return int
     */
    public function getKeyNr()
    {
        return $this->container['key_nr'];
    }

    /**
     * Sets key_nr
     *
     * @param int $key_nr key_nr
     *
     * @return $this
     */
    public function setKeyNr($key_nr)
    {
        $this->container['key_nr'] = $key_nr;

        return $this;
    }

    /**
     * Gets linked_cadastres
     *
     * @return \Swagger\Client\Model\LinkedCadastre[]
     */
    public function getLinkedCadastres()
    {
        return $this->container['linked_cadastres'];
    }

    /**
     * Sets linked_cadastres
     *
     * @param \Swagger\Client\Model\LinkedCadastre[] $linked_cadastres linked_cadastres
     *
     * @return $this
     */
    public function setLinkedCadastres($linked_cadastres)
    {
        $this->container['linked_cadastres'] = $linked_cadastres;

        return $this;
    }

    /**
     * Gets linked_company_listings
     *
     * @return \Swagger\Client\Model\LinkedCompanyListing[]
     */
    public function getLinkedCompanyListings()
    {
        return $this->container['linked_company_listings'];
    }

    /**
     * Sets linked_company_listings
     *
     * @param \Swagger\Client\Model\LinkedCompanyListing[] $linked_company_listings linked_company_listings
     *
     * @return $this
     */
    public function setLinkedCompanyListings($linked_company_listings)
    {
        $this->container['linked_company_listings'] = $linked_company_listings;

        return $this;
    }

    /**
     * Gets linked_applicants
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedApplicants()
    {
        return $this->container['linked_applicants'];
    }

    /**
     * Sets linked_applicants
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_applicants linked_applicants
     *
     * @return $this
     */
    public function setLinkedApplicants($linked_applicants)
    {
        $this->container['linked_applicants'] = $linked_applicants;

        return $this;
    }

    /**
     * Gets linked_notaries
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedNotaries()
    {
        return $this->container['linked_notaries'];
    }

    /**
     * Sets linked_notaries
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_notaries linked_notaries
     *
     * @return $this
     */
    public function setLinkedNotaries($linked_notaries)
    {
        $this->container['linked_notaries'] = $linked_notaries;

        return $this;
    }

    /**
     * Gets linked_property_managers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPropertyManagers()
    {
        return $this->container['linked_property_managers'];
    }

    /**
     * Sets linked_property_managers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_property_managers linked_property_managers
     *
     * @return $this
     */
    public function setLinkedPropertyManagers($linked_property_managers)
    {
        $this->container['linked_property_managers'] = $linked_property_managers;

        return $this;
    }

    /**
     * Gets linked_vendors
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedVendors()
    {
        return $this->container['linked_vendors'];
    }

    /**
     * Sets linked_vendors
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_vendors linked_vendors
     *
     * @return $this
     */
    public function setLinkedVendors($linked_vendors)
    {
        $this->container['linked_vendors'] = $linked_vendors;

        return $this;
    }

    /**
     * Gets linked_financial_advisors
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedFinancialAdvisors()
    {
        return $this->container['linked_financial_advisors'];
    }

    /**
     * Sets linked_financial_advisors
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_financial_advisors linked_financial_advisors
     *
     * @return $this
     */
    public function setLinkedFinancialAdvisors($linked_financial_advisors)
    {
        $this->container['linked_financial_advisors'] = $linked_financial_advisors;

        return $this;
    }

    /**
     * Gets linked_appraisers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedAppraisers()
    {
        return $this->container['linked_appraisers'];
    }

    /**
     * Sets linked_appraisers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_appraisers linked_appraisers
     *
     * @return $this
     */
    public function setLinkedAppraisers($linked_appraisers)
    {
        $this->container['linked_appraisers'] = $linked_appraisers;

        return $this;
    }

    /**
     * Gets linked_clients
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedClients()
    {
        return $this->container['linked_clients'];
    }

    /**
     * Sets linked_clients
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_clients linked_clients
     *
     * @return $this
     */
    public function setLinkedClients($linked_clients)
    {
        $this->container['linked_clients'] = $linked_clients;

        return $this;
    }

    /**
     * Gets linked_offering_agencies
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedOfferingAgencies()
    {
        return $this->container['linked_offering_agencies'];
    }

    /**
     * Sets linked_offering_agencies
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_offering_agencies linked_offering_agencies
     *
     * @return $this
     */
    public function setLinkedOfferingAgencies($linked_offering_agencies)
    {
        $this->container['linked_offering_agencies'] = $linked_offering_agencies;

        return $this;
    }

    /**
     * Gets linked_purchasing_brokers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPurchasingBrokers()
    {
        return $this->container['linked_purchasing_brokers'];
    }

    /**
     * Sets linked_purchasing_brokers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_purchasing_brokers linked_purchasing_brokers
     *
     * @return $this
     */
    public function setLinkedPurchasingBrokers($linked_purchasing_brokers)
    {
        $this->container['linked_purchasing_brokers'] = $linked_purchasing_brokers;

        return $this;
    }

    /**
     * Gets linked_inspectors
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedInspectors()
    {
        return $this->container['linked_inspectors'];
    }

    /**
     * Sets linked_inspectors
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_inspectors linked_inspectors
     *
     * @return $this
     */
    public function setLinkedInspectors($linked_inspectors)
    {
        $this->container['linked_inspectors'] = $linked_inspectors;

        return $this;
    }

    /**
     * Gets linked_stylists
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedStylists()
    {
        return $this->container['linked_stylists'];
    }

    /**
     * Sets linked_stylists
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_stylists linked_stylists
     *
     * @return $this
     */
    public function setLinkedStylists($linked_stylists)
    {
        $this->container['linked_stylists'] = $linked_stylists;

        return $this;
    }

    /**
     * Gets linked_photographers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPhotographers()
    {
        return $this->container['linked_photographers'];
    }

    /**
     * Sets linked_photographers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_photographers linked_photographers
     *
     * @return $this
     */
    public function setLinkedPhotographers($linked_photographers)
    {
        $this->container['linked_photographers'] = $linked_photographers;

        return $this;
    }

    /**
     * Gets linked_potentials
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPotentials()
    {
        return $this->container['linked_potentials'];
    }

    /**
     * Sets linked_potentials
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_potentials linked_potentials
     *
     * @return $this
     */
    public function setLinkedPotentials($linked_potentials)
    {
        $this->container['linked_potentials'] = $linked_potentials;

        return $this;
    }

    /**
     * Gets linked_occupants
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedOccupants()
    {
        return $this->container['linked_occupants'];
    }

    /**
     * Sets linked_occupants
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_occupants linked_occupants
     *
     * @return $this
     */
    public function setLinkedOccupants($linked_occupants)
    {
        $this->container['linked_occupants'] = $linked_occupants;

        return $this;
    }

    /**
     * Gets linked_people_who_opted
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedPeopleWhoOpted()
    {
        return $this->container['linked_people_who_opted'];
    }

    /**
     * Sets linked_people_who_opted
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_people_who_opted linked_people_who_opted
     *
     * @return $this
     */
    public function setLinkedPeopleWhoOpted($linked_people_who_opted)
    {
        $this->container['linked_people_who_opted'] = $linked_people_who_opted;

        return $this;
    }

    /**
     * Gets linked_project_developers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedProjectDevelopers()
    {
        return $this->container['linked_project_developers'];
    }

    /**
     * Sets linked_project_developers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_project_developers linked_project_developers
     *
     * @return $this
     */
    public function setLinkedProjectDevelopers($linked_project_developers)
    {
        $this->container['linked_project_developers'] = $linked_project_developers;

        return $this;
    }

    /**
     * Gets linked_tenant_representation_brokers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedTenantRepresentationBrokers()
    {
        return $this->container['linked_tenant_representation_brokers'];
    }

    /**
     * Sets linked_tenant_representation_brokers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_tenant_representation_brokers linked_tenant_representation_brokers
     *
     * @return $this
     */
    public function setLinkedTenantRepresentationBrokers($linked_tenant_representation_brokers)
    {
        $this->container['linked_tenant_representation_brokers'] = $linked_tenant_representation_brokers;

        return $this;
    }

    /**
     * Gets linked_rental_agents
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedRentalAgents()
    {
        return $this->container['linked_rental_agents'];
    }

    /**
     * Sets linked_rental_agents
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_rental_agents linked_rental_agents
     *
     * @return $this
     */
    public function setLinkedRentalAgents($linked_rental_agents)
    {
        $this->container['linked_rental_agents'] = $linked_rental_agents;

        return $this;
    }

    /**
     * Gets linked_sales_brokers
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedSalesBrokers()
    {
        return $this->container['linked_sales_brokers'];
    }

    /**
     * Sets linked_sales_brokers
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_sales_brokers linked_sales_brokers
     *
     * @return $this
     */
    public function setLinkedSalesBrokers($linked_sales_brokers)
    {
        $this->container['linked_sales_brokers'] = $linked_sales_brokers;

        return $this;
    }

    /**
     * Gets linked_contact_persons
     *
     * @return \Swagger\Client\Model\LinkedRelation[]
     */
    public function getLinkedContactPersons()
    {
        return $this->container['linked_contact_persons'];
    }

    /**
     * Sets linked_contact_persons
     *
     * @param \Swagger\Client\Model\LinkedRelation[] $linked_contact_persons linked_contact_persons
     *
     * @return $this
     */
    public function setLinkedContactPersons($linked_contact_persons)
    {
        $this->container['linked_contact_persons'] = $linked_contact_persons;

        return $this;
    }

    /**
     * Gets list_of_business
     *
     * @return \Swagger\Client\Model\BusinessToTakeOver[]
     */
    public function getListOfBusiness()
    {
        return $this->container['list_of_business'];
    }

    /**
     * Sets list_of_business
     *
     * @param \Swagger\Client\Model\BusinessToTakeOver[] $list_of_business list_of_business
     *
     * @return $this
     */
    public function setListOfBusiness($list_of_business)
    {
        $this->container['list_of_business'] = $list_of_business;

        return $this;
    }

    /**
     * Gets lot_description_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getLotDescriptionText()
    {
        return $this->container['lot_description_text'];
    }

    /**
     * Sets lot_description_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $lot_description_text lot_description_text
     *
     * @return $this
     */
    public function setLotDescriptionText($lot_description_text)
    {
        $this->container['lot_description_text'] = $lot_description_text;

        return $this;
    }

    /**
     * Gets mandate_date_time
     *
     * @return \DateTime
     */
    public function getMandateDateTime()
    {
        return $this->container['mandate_date_time'];
    }

    /**
     * Sets mandate_date_time
     *
     * @param \DateTime $mandate_date_time mandate_date_time
     *
     * @return $this
     */
    public function setMandateDateTime($mandate_date_time)
    {
        $this->container['mandate_date_time'] = $mandate_date_time;

        return $this;
    }

    /**
     * Gets maps
     *
     * @return \Swagger\Client\Model\MapBlob[]
     */
    public function getMaps()
    {
        return $this->container['maps'];
    }

    /**
     * Sets maps
     *
     * @param \Swagger\Client\Model\MapBlob[] $maps maps
     *
     * @return $this
     */
    public function setMaps($maps)
    {
        $this->container['maps'] = $maps;

        return $this;
    }

    /**
     * Gets office_id
     *
     * @return string
     */
    public function getOfficeId()
    {
        return $this->container['office_id'];
    }

    /**
     * Sets office_id
     *
     * @param string $office_id office_id
     *
     * @return $this
     */
    public function setOfficeId($office_id)
    {
        $this->container['office_id'] = $office_id;

        return $this;
    }

    /**
     * Gets open_house
     *
     * @return \Swagger\Client\Model\OpenHouse
     */
    public function getOpenHouse()
    {
        return $this->container['open_house'];
    }

    /**
     * Sets open_house
     *
     * @param \Swagger\Client\Model\OpenHouse $open_house open_house
     *
     * @return $this
     */
    public function setOpenHouse($open_house)
    {
        $this->container['open_house'] = $open_house;

        return $this;
    }

    /**
     * Gets other_contract_source
     *
     * @return string
     */
    public function getOtherContractSource()
    {
        return $this->container['other_contract_source'];
    }

    /**
     * Sets other_contract_source
     *
     * @param string $other_contract_source other_contract_source
     *
     * @return $this
     */
    public function setOtherContractSource($other_contract_source)
    {
        $this->container['other_contract_source'] = $other_contract_source;

        return $this;
    }

    /**
     * Gets other_floors_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getOtherFloorsText()
    {
        return $this->container['other_floors_text'];
    }

    /**
     * Sets other_floors_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $other_floors_text other_floors_text
     *
     * @return $this
     */
    public function setOtherFloorsText($other_floors_text)
    {
        $this->container['other_floors_text'] = $other_floors_text;

        return $this;
    }

    /**
     * Gets parking_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getParkingText()
    {
        return $this->container['parking_text'];
    }

    /**
     * Sets parking_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $parking_text parking_text
     *
     * @return $this
     */
    public function setParkingText($parking_text)
    {
        $this->container['parking_text'] = $parking_text;

        return $this;
    }

    /**
     * Gets parties_description_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getPartiesDescriptionText()
    {
        return $this->container['parties_description_text'];
    }

    /**
     * Sets parties_description_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $parties_description_text parties_description_text
     *
     * @return $this
     */
    public function setPartiesDescriptionText($parties_description_text)
    {
        $this->container['parties_description_text'] = $parties_description_text;

        return $this;
    }

    /**
     * Gets peculiarities_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getPeculiaritiesText()
    {
        return $this->container['peculiarities_text'];
    }

    /**
     * Sets peculiarities_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $peculiarities_text peculiarities_text
     *
     * @return $this
     */
    public function setPeculiaritiesText($peculiarities_text)
    {
        $this->container['peculiarities_text'] = $peculiarities_text;

        return $this;
    }

    /**
     * Gets photos
     *
     * @return \Swagger\Client\Model\PhotoBlob[]
     */
    public function getPhotos()
    {
        return $this->container['photos'];
    }

    /**
     * Sets photos
     *
     * @param \Swagger\Client\Model\PhotoBlob[] $photos photos
     *
     * @return $this
     */
    public function setPhotos($photos)
    {
        $this->container['photos'] = $photos;

        return $this;
    }

    /**
     * Gets price_description_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getPriceDescriptionText()
    {
        return $this->container['price_description_text'];
    }

    /**
     * Sets price_description_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $price_description_text price_description_text
     *
     * @return $this
     */
    public function setPriceDescriptionText($price_description_text)
    {
        $this->container['price_description_text'] = $price_description_text;

        return $this;
    }

    /**
     * Gets products_to_pass_on
     *
     * @return \Swagger\Client\Model\ProductToPassOn[]
     */
    public function getProductsToPassOn()
    {
        return $this->container['products_to_pass_on'];
    }

    /**
     * Sets products_to_pass_on
     *
     * @param \Swagger\Client\Model\ProductToPassOn[] $products_to_pass_on products_to_pass_on
     *
     * @return $this
     */
    public function setProductsToPassOn($products_to_pass_on)
    {
        $this->container['products_to_pass_on'] = $products_to_pass_on;

        return $this;
    }

    /**
     * Gets registration_conditions
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getRegistrationConditions()
    {
        return $this->container['registration_conditions'];
    }

    /**
     * Sets registration_conditions
     *
     * @param \Swagger\Client\Model\TranslatedText[] $registration_conditions registration_conditions
     *
     * @return $this
     */
    public function setRegistrationConditions($registration_conditions)
    {
        $this->container['registration_conditions'] = $registration_conditions;

        return $this;
    }

    /**
     * Gets rent_offer
     *
     * @return \Swagger\Client\Model\RentOffer
     */
    public function getRentOffer()
    {
        return $this->container['rent_offer'];
    }

    /**
     * Sets rent_offer
     *
     * @param \Swagger\Client\Model\RentOffer $rent_offer rent_offer
     *
     * @return $this
     */
    public function setRentOffer($rent_offer)
    {
        $this->container['rent_offer'] = $rent_offer;

        return $this;
    }

    /**
     * Gets sale_offer
     *
     * @return \Swagger\Client\Model\SaleOffer
     */
    public function getSaleOffer()
    {
        return $this->container['sale_offer'];
    }

    /**
     * Sets sale_offer
     *
     * @param \Swagger\Client\Model\SaleOffer $sale_offer sale_offer
     *
     * @return $this
     */
    public function setSaleOffer($sale_offer)
    {
        $this->container['sale_offer'] = $sale_offer;

        return $this;
    }

    /**
     * Gets second_floor_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getSecondFloorText()
    {
        return $this->container['second_floor_text'];
    }

    /**
     * Sets second_floor_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $second_floor_text second_floor_text
     *
     * @return $this
     */
    public function setSecondFloorText($second_floor_text)
    {
        $this->container['second_floor_text'] = $second_floor_text;

        return $this;
    }

    /**
     * Gets special_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getSpecialText()
    {
        return $this->container['special_text'];
    }

    /**
     * Sets special_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $special_text special_text
     *
     * @return $this
     */
    public function setSpecialText($special_text)
    {
        $this->container['special_text'] = $special_text;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets third_party_media
     *
     * @return \Swagger\Client\Model\ThirdPartyMedia[]
     */
    public function getThirdPartyMedia()
    {
        return $this->container['third_party_media'];
    }

    /**
     * Sets third_party_media
     *
     * @param \Swagger\Client\Model\ThirdPartyMedia[] $third_party_media third_party_media
     *
     * @return $this
     */
    public function setThirdPartyMedia($third_party_media)
    {
        $this->container['third_party_media'] = $third_party_media;

        return $this;
    }

    /**
     * Gets title_text
     *
     * @return \Swagger\Client\Model\TranslatedText[]
     */
    public function getTitleText()
    {
        return $this->container['title_text'];
    }

    /**
     * Sets title_text
     *
     * @param \Swagger\Client\Model\TranslatedText[] $title_text title_text
     *
     * @return $this
     */
    public function setTitleText($title_text)
    {
        $this->container['title_text'] = $title_text;

        return $this;
    }

    /**
     * Gets videos
     *
     * @return \Swagger\Client\Model\VideoBlob[]
     */
    public function getVideos()
    {
        return $this->container['videos'];
    }

    /**
     * Sets videos
     *
     * @param \Swagger\Client\Model\VideoBlob[] $videos videos
     *
     * @return $this
     */
    public function setVideos($videos)
    {
        $this->container['videos'] = $videos;

        return $this;
    }

    /**
     * Gets waiting_time
     *
     * @return \Swagger\Client\Model\WaitingTime
     */
    public function getWaitingTime()
    {
        return $this->container['waiting_time'];
    }

    /**
     * Sets waiting_time
     *
     * @param \Swagger\Client\Model\WaitingTime $waiting_time waiting_time
     *
     * @return $this
     */
    public function setWaitingTime($waiting_time)
    {
        $this->container['waiting_time'] = $waiting_time;

        return $this;
    }

    /**
     * Gets web_address
     *
     * @return string
     */
    public function getWebAddress()
    {
        return $this->container['web_address'];
    }

    /**
     * Sets web_address
     *
     * @param string $web_address web_address
     *
     * @return $this
     */
    public function setWebAddress($web_address)
    {
        $this->container['web_address'] = $web_address;

        return $this;
    }

    /**
     * Gets withdrawn_date_time
     *
     * @return \DateTime
     */
    public function getWithdrawnDateTime()
    {
        return $this->container['withdrawn_date_time'];
    }

    /**
     * Sets withdrawn_date_time
     *
     * @param \DateTime $withdrawn_date_time withdrawn_date_time
     *
     * @return $this
     */
    public function setWithdrawnDateTime($withdrawn_date_time)
    {
        $this->container['withdrawn_date_time'] = $withdrawn_date_time;

        return $this;
    }

    /**
     * Gets withdraw_reason
     *
     * @return \Swagger\Client\Model\WithdrawReason
     */
    public function getWithdrawReason()
    {
        return $this->container['withdraw_reason'];
    }

    /**
     * Sets withdraw_reason
     *
     * @param \Swagger\Client\Model\WithdrawReason $withdraw_reason withdraw_reason
     *
     * @return $this
     */
    public function setWithdrawReason($withdraw_reason)
    {
        $this->container['withdraw_reason'] = $withdraw_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


