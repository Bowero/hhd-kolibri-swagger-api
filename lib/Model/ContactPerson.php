<?php
/**
 * ContactPerson
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactPerson Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactPerson extends Person 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactPerson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'culture' => 'string',
        'keep_addresses_in_sync' => 'bool',
        'future_address' => '\Swagger\Client\Model\Address',
        'future_address_activation_date_time' => '\DateTime',
        'linked_administrations' => '\Swagger\Client\Model\ContactPersonFinancialAdministration[]',
        'linked_partner' => '\Swagger\Client\Model\ContactPersonPartner',
        'linked_relation_groups' => '\Swagger\Client\Model\LinkedRelationGroup[]',
        'linked_folder_tree' => '\Swagger\Client\Model\LinkedFolderTree'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'culture' => null,
        'keep_addresses_in_sync' => null,
        'future_address' => null,
        'future_address_activation_date_time' => 'date-time',
        'linked_administrations' => null,
        'linked_partner' => null,
        'linked_relation_groups' => null,
        'linked_folder_tree' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'culture' => 'culture',
        'keep_addresses_in_sync' => 'keepAddressesInSync',
        'future_address' => 'futureAddress',
        'future_address_activation_date_time' => 'futureAddressActivationDateTime',
        'linked_administrations' => 'linkedAdministrations',
        'linked_partner' => 'linkedPartner',
        'linked_relation_groups' => 'linkedRelationGroups',
        'linked_folder_tree' => 'linkedFolderTree'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'culture' => 'setCulture',
        'keep_addresses_in_sync' => 'setKeepAddressesInSync',
        'future_address' => 'setFutureAddress',
        'future_address_activation_date_time' => 'setFutureAddressActivationDateTime',
        'linked_administrations' => 'setLinkedAdministrations',
        'linked_partner' => 'setLinkedPartner',
        'linked_relation_groups' => 'setLinkedRelationGroups',
        'linked_folder_tree' => 'setLinkedFolderTree'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'culture' => 'getCulture',
        'keep_addresses_in_sync' => 'getKeepAddressesInSync',
        'future_address' => 'getFutureAddress',
        'future_address_activation_date_time' => 'getFutureAddressActivationDateTime',
        'linked_administrations' => 'getLinkedAdministrations',
        'linked_partner' => 'getLinkedPartner',
        'linked_relation_groups' => 'getLinkedRelationGroups',
        'linked_folder_tree' => 'getLinkedFolderTree'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['keep_addresses_in_sync'] = isset($data['keep_addresses_in_sync']) ? $data['keep_addresses_in_sync'] : null;
        $this->container['future_address'] = isset($data['future_address']) ? $data['future_address'] : null;
        $this->container['future_address_activation_date_time'] = isset($data['future_address_activation_date_time']) ? $data['future_address_activation_date_time'] : null;
        $this->container['linked_administrations'] = isset($data['linked_administrations']) ? $data['linked_administrations'] : null;
        $this->container['linked_partner'] = isset($data['linked_partner']) ? $data['linked_partner'] : null;
        $this->container['linked_relation_groups'] = isset($data['linked_relation_groups']) ? $data['linked_relation_groups'] : null;
        $this->container['linked_folder_tree'] = isset($data['linked_folder_tree']) ? $data['linked_folder_tree'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture The prefered culture of this contact person in the format languagecode2-country/regioncode2.
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets keep_addresses_in_sync
     *
     * @return bool
     */
    public function getKeepAddressesInSync()
    {
        return $this->container['keep_addresses_in_sync'];
    }

    /**
     * Sets keep_addresses_in_sync
     *
     * @param bool $keep_addresses_in_sync keep_addresses_in_sync
     *
     * @return $this
     */
    public function setKeepAddressesInSync($keep_addresses_in_sync)
    {
        $this->container['keep_addresses_in_sync'] = $keep_addresses_in_sync;

        return $this;
    }

    /**
     * Gets future_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getFutureAddress()
    {
        return $this->container['future_address'];
    }

    /**
     * Sets future_address
     *
     * @param \Swagger\Client\Model\Address $future_address future_address
     *
     * @return $this
     */
    public function setFutureAddress($future_address)
    {
        $this->container['future_address'] = $future_address;

        return $this;
    }

    /**
     * Gets future_address_activation_date_time
     *
     * @return \DateTime
     */
    public function getFutureAddressActivationDateTime()
    {
        return $this->container['future_address_activation_date_time'];
    }

    /**
     * Sets future_address_activation_date_time
     *
     * @param \DateTime $future_address_activation_date_time future_address_activation_date_time
     *
     * @return $this
     */
    public function setFutureAddressActivationDateTime($future_address_activation_date_time)
    {
        $this->container['future_address_activation_date_time'] = $future_address_activation_date_time;

        return $this;
    }

    /**
     * Gets linked_administrations
     *
     * @return \Swagger\Client\Model\ContactPersonFinancialAdministration[]
     */
    public function getLinkedAdministrations()
    {
        return $this->container['linked_administrations'];
    }

    /**
     * Sets linked_administrations
     *
     * @param \Swagger\Client\Model\ContactPersonFinancialAdministration[] $linked_administrations linked_administrations
     *
     * @return $this
     */
    public function setLinkedAdministrations($linked_administrations)
    {
        $this->container['linked_administrations'] = $linked_administrations;

        return $this;
    }

    /**
     * Gets linked_partner
     *
     * @return \Swagger\Client\Model\ContactPersonPartner
     */
    public function getLinkedPartner()
    {
        return $this->container['linked_partner'];
    }

    /**
     * Sets linked_partner
     *
     * @param \Swagger\Client\Model\ContactPersonPartner $linked_partner linked_partner
     *
     * @return $this
     */
    public function setLinkedPartner($linked_partner)
    {
        $this->container['linked_partner'] = $linked_partner;

        return $this;
    }

    /**
     * Gets linked_relation_groups
     *
     * @return \Swagger\Client\Model\LinkedRelationGroup[]
     */
    public function getLinkedRelationGroups()
    {
        return $this->container['linked_relation_groups'];
    }

    /**
     * Sets linked_relation_groups
     *
     * @param \Swagger\Client\Model\LinkedRelationGroup[] $linked_relation_groups linked_relation_groups
     *
     * @return $this
     */
    public function setLinkedRelationGroups($linked_relation_groups)
    {
        $this->container['linked_relation_groups'] = $linked_relation_groups;

        return $this;
    }

    /**
     * Gets linked_folder_tree
     *
     * @return \Swagger\Client\Model\LinkedFolderTree
     */
    public function getLinkedFolderTree()
    {
        return $this->container['linked_folder_tree'];
    }

    /**
     * Sets linked_folder_tree
     *
     * @param \Swagger\Client\Model\LinkedFolderTree $linked_folder_tree linked_folder_tree
     *
     * @return $this
     */
    public function setLinkedFolderTree($linked_folder_tree)
    {
        $this->container['linked_folder_tree'] = $linked_folder_tree;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


