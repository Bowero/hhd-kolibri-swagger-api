<?php
/**
 * TableResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * TableResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TableResponse extends ApiResponse 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TableResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acceptances' => '\Swagger\Client\Model\AcceptanceOption[]',
        'acquisition_status_options' => '\Swagger\Client\Model\AcquisitionStatusOption[]',
        'address_type_options' => '\Swagger\Client\Model\AddressTypeOption[]',
        'agenda_item_category_types' => '\Swagger\Client\Model\AgendaItemCategoryTypeOption[]',
        'agenda_item_reminder_merge_field_options' => '\Swagger\Client\Model\AgendaItemReminderMergeFieldOption[]',
        'agenda_standard_duration_options' => '\Swagger\Client\Model\AgendaStandardDurationOption[]',
        'age_range_options' => '\Swagger\Client\Model\AgeRangeOption[]',
        'agricultural_subtype_others' => '\Swagger\Client\Model\AgriculturalSubtypeOtherOption[]',
        'air_treatment_options' => '\Swagger\Client\Model\AirTreatmentOption[]',
        'alv_agricultural_function_options' => '\Swagger\Client\Model\AlvAgriculturalFunctionOption[]',
        'alv_building_plot_destination_options' => '\Swagger\Client\Model\AlvBuildingPlotDestinationOption[]',
        'alv_continuation_options' => '\Swagger\Client\Model\AlvContinuationOption[]',
        'alv_non_agricultural_function_options' => '\Swagger\Client\Model\AlvNonAgriculturalFunctionOption[]',
        'amenities_options' => '\Swagger\Client\Model\AmenitiesOption[]',
        'apartment_characteristics' => '\Swagger\Client\Model\ApartmentCharacteristicOption[]',
        'apartment_sorts' => '\Swagger\Client\Model\ApartmentSortOption[]',
        'applicant_type_options' => '\Swagger\Client\Model\ApplicantTypeOption[]',
        'appraisal_certifications' => '\Swagger\Client\Model\AppraisalCertificationOption[]',
        'assignment_phases' => '\Swagger\Client\Model\AssignmentPhaseOption[]',
        'assignment_types' => '\Swagger\Client\Model\AssignmentTypeOption[]',
        'attic_options' => '\Swagger\Client\Model\AtticOptionOption[]',
        'availability_statuses' => '\Swagger\Client\Model\AvailabilityStatusOption[]',
        'balcony_types' => '\Swagger\Client\Model\BalconyTypeOption[]',
        'bathroom_facilities' => '\Swagger\Client\Model\BathroomFacilityOption[]',
        'beverage_hospitality_sector_types' => '\Swagger\Client\Model\BeverageHospitalityTypeOption[]',
        'bid_status_options' => '\Swagger\Client\Model\BidStatusOption[]',
        'bid_type_options' => '\Swagger\Client\Model\BidTypeOption[]',
        'bog_combination_object_situation_options' => '\Swagger\Client\Model\BogCombinationObjectSituationOption[]',
        'bog_combination_object_status_options' => '\Swagger\Client\Model\BogCombinationObjectStatusOption[]',
        'bog_combination_object_type_options' => '\Swagger\Client\Model\BogCombinationObjectTypeOption[]',
        'building_type_options' => '\Swagger\Client\Model\BuildingTypeOption[]',
        'buyer_type_options' => '\Swagger\Client\Model\BuyerTypeOption[]',
        'cadastral_lot_size_options' => '\Swagger\Client\Model\CadastralLotSizeOption[]',
        'cattle_farming_subtypes' => '\Swagger\Client\Model\CattleFarmingSubtypeOption[]',
        'certification_options' => '\Swagger\Client\Model\CertificationOption[]',
        'child_age_range_options' => '\Swagger\Client\Model\ChildAgeRangeOption[]',
        'civil_states' => '\Swagger\Client\Model\CivilStateOption[]',
        'comfort_quality_options' => '\Swagger\Client\Model\ComfortQualityOption[]',
        'commission_paid_by_options' => '\Swagger\Client\Model\CommissionPaidByOption[]',
        'commission_type_options' => '\Swagger\Client\Model\CommissionTypeOption[]',
        'condition_options' => '\Swagger\Client\Model\ConditionOption[]',
        'condition_type_options' => '\Swagger\Client\Model\ConditionTypeOption[]',
        'construction_option_options' => '\Swagger\Client\Model\ConstructionOptionOption[]',
        'construction_periods' => '\Swagger\Client\Model\ConstructionPeriodOption[]',
        'contact_link_types' => '\Swagger\Client\Model\ContactLinkTypeSuggestion[]',
        'contact_person_title_suggestions' => '\Swagger\Client\Model\ContactPersonTitleSuggestionOption[]',
        'countries' => '\Swagger\Client\Model\CountryOption[]',
        'default_folder_tree_category_options' => '\Swagger\Client\Model\DefaultFolderTreeCategoryOption[]',
        'document_template_type_options' => '\Swagger\Client\Model\DocumentTemplateTypeOption[]',
        'drainage_options' => '\Swagger\Client\Model\DrainageOption[]',
        'email_address_types' => '\Swagger\Client\Model\EmailAddressTypeOption[]',
        'energy_class_options' => '\Swagger\Client\Model\EnergyClassOption[]',
        'energy_source_options' => '\Swagger\Client\Model\EnergySourceOption[]',
        'exclusive_status_options' => '\Swagger\Client\Model\ExclusiveStatusOption[]',
        'facility_options' => '\Swagger\Client\Model\FacilityOption[]',
        'family_income_options' => '\Swagger\Client\Model\FamilyIncomeOption[]',
        'fastfood_hospitality_sector_types' => '\Swagger\Client\Model\FastfoodHospitalitySectorTypeOption[]',
        'fixed_variable_options' => '\Swagger\Client\Model\FixedVariableOption[]',
        'floor_type_options' => '\Swagger\Client\Model\FloorTypeOption[]',
        'furnishing_options' => '\Swagger\Client\Model\FurnishingOption[]',
        'garage_type_options' => '\Swagger\Client\Model\GarageTypeOption[]',
        'garden_quality_options' => '\Swagger\Client\Model\GardenQualityOption[]',
        'garden_type_options' => '\Swagger\Client\Model\GardenTypeOption[]',
        'gender' => '\Swagger\Client\Model\GenderOption[]',
        'ground_lease_period_options' => '\Swagger\Client\Model\GroundLeasePeriodOption[]',
        'ground_ownership_type_options' => '\Swagger\Client\Model\GroundOwnershipTypeOption[]',
        'ground_usage_options' => '\Swagger\Client\Model\GroundUsageOption[]',
        'heating_method_options' => '\Swagger\Client\Model\HeatingMethodOption[]',
        'heating_water_method_options' => '\Swagger\Client\Model\HeatingWaterMethodOption[]',
        'horeca_sector_type_options' => '\Swagger\Client\Model\HorecaSectorTypeOption[]',
        'horse_company_subtypes' => '\Swagger\Client\Model\HorseCompanySubtypeOption[]',
        'horse_trough_location_options' => '\Swagger\Client\Model\HorseTroughLocationOption[]',
        'horticultural_company_types' => '\Swagger\Client\Model\HorticulturalCompanyTypeOption[]',
        'hotel_hospitality_sector_types' => '\Swagger\Client\Model\HotelHospitalitySectorTypeOption[]',
        'house_characteristics' => '\Swagger\Client\Model\HouseCharacteristicOption[]',
        'household_composition_options' => '\Swagger\Client\Model\HouseholdCompositionOption[]',
        'house_sorts' => '\Swagger\Client\Model\HouseSortOption[]',
        'house_types' => '\Swagger\Client\Model\HouseTypeOption[]',
        'identification_types' => '\Swagger\Client\Model\IdentificationTypeOption[]',
        'industrial_building_facility_options' => '\Swagger\Client\Model\IndustrialBuildingFacilityOption[]',
        'investment_type_options' => '\Swagger\Client\Model\InvestmentTypeOption[]',
        'invoice_due_terms' => '\Swagger\Client\Model\InvoiceDueTermOption[]',
        'invoice_statuses' => '\Swagger\Client\Model\InvoiceStatusOption[]',
        'invoice_types' => '\Swagger\Client\Model\InvoiceTypeOption[]',
        'isolation_type_options' => '\Swagger\Client\Model\IsolationTypeOption[]',
        'kitchen_facility_options' => '\Swagger\Client\Model\KitchenFacilityOption[]',
        'kitchen_types' => '\Swagger\Client\Model\KitchenTypeOption[]',
        'land_property_sub_type_options' => '\Swagger\Client\Model\LandPropertySubTypeOption[]',
        'languages' => '\Swagger\Client\Model\LanguageSpokenOption[]',
        'leasehold_owner_type_options' => '\Swagger\Client\Model\LeaseholdOwnerTypeOption[]',
        'lease_term_unit_options' => '\Swagger\Client\Model\LeaseTermUnitOption[]',
        'legal_status_options' => '\Swagger\Client\Model\LegalStatusOption[]',
        'leisure_facility_type_options' => '\Swagger\Client\Model\LeisureFacilityOption[]',
        'leisure_type_options' => '\Swagger\Client\Model\LeisureTypeOption[]',
        'listing_types' => '\Swagger\Client\Model\ListingTypeOption[]',
        'living_room_types' => '\Swagger\Client\Model\LivingRoomTypeOption[]',
        'location_places' => '\Swagger\Client\Model\LocationPlaceOption[]',
        'match_mail_period_options' => '\Swagger\Client\Model\MatchMailPeriodOption[]',
        'match_mail_trigger_options' => '\Swagger\Client\Model\MatchMailTriggerOption[]',
        'measurment_options' => '\Swagger\Client\Model\MeasurementUnitOption[]',
        'media_contract_status_options' => '\Swagger\Client\Model\MediaContractStatusOption[]',
        'media_partner_categories' => '\Swagger\Client\Model\MediaPartnerCategoryOption[]',
        'mixed_forms' => '\Swagger\Client\Model\MixedFormOption[]',
        'moving_reason_options' => '\Swagger\Client\Model\MovingReasonOption[]',
        'nature_registration_options' => '\Swagger\Client\Model\NatureRegistrationOption[]',
        'notification_date_format_options' => '\Swagger\Client\Model\NotificationDateFormatOption[]',
        'offer_type_options' => '\Swagger\Client\Model\OfferTypeOption[]',
        'open_house_recurrency_options' => '\Swagger\Client\Model\OpenHouseRecurrenceOption[]',
        'orientations' => '\Swagger\Client\Model\OrientationOption[]',
        'ownership_options' => '\Swagger\Client\Model\OwnershipOption[]',
        'ownership_type_options' => '\Swagger\Client\Model\OwnershipTypeOption[]',
        'parking_facility_options' => '\Swagger\Client\Model\ParkingFacilityOption[]',
        'parking_type_options' => '\Swagger\Client\Model\ParkingTypeOption[]',
        'pavement_type_options' => '\Swagger\Client\Model\PavementTypeOption[]',
        'peculiarity_options' => '\Swagger\Client\Model\PeculiarityOption[]',
        'phone_number_types' => '\Swagger\Client\Model\PhoneNumberTypeOption[]',
        'pig_company_types' => '\Swagger\Client\Model\PigCompanyTypeOption[]',
        'point_of_interest_options' => '\Swagger\Client\Model\PointOfInterestTypeOption[]',
        'polution_type_options' => '\Swagger\Client\Model\PollutionTypeOption[]',
        'poultry_farming_subtypes' => '\Swagger\Client\Model\PoultryFarmingSubtypeOption[]',
        'poultry_housing_type_options' => '\Swagger\Client\Model\PoultryHousingTypeOption[]',
        'price_codes' => '\Swagger\Client\Model\PriceCodeOption[]',
        'price_history_events' => '\Swagger\Client\Model\PriceHistoryEventOption[]',
        'priorities' => '\Swagger\Client\Model\PriorityOption[]',
        'publication_statuses' => '\Swagger\Client\Model\PublicationStatusOption[]',
        'real_estate_associations' => '\Swagger\Client\Model\RealEstateAssociationOption[]',
        'real_estate_groups' => '\Swagger\Client\Model\RealEstateGroupOption[]',
        'register_reason_options' => '\Swagger\Client\Model\RegisterReasonOption[]',
        'relation_roles' => '\Swagger\Client\Model\RelationRoleOption[]',
        'relation_types' => '\Swagger\Client\Model\RelationTypeOption[]',
        'reminder_minutes_options' => '\Swagger\Client\Model\ReminderMinutesOption[]',
        'reminder_notification_settings_type_option_list' => '\Swagger\Client\Model\ReminderNotificationSettingTypeOption[]',
        'rent_conditions' => '\Swagger\Client\Model\RentConditionOption[]',
        'rent_specifications' => '\Swagger\Client\Model\RentSpecificationOption[]',
        'residential_building_type_options' => '\Swagger\Client\Model\ResidentialBuildingTypeOption[]',
        'residential_facility_options' => '\Swagger\Client\Model\ResidentialFacilityOption[]',
        'residential_subtype_others' => '\Swagger\Client\Model\ResidentialSubtypeOtherOption[]',
        'restaurant_hospitality_sector_types' => '\Swagger\Client\Model\RestaurantHospitalitySectorTypeOption[]',
        'roof_material_options' => '\Swagger\Client\Model\RoofMaterialOption[]',
        'roof_type_options' => '\Swagger\Client\Model\RoofTypeOption[]',
        'sale_conditions' => '\Swagger\Client\Model\SaleConditionOption[]',
        'search_assignment_facility_options' => '\Swagger\Client\Model\SearchAssignmentFacilityOption[]',
        'search_assignment_peculiarity_options' => '\Swagger\Client\Model\SearchAssignmentPeculiarityOption[]',
        'situated_type_options' => '\Swagger\Client\Model\SituatedTypeOption[]',
        'social_media_type_options' => '\Swagger\Client\Model\SocialMediaTypeOption[]',
        'social_property_facility_type_options' => '\Swagger\Client\Model\SocialPropertyFacilityOption[]',
        'social_property_type_options' => '\Swagger\Client\Model\SocialPropertyTypeOption[]',
        'soil_type_options' => '\Swagger\Client\Model\SoilTypeOption[]',
        'space_types' => '\Swagger\Client\Model\SpaceTypeOption[]',
        'storage_room_type_options' => '\Swagger\Client\Model\StorageRoomTypeOption[]',
        'stoves' => '\Swagger\Client\Model\StoveOption[]',
        'take_over_specification_options' => '\Swagger\Client\Model\TakeOverSpecificationOption[]',
        'task_categories' => '\Swagger\Client\Model\TaskCategoryOption[]',
        'task_follow_ups' => '\Swagger\Client\Model\TaskFollowUpOption[]',
        'task_statuses' => '\Swagger\Client\Model\TaskStatusOption[]',
        'template_definition_category_options' => '\Swagger\Client\Model\TemplateDefinitionCategoryOption[]',
        'timeline_action_sub_options' => '\Swagger\Client\Model\TimelineActionSubOption[]',
        'timeline_action_types' => '\Swagger\Client\Model\TimelineActionTypeOption[]',
        'type_alv_options' => '\Swagger\Client\Model\TypeAlvOption[]',
        'type_alv_other_options' => '\Swagger\Client\Model\TypeAlvOtherOption[]',
        'type_bog_options' => '\Swagger\Client\Model\TypeBOGOption[]',
        'type_of_business_law_options' => '\Swagger\Client\Model\TypeOfBusinessLawOption[]',
        'type_of_floor_options' => '\Swagger\Client\Model\TypeOfFloorOption[]',
        'type_of_habitation_options' => '\Swagger\Client\Model\TypeOfHabitationOption[]',
        'type_of_window_frame_options' => '\Swagger\Client\Model\TypeOfWindowFrameOption[]',
        'type_part_options' => '\Swagger\Client\Model\TypePARTOption[]',
        'type_part_other_options' => '\Swagger\Client\Model\TypePARTOtherOption[]',
        'types_of_communal_area' => '\Swagger\Client\Model\TypeOfCommunalAreaOption[]',
        'unit_of_measurement_options' => '\Swagger\Client\Model\UnitOfMeasurementOption[]',
        'unit_of_volume_options' => '\Swagger\Client\Model\UnitOfVolumeOption[]',
        'unit_size_options' => '\Swagger\Client\Model\UnitSizeOption[]',
        'vat_conditions' => '\Swagger\Client\Model\VatConditionOption[]',
        'vendor_type_options' => '\Swagger\Client\Model\VendorTypeOption[]',
        'waiting_time_options' => '\Swagger\Client\Model\WaitingTimeOption[]',
        'website_provider_options' => '\Swagger\Client\Model\WebsiteProviderOption[]',
        'welfare_state_options' => '\Swagger\Client\Model\WelfareStateOption[]',
        'withdraw_reason_options' => '\Swagger\Client\Model\WithdrawReasonOption[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acceptances' => null,
        'acquisition_status_options' => null,
        'address_type_options' => null,
        'agenda_item_category_types' => null,
        'agenda_item_reminder_merge_field_options' => null,
        'agenda_standard_duration_options' => null,
        'age_range_options' => null,
        'agricultural_subtype_others' => null,
        'air_treatment_options' => null,
        'alv_agricultural_function_options' => null,
        'alv_building_plot_destination_options' => null,
        'alv_continuation_options' => null,
        'alv_non_agricultural_function_options' => null,
        'amenities_options' => null,
        'apartment_characteristics' => null,
        'apartment_sorts' => null,
        'applicant_type_options' => null,
        'appraisal_certifications' => null,
        'assignment_phases' => null,
        'assignment_types' => null,
        'attic_options' => null,
        'availability_statuses' => null,
        'balcony_types' => null,
        'bathroom_facilities' => null,
        'beverage_hospitality_sector_types' => null,
        'bid_status_options' => null,
        'bid_type_options' => null,
        'bog_combination_object_situation_options' => null,
        'bog_combination_object_status_options' => null,
        'bog_combination_object_type_options' => null,
        'building_type_options' => null,
        'buyer_type_options' => null,
        'cadastral_lot_size_options' => null,
        'cattle_farming_subtypes' => null,
        'certification_options' => null,
        'child_age_range_options' => null,
        'civil_states' => null,
        'comfort_quality_options' => null,
        'commission_paid_by_options' => null,
        'commission_type_options' => null,
        'condition_options' => null,
        'condition_type_options' => null,
        'construction_option_options' => null,
        'construction_periods' => null,
        'contact_link_types' => null,
        'contact_person_title_suggestions' => null,
        'countries' => null,
        'default_folder_tree_category_options' => null,
        'document_template_type_options' => null,
        'drainage_options' => null,
        'email_address_types' => null,
        'energy_class_options' => null,
        'energy_source_options' => null,
        'exclusive_status_options' => null,
        'facility_options' => null,
        'family_income_options' => null,
        'fastfood_hospitality_sector_types' => null,
        'fixed_variable_options' => null,
        'floor_type_options' => null,
        'furnishing_options' => null,
        'garage_type_options' => null,
        'garden_quality_options' => null,
        'garden_type_options' => null,
        'gender' => null,
        'ground_lease_period_options' => null,
        'ground_ownership_type_options' => null,
        'ground_usage_options' => null,
        'heating_method_options' => null,
        'heating_water_method_options' => null,
        'horeca_sector_type_options' => null,
        'horse_company_subtypes' => null,
        'horse_trough_location_options' => null,
        'horticultural_company_types' => null,
        'hotel_hospitality_sector_types' => null,
        'house_characteristics' => null,
        'household_composition_options' => null,
        'house_sorts' => null,
        'house_types' => null,
        'identification_types' => null,
        'industrial_building_facility_options' => null,
        'investment_type_options' => null,
        'invoice_due_terms' => null,
        'invoice_statuses' => null,
        'invoice_types' => null,
        'isolation_type_options' => null,
        'kitchen_facility_options' => null,
        'kitchen_types' => null,
        'land_property_sub_type_options' => null,
        'languages' => null,
        'leasehold_owner_type_options' => null,
        'lease_term_unit_options' => null,
        'legal_status_options' => null,
        'leisure_facility_type_options' => null,
        'leisure_type_options' => null,
        'listing_types' => null,
        'living_room_types' => null,
        'location_places' => null,
        'match_mail_period_options' => null,
        'match_mail_trigger_options' => null,
        'measurment_options' => null,
        'media_contract_status_options' => null,
        'media_partner_categories' => null,
        'mixed_forms' => null,
        'moving_reason_options' => null,
        'nature_registration_options' => null,
        'notification_date_format_options' => null,
        'offer_type_options' => null,
        'open_house_recurrency_options' => null,
        'orientations' => null,
        'ownership_options' => null,
        'ownership_type_options' => null,
        'parking_facility_options' => null,
        'parking_type_options' => null,
        'pavement_type_options' => null,
        'peculiarity_options' => null,
        'phone_number_types' => null,
        'pig_company_types' => null,
        'point_of_interest_options' => null,
        'polution_type_options' => null,
        'poultry_farming_subtypes' => null,
        'poultry_housing_type_options' => null,
        'price_codes' => null,
        'price_history_events' => null,
        'priorities' => null,
        'publication_statuses' => null,
        'real_estate_associations' => null,
        'real_estate_groups' => null,
        'register_reason_options' => null,
        'relation_roles' => null,
        'relation_types' => null,
        'reminder_minutes_options' => null,
        'reminder_notification_settings_type_option_list' => null,
        'rent_conditions' => null,
        'rent_specifications' => null,
        'residential_building_type_options' => null,
        'residential_facility_options' => null,
        'residential_subtype_others' => null,
        'restaurant_hospitality_sector_types' => null,
        'roof_material_options' => null,
        'roof_type_options' => null,
        'sale_conditions' => null,
        'search_assignment_facility_options' => null,
        'search_assignment_peculiarity_options' => null,
        'situated_type_options' => null,
        'social_media_type_options' => null,
        'social_property_facility_type_options' => null,
        'social_property_type_options' => null,
        'soil_type_options' => null,
        'space_types' => null,
        'storage_room_type_options' => null,
        'stoves' => null,
        'take_over_specification_options' => null,
        'task_categories' => null,
        'task_follow_ups' => null,
        'task_statuses' => null,
        'template_definition_category_options' => null,
        'timeline_action_sub_options' => null,
        'timeline_action_types' => null,
        'type_alv_options' => null,
        'type_alv_other_options' => null,
        'type_bog_options' => null,
        'type_of_business_law_options' => null,
        'type_of_floor_options' => null,
        'type_of_habitation_options' => null,
        'type_of_window_frame_options' => null,
        'type_part_options' => null,
        'type_part_other_options' => null,
        'types_of_communal_area' => null,
        'unit_of_measurement_options' => null,
        'unit_of_volume_options' => null,
        'unit_size_options' => null,
        'vat_conditions' => null,
        'vendor_type_options' => null,
        'waiting_time_options' => null,
        'website_provider_options' => null,
        'welfare_state_options' => null,
        'withdraw_reason_options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acceptances' => 'acceptances',
        'acquisition_status_options' => 'acquisitionStatusOptions',
        'address_type_options' => 'addressTypeOptions',
        'agenda_item_category_types' => 'agendaItemCategoryTypes',
        'agenda_item_reminder_merge_field_options' => 'agendaItemReminderMergeFieldOptions',
        'agenda_standard_duration_options' => 'agendaStandardDurationOptions',
        'age_range_options' => 'ageRangeOptions',
        'agricultural_subtype_others' => 'agriculturalSubtypeOthers',
        'air_treatment_options' => 'airTreatmentOptions',
        'alv_agricultural_function_options' => 'alvAgriculturalFunctionOptions',
        'alv_building_plot_destination_options' => 'alvBuildingPlotDestinationOptions',
        'alv_continuation_options' => 'alvContinuationOptions',
        'alv_non_agricultural_function_options' => 'alvNonAgriculturalFunctionOptions',
        'amenities_options' => 'amenitiesOptions',
        'apartment_characteristics' => 'apartmentCharacteristics',
        'apartment_sorts' => 'apartmentSorts',
        'applicant_type_options' => 'applicantTypeOptions',
        'appraisal_certifications' => 'appraisalCertifications',
        'assignment_phases' => 'assignmentPhases',
        'assignment_types' => 'assignmentTypes',
        'attic_options' => 'atticOptions',
        'availability_statuses' => 'availabilityStatuses',
        'balcony_types' => 'balconyTypes',
        'bathroom_facilities' => 'bathroomFacilities',
        'beverage_hospitality_sector_types' => 'beverageHospitalitySectorTypes',
        'bid_status_options' => 'bidStatusOptions',
        'bid_type_options' => 'bidTypeOptions',
        'bog_combination_object_situation_options' => 'bogCombinationObjectSituationOptions',
        'bog_combination_object_status_options' => 'bogCombinationObjectStatusOptions',
        'bog_combination_object_type_options' => 'bogCombinationObjectTypeOptions',
        'building_type_options' => 'buildingTypeOptions',
        'buyer_type_options' => 'buyerTypeOptions',
        'cadastral_lot_size_options' => 'cadastralLotSizeOptions',
        'cattle_farming_subtypes' => 'cattleFarmingSubtypes',
        'certification_options' => 'certificationOptions',
        'child_age_range_options' => 'childAgeRangeOptions',
        'civil_states' => 'civilStates',
        'comfort_quality_options' => 'comfortQualityOptions',
        'commission_paid_by_options' => 'commissionPaidByOptions',
        'commission_type_options' => 'commissionTypeOptions',
        'condition_options' => 'conditionOptions',
        'condition_type_options' => 'conditionTypeOptions',
        'construction_option_options' => 'constructionOptionOptions',
        'construction_periods' => 'constructionPeriods',
        'contact_link_types' => 'contactLinkTypes',
        'contact_person_title_suggestions' => 'contactPersonTitleSuggestions',
        'countries' => 'countries',
        'default_folder_tree_category_options' => 'defaultFolderTreeCategoryOptions',
        'document_template_type_options' => 'documentTemplateTypeOptions',
        'drainage_options' => 'drainageOptions',
        'email_address_types' => 'emailAddressTypes',
        'energy_class_options' => 'energyClassOptions',
        'energy_source_options' => 'energySourceOptions',
        'exclusive_status_options' => 'exclusiveStatusOptions',
        'facility_options' => 'facilityOptions',
        'family_income_options' => 'familyIncomeOptions',
        'fastfood_hospitality_sector_types' => 'fastfoodHospitalitySectorTypes',
        'fixed_variable_options' => 'fixedVariableOptions',
        'floor_type_options' => 'floorTypeOptions',
        'furnishing_options' => 'furnishingOptions',
        'garage_type_options' => 'garageTypeOptions',
        'garden_quality_options' => 'gardenQualityOptions',
        'garden_type_options' => 'gardenTypeOptions',
        'gender' => 'gender',
        'ground_lease_period_options' => 'groundLeasePeriodOptions',
        'ground_ownership_type_options' => 'groundOwnershipTypeOptions',
        'ground_usage_options' => 'groundUsageOptions',
        'heating_method_options' => 'heatingMethodOptions',
        'heating_water_method_options' => 'heatingWaterMethodOptions',
        'horeca_sector_type_options' => 'horecaSectorTypeOptions',
        'horse_company_subtypes' => 'horseCompanySubtypes',
        'horse_trough_location_options' => 'horseTroughLocationOptions',
        'horticultural_company_types' => 'horticulturalCompanyTypes',
        'hotel_hospitality_sector_types' => 'hotelHospitalitySectorTypes',
        'house_characteristics' => 'houseCharacteristics',
        'household_composition_options' => 'householdCompositionOptions',
        'house_sorts' => 'houseSorts',
        'house_types' => 'houseTypes',
        'identification_types' => 'identificationTypes',
        'industrial_building_facility_options' => 'industrialBuildingFacilityOptions',
        'investment_type_options' => 'investmentTypeOptions',
        'invoice_due_terms' => 'invoiceDueTerms',
        'invoice_statuses' => 'invoiceStatuses',
        'invoice_types' => 'invoiceTypes',
        'isolation_type_options' => 'isolationTypeOptions',
        'kitchen_facility_options' => 'kitchenFacilityOptions',
        'kitchen_types' => 'kitchenTypes',
        'land_property_sub_type_options' => 'landPropertySubTypeOptions',
        'languages' => 'languages',
        'leasehold_owner_type_options' => 'leaseholdOwnerTypeOptions',
        'lease_term_unit_options' => 'leaseTermUnitOptions',
        'legal_status_options' => 'legalStatusOptions',
        'leisure_facility_type_options' => 'leisureFacilityTypeOptions',
        'leisure_type_options' => 'leisureTypeOptions',
        'listing_types' => 'listingTypes',
        'living_room_types' => 'livingRoomTypes',
        'location_places' => 'locationPlaces',
        'match_mail_period_options' => 'matchMailPeriodOptions',
        'match_mail_trigger_options' => 'matchMailTriggerOptions',
        'measurment_options' => 'measurmentOptions',
        'media_contract_status_options' => 'mediaContractStatusOptions',
        'media_partner_categories' => 'mediaPartnerCategories',
        'mixed_forms' => 'mixedForms',
        'moving_reason_options' => 'movingReasonOptions',
        'nature_registration_options' => 'natureRegistrationOptions',
        'notification_date_format_options' => 'notificationDateFormatOptions',
        'offer_type_options' => 'offerTypeOptions',
        'open_house_recurrency_options' => 'openHouseRecurrencyOptions',
        'orientations' => 'orientations',
        'ownership_options' => 'ownershipOptions',
        'ownership_type_options' => 'ownershipTypeOptions',
        'parking_facility_options' => 'parkingFacilityOptions',
        'parking_type_options' => 'parkingTypeOptions',
        'pavement_type_options' => 'pavementTypeOptions',
        'peculiarity_options' => 'peculiarityOptions',
        'phone_number_types' => 'phoneNumberTypes',
        'pig_company_types' => 'pigCompanyTypes',
        'point_of_interest_options' => 'pointOfInterestOptions',
        'polution_type_options' => 'polutionTypeOptions',
        'poultry_farming_subtypes' => 'poultryFarmingSubtypes',
        'poultry_housing_type_options' => 'poultryHousingTypeOptions',
        'price_codes' => 'priceCodes',
        'price_history_events' => 'priceHistoryEvents',
        'priorities' => 'priorities',
        'publication_statuses' => 'publicationStatuses',
        'real_estate_associations' => 'realEstateAssociations',
        'real_estate_groups' => 'realEstateGroups',
        'register_reason_options' => 'registerReasonOptions',
        'relation_roles' => 'relationRoles',
        'relation_types' => 'relationTypes',
        'reminder_minutes_options' => 'reminderMinutesOptions',
        'reminder_notification_settings_type_option_list' => 'reminderNotificationSettingsTypeOptionList',
        'rent_conditions' => 'rentConditions',
        'rent_specifications' => 'rentSpecifications',
        'residential_building_type_options' => 'residentialBuildingTypeOptions',
        'residential_facility_options' => 'residentialFacilityOptions',
        'residential_subtype_others' => 'residentialSubtypeOthers',
        'restaurant_hospitality_sector_types' => 'restaurantHospitalitySectorTypes',
        'roof_material_options' => 'roofMaterialOptions',
        'roof_type_options' => 'roofTypeOptions',
        'sale_conditions' => 'saleConditions',
        'search_assignment_facility_options' => 'searchAssignmentFacilityOptions',
        'search_assignment_peculiarity_options' => 'searchAssignmentPeculiarityOptions',
        'situated_type_options' => 'situatedTypeOptions',
        'social_media_type_options' => 'socialMediaTypeOptions',
        'social_property_facility_type_options' => 'socialPropertyFacilityTypeOptions',
        'social_property_type_options' => 'socialPropertyTypeOptions',
        'soil_type_options' => 'soilTypeOptions',
        'space_types' => 'spaceTypes',
        'storage_room_type_options' => 'storageRoomTypeOptions',
        'stoves' => 'stoves',
        'take_over_specification_options' => 'takeOverSpecificationOptions',
        'task_categories' => 'taskCategories',
        'task_follow_ups' => 'taskFollowUps',
        'task_statuses' => 'taskStatuses',
        'template_definition_category_options' => 'templateDefinitionCategoryOptions',
        'timeline_action_sub_options' => 'timelineActionSubOptions',
        'timeline_action_types' => 'timelineActionTypes',
        'type_alv_options' => 'typeALVOptions',
        'type_alv_other_options' => 'typeALVOtherOptions',
        'type_bog_options' => 'typeBOGOptions',
        'type_of_business_law_options' => 'typeOfBusinessLawOptions',
        'type_of_floor_options' => 'typeOfFloorOptions',
        'type_of_habitation_options' => 'typeOfHabitationOptions',
        'type_of_window_frame_options' => 'typeOfWindowFrameOptions',
        'type_part_options' => 'typePARTOptions',
        'type_part_other_options' => 'typePARTOtherOptions',
        'types_of_communal_area' => 'typesOfCommunalArea',
        'unit_of_measurement_options' => 'unitOfMeasurementOptions',
        'unit_of_volume_options' => 'unitOfVolumeOptions',
        'unit_size_options' => 'unitSizeOptions',
        'vat_conditions' => 'vatConditions',
        'vendor_type_options' => 'vendorTypeOptions',
        'waiting_time_options' => 'waitingTimeOptions',
        'website_provider_options' => 'websiteProviderOptions',
        'welfare_state_options' => 'welfareStateOptions',
        'withdraw_reason_options' => 'withdrawReasonOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acceptances' => 'setAcceptances',
        'acquisition_status_options' => 'setAcquisitionStatusOptions',
        'address_type_options' => 'setAddressTypeOptions',
        'agenda_item_category_types' => 'setAgendaItemCategoryTypes',
        'agenda_item_reminder_merge_field_options' => 'setAgendaItemReminderMergeFieldOptions',
        'agenda_standard_duration_options' => 'setAgendaStandardDurationOptions',
        'age_range_options' => 'setAgeRangeOptions',
        'agricultural_subtype_others' => 'setAgriculturalSubtypeOthers',
        'air_treatment_options' => 'setAirTreatmentOptions',
        'alv_agricultural_function_options' => 'setAlvAgriculturalFunctionOptions',
        'alv_building_plot_destination_options' => 'setAlvBuildingPlotDestinationOptions',
        'alv_continuation_options' => 'setAlvContinuationOptions',
        'alv_non_agricultural_function_options' => 'setAlvNonAgriculturalFunctionOptions',
        'amenities_options' => 'setAmenitiesOptions',
        'apartment_characteristics' => 'setApartmentCharacteristics',
        'apartment_sorts' => 'setApartmentSorts',
        'applicant_type_options' => 'setApplicantTypeOptions',
        'appraisal_certifications' => 'setAppraisalCertifications',
        'assignment_phases' => 'setAssignmentPhases',
        'assignment_types' => 'setAssignmentTypes',
        'attic_options' => 'setAtticOptions',
        'availability_statuses' => 'setAvailabilityStatuses',
        'balcony_types' => 'setBalconyTypes',
        'bathroom_facilities' => 'setBathroomFacilities',
        'beverage_hospitality_sector_types' => 'setBeverageHospitalitySectorTypes',
        'bid_status_options' => 'setBidStatusOptions',
        'bid_type_options' => 'setBidTypeOptions',
        'bog_combination_object_situation_options' => 'setBogCombinationObjectSituationOptions',
        'bog_combination_object_status_options' => 'setBogCombinationObjectStatusOptions',
        'bog_combination_object_type_options' => 'setBogCombinationObjectTypeOptions',
        'building_type_options' => 'setBuildingTypeOptions',
        'buyer_type_options' => 'setBuyerTypeOptions',
        'cadastral_lot_size_options' => 'setCadastralLotSizeOptions',
        'cattle_farming_subtypes' => 'setCattleFarmingSubtypes',
        'certification_options' => 'setCertificationOptions',
        'child_age_range_options' => 'setChildAgeRangeOptions',
        'civil_states' => 'setCivilStates',
        'comfort_quality_options' => 'setComfortQualityOptions',
        'commission_paid_by_options' => 'setCommissionPaidByOptions',
        'commission_type_options' => 'setCommissionTypeOptions',
        'condition_options' => 'setConditionOptions',
        'condition_type_options' => 'setConditionTypeOptions',
        'construction_option_options' => 'setConstructionOptionOptions',
        'construction_periods' => 'setConstructionPeriods',
        'contact_link_types' => 'setContactLinkTypes',
        'contact_person_title_suggestions' => 'setContactPersonTitleSuggestions',
        'countries' => 'setCountries',
        'default_folder_tree_category_options' => 'setDefaultFolderTreeCategoryOptions',
        'document_template_type_options' => 'setDocumentTemplateTypeOptions',
        'drainage_options' => 'setDrainageOptions',
        'email_address_types' => 'setEmailAddressTypes',
        'energy_class_options' => 'setEnergyClassOptions',
        'energy_source_options' => 'setEnergySourceOptions',
        'exclusive_status_options' => 'setExclusiveStatusOptions',
        'facility_options' => 'setFacilityOptions',
        'family_income_options' => 'setFamilyIncomeOptions',
        'fastfood_hospitality_sector_types' => 'setFastfoodHospitalitySectorTypes',
        'fixed_variable_options' => 'setFixedVariableOptions',
        'floor_type_options' => 'setFloorTypeOptions',
        'furnishing_options' => 'setFurnishingOptions',
        'garage_type_options' => 'setGarageTypeOptions',
        'garden_quality_options' => 'setGardenQualityOptions',
        'garden_type_options' => 'setGardenTypeOptions',
        'gender' => 'setGender',
        'ground_lease_period_options' => 'setGroundLeasePeriodOptions',
        'ground_ownership_type_options' => 'setGroundOwnershipTypeOptions',
        'ground_usage_options' => 'setGroundUsageOptions',
        'heating_method_options' => 'setHeatingMethodOptions',
        'heating_water_method_options' => 'setHeatingWaterMethodOptions',
        'horeca_sector_type_options' => 'setHorecaSectorTypeOptions',
        'horse_company_subtypes' => 'setHorseCompanySubtypes',
        'horse_trough_location_options' => 'setHorseTroughLocationOptions',
        'horticultural_company_types' => 'setHorticulturalCompanyTypes',
        'hotel_hospitality_sector_types' => 'setHotelHospitalitySectorTypes',
        'house_characteristics' => 'setHouseCharacteristics',
        'household_composition_options' => 'setHouseholdCompositionOptions',
        'house_sorts' => 'setHouseSorts',
        'house_types' => 'setHouseTypes',
        'identification_types' => 'setIdentificationTypes',
        'industrial_building_facility_options' => 'setIndustrialBuildingFacilityOptions',
        'investment_type_options' => 'setInvestmentTypeOptions',
        'invoice_due_terms' => 'setInvoiceDueTerms',
        'invoice_statuses' => 'setInvoiceStatuses',
        'invoice_types' => 'setInvoiceTypes',
        'isolation_type_options' => 'setIsolationTypeOptions',
        'kitchen_facility_options' => 'setKitchenFacilityOptions',
        'kitchen_types' => 'setKitchenTypes',
        'land_property_sub_type_options' => 'setLandPropertySubTypeOptions',
        'languages' => 'setLanguages',
        'leasehold_owner_type_options' => 'setLeaseholdOwnerTypeOptions',
        'lease_term_unit_options' => 'setLeaseTermUnitOptions',
        'legal_status_options' => 'setLegalStatusOptions',
        'leisure_facility_type_options' => 'setLeisureFacilityTypeOptions',
        'leisure_type_options' => 'setLeisureTypeOptions',
        'listing_types' => 'setListingTypes',
        'living_room_types' => 'setLivingRoomTypes',
        'location_places' => 'setLocationPlaces',
        'match_mail_period_options' => 'setMatchMailPeriodOptions',
        'match_mail_trigger_options' => 'setMatchMailTriggerOptions',
        'measurment_options' => 'setMeasurmentOptions',
        'media_contract_status_options' => 'setMediaContractStatusOptions',
        'media_partner_categories' => 'setMediaPartnerCategories',
        'mixed_forms' => 'setMixedForms',
        'moving_reason_options' => 'setMovingReasonOptions',
        'nature_registration_options' => 'setNatureRegistrationOptions',
        'notification_date_format_options' => 'setNotificationDateFormatOptions',
        'offer_type_options' => 'setOfferTypeOptions',
        'open_house_recurrency_options' => 'setOpenHouseRecurrencyOptions',
        'orientations' => 'setOrientations',
        'ownership_options' => 'setOwnershipOptions',
        'ownership_type_options' => 'setOwnershipTypeOptions',
        'parking_facility_options' => 'setParkingFacilityOptions',
        'parking_type_options' => 'setParkingTypeOptions',
        'pavement_type_options' => 'setPavementTypeOptions',
        'peculiarity_options' => 'setPeculiarityOptions',
        'phone_number_types' => 'setPhoneNumberTypes',
        'pig_company_types' => 'setPigCompanyTypes',
        'point_of_interest_options' => 'setPointOfInterestOptions',
        'polution_type_options' => 'setPolutionTypeOptions',
        'poultry_farming_subtypes' => 'setPoultryFarmingSubtypes',
        'poultry_housing_type_options' => 'setPoultryHousingTypeOptions',
        'price_codes' => 'setPriceCodes',
        'price_history_events' => 'setPriceHistoryEvents',
        'priorities' => 'setPriorities',
        'publication_statuses' => 'setPublicationStatuses',
        'real_estate_associations' => 'setRealEstateAssociations',
        'real_estate_groups' => 'setRealEstateGroups',
        'register_reason_options' => 'setRegisterReasonOptions',
        'relation_roles' => 'setRelationRoles',
        'relation_types' => 'setRelationTypes',
        'reminder_minutes_options' => 'setReminderMinutesOptions',
        'reminder_notification_settings_type_option_list' => 'setReminderNotificationSettingsTypeOptionList',
        'rent_conditions' => 'setRentConditions',
        'rent_specifications' => 'setRentSpecifications',
        'residential_building_type_options' => 'setResidentialBuildingTypeOptions',
        'residential_facility_options' => 'setResidentialFacilityOptions',
        'residential_subtype_others' => 'setResidentialSubtypeOthers',
        'restaurant_hospitality_sector_types' => 'setRestaurantHospitalitySectorTypes',
        'roof_material_options' => 'setRoofMaterialOptions',
        'roof_type_options' => 'setRoofTypeOptions',
        'sale_conditions' => 'setSaleConditions',
        'search_assignment_facility_options' => 'setSearchAssignmentFacilityOptions',
        'search_assignment_peculiarity_options' => 'setSearchAssignmentPeculiarityOptions',
        'situated_type_options' => 'setSituatedTypeOptions',
        'social_media_type_options' => 'setSocialMediaTypeOptions',
        'social_property_facility_type_options' => 'setSocialPropertyFacilityTypeOptions',
        'social_property_type_options' => 'setSocialPropertyTypeOptions',
        'soil_type_options' => 'setSoilTypeOptions',
        'space_types' => 'setSpaceTypes',
        'storage_room_type_options' => 'setStorageRoomTypeOptions',
        'stoves' => 'setStoves',
        'take_over_specification_options' => 'setTakeOverSpecificationOptions',
        'task_categories' => 'setTaskCategories',
        'task_follow_ups' => 'setTaskFollowUps',
        'task_statuses' => 'setTaskStatuses',
        'template_definition_category_options' => 'setTemplateDefinitionCategoryOptions',
        'timeline_action_sub_options' => 'setTimelineActionSubOptions',
        'timeline_action_types' => 'setTimelineActionTypes',
        'type_alv_options' => 'setTypeAlvOptions',
        'type_alv_other_options' => 'setTypeAlvOtherOptions',
        'type_bog_options' => 'setTypeBogOptions',
        'type_of_business_law_options' => 'setTypeOfBusinessLawOptions',
        'type_of_floor_options' => 'setTypeOfFloorOptions',
        'type_of_habitation_options' => 'setTypeOfHabitationOptions',
        'type_of_window_frame_options' => 'setTypeOfWindowFrameOptions',
        'type_part_options' => 'setTypePartOptions',
        'type_part_other_options' => 'setTypePartOtherOptions',
        'types_of_communal_area' => 'setTypesOfCommunalArea',
        'unit_of_measurement_options' => 'setUnitOfMeasurementOptions',
        'unit_of_volume_options' => 'setUnitOfVolumeOptions',
        'unit_size_options' => 'setUnitSizeOptions',
        'vat_conditions' => 'setVatConditions',
        'vendor_type_options' => 'setVendorTypeOptions',
        'waiting_time_options' => 'setWaitingTimeOptions',
        'website_provider_options' => 'setWebsiteProviderOptions',
        'welfare_state_options' => 'setWelfareStateOptions',
        'withdraw_reason_options' => 'setWithdrawReasonOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acceptances' => 'getAcceptances',
        'acquisition_status_options' => 'getAcquisitionStatusOptions',
        'address_type_options' => 'getAddressTypeOptions',
        'agenda_item_category_types' => 'getAgendaItemCategoryTypes',
        'agenda_item_reminder_merge_field_options' => 'getAgendaItemReminderMergeFieldOptions',
        'agenda_standard_duration_options' => 'getAgendaStandardDurationOptions',
        'age_range_options' => 'getAgeRangeOptions',
        'agricultural_subtype_others' => 'getAgriculturalSubtypeOthers',
        'air_treatment_options' => 'getAirTreatmentOptions',
        'alv_agricultural_function_options' => 'getAlvAgriculturalFunctionOptions',
        'alv_building_plot_destination_options' => 'getAlvBuildingPlotDestinationOptions',
        'alv_continuation_options' => 'getAlvContinuationOptions',
        'alv_non_agricultural_function_options' => 'getAlvNonAgriculturalFunctionOptions',
        'amenities_options' => 'getAmenitiesOptions',
        'apartment_characteristics' => 'getApartmentCharacteristics',
        'apartment_sorts' => 'getApartmentSorts',
        'applicant_type_options' => 'getApplicantTypeOptions',
        'appraisal_certifications' => 'getAppraisalCertifications',
        'assignment_phases' => 'getAssignmentPhases',
        'assignment_types' => 'getAssignmentTypes',
        'attic_options' => 'getAtticOptions',
        'availability_statuses' => 'getAvailabilityStatuses',
        'balcony_types' => 'getBalconyTypes',
        'bathroom_facilities' => 'getBathroomFacilities',
        'beverage_hospitality_sector_types' => 'getBeverageHospitalitySectorTypes',
        'bid_status_options' => 'getBidStatusOptions',
        'bid_type_options' => 'getBidTypeOptions',
        'bog_combination_object_situation_options' => 'getBogCombinationObjectSituationOptions',
        'bog_combination_object_status_options' => 'getBogCombinationObjectStatusOptions',
        'bog_combination_object_type_options' => 'getBogCombinationObjectTypeOptions',
        'building_type_options' => 'getBuildingTypeOptions',
        'buyer_type_options' => 'getBuyerTypeOptions',
        'cadastral_lot_size_options' => 'getCadastralLotSizeOptions',
        'cattle_farming_subtypes' => 'getCattleFarmingSubtypes',
        'certification_options' => 'getCertificationOptions',
        'child_age_range_options' => 'getChildAgeRangeOptions',
        'civil_states' => 'getCivilStates',
        'comfort_quality_options' => 'getComfortQualityOptions',
        'commission_paid_by_options' => 'getCommissionPaidByOptions',
        'commission_type_options' => 'getCommissionTypeOptions',
        'condition_options' => 'getConditionOptions',
        'condition_type_options' => 'getConditionTypeOptions',
        'construction_option_options' => 'getConstructionOptionOptions',
        'construction_periods' => 'getConstructionPeriods',
        'contact_link_types' => 'getContactLinkTypes',
        'contact_person_title_suggestions' => 'getContactPersonTitleSuggestions',
        'countries' => 'getCountries',
        'default_folder_tree_category_options' => 'getDefaultFolderTreeCategoryOptions',
        'document_template_type_options' => 'getDocumentTemplateTypeOptions',
        'drainage_options' => 'getDrainageOptions',
        'email_address_types' => 'getEmailAddressTypes',
        'energy_class_options' => 'getEnergyClassOptions',
        'energy_source_options' => 'getEnergySourceOptions',
        'exclusive_status_options' => 'getExclusiveStatusOptions',
        'facility_options' => 'getFacilityOptions',
        'family_income_options' => 'getFamilyIncomeOptions',
        'fastfood_hospitality_sector_types' => 'getFastfoodHospitalitySectorTypes',
        'fixed_variable_options' => 'getFixedVariableOptions',
        'floor_type_options' => 'getFloorTypeOptions',
        'furnishing_options' => 'getFurnishingOptions',
        'garage_type_options' => 'getGarageTypeOptions',
        'garden_quality_options' => 'getGardenQualityOptions',
        'garden_type_options' => 'getGardenTypeOptions',
        'gender' => 'getGender',
        'ground_lease_period_options' => 'getGroundLeasePeriodOptions',
        'ground_ownership_type_options' => 'getGroundOwnershipTypeOptions',
        'ground_usage_options' => 'getGroundUsageOptions',
        'heating_method_options' => 'getHeatingMethodOptions',
        'heating_water_method_options' => 'getHeatingWaterMethodOptions',
        'horeca_sector_type_options' => 'getHorecaSectorTypeOptions',
        'horse_company_subtypes' => 'getHorseCompanySubtypes',
        'horse_trough_location_options' => 'getHorseTroughLocationOptions',
        'horticultural_company_types' => 'getHorticulturalCompanyTypes',
        'hotel_hospitality_sector_types' => 'getHotelHospitalitySectorTypes',
        'house_characteristics' => 'getHouseCharacteristics',
        'household_composition_options' => 'getHouseholdCompositionOptions',
        'house_sorts' => 'getHouseSorts',
        'house_types' => 'getHouseTypes',
        'identification_types' => 'getIdentificationTypes',
        'industrial_building_facility_options' => 'getIndustrialBuildingFacilityOptions',
        'investment_type_options' => 'getInvestmentTypeOptions',
        'invoice_due_terms' => 'getInvoiceDueTerms',
        'invoice_statuses' => 'getInvoiceStatuses',
        'invoice_types' => 'getInvoiceTypes',
        'isolation_type_options' => 'getIsolationTypeOptions',
        'kitchen_facility_options' => 'getKitchenFacilityOptions',
        'kitchen_types' => 'getKitchenTypes',
        'land_property_sub_type_options' => 'getLandPropertySubTypeOptions',
        'languages' => 'getLanguages',
        'leasehold_owner_type_options' => 'getLeaseholdOwnerTypeOptions',
        'lease_term_unit_options' => 'getLeaseTermUnitOptions',
        'legal_status_options' => 'getLegalStatusOptions',
        'leisure_facility_type_options' => 'getLeisureFacilityTypeOptions',
        'leisure_type_options' => 'getLeisureTypeOptions',
        'listing_types' => 'getListingTypes',
        'living_room_types' => 'getLivingRoomTypes',
        'location_places' => 'getLocationPlaces',
        'match_mail_period_options' => 'getMatchMailPeriodOptions',
        'match_mail_trigger_options' => 'getMatchMailTriggerOptions',
        'measurment_options' => 'getMeasurmentOptions',
        'media_contract_status_options' => 'getMediaContractStatusOptions',
        'media_partner_categories' => 'getMediaPartnerCategories',
        'mixed_forms' => 'getMixedForms',
        'moving_reason_options' => 'getMovingReasonOptions',
        'nature_registration_options' => 'getNatureRegistrationOptions',
        'notification_date_format_options' => 'getNotificationDateFormatOptions',
        'offer_type_options' => 'getOfferTypeOptions',
        'open_house_recurrency_options' => 'getOpenHouseRecurrencyOptions',
        'orientations' => 'getOrientations',
        'ownership_options' => 'getOwnershipOptions',
        'ownership_type_options' => 'getOwnershipTypeOptions',
        'parking_facility_options' => 'getParkingFacilityOptions',
        'parking_type_options' => 'getParkingTypeOptions',
        'pavement_type_options' => 'getPavementTypeOptions',
        'peculiarity_options' => 'getPeculiarityOptions',
        'phone_number_types' => 'getPhoneNumberTypes',
        'pig_company_types' => 'getPigCompanyTypes',
        'point_of_interest_options' => 'getPointOfInterestOptions',
        'polution_type_options' => 'getPolutionTypeOptions',
        'poultry_farming_subtypes' => 'getPoultryFarmingSubtypes',
        'poultry_housing_type_options' => 'getPoultryHousingTypeOptions',
        'price_codes' => 'getPriceCodes',
        'price_history_events' => 'getPriceHistoryEvents',
        'priorities' => 'getPriorities',
        'publication_statuses' => 'getPublicationStatuses',
        'real_estate_associations' => 'getRealEstateAssociations',
        'real_estate_groups' => 'getRealEstateGroups',
        'register_reason_options' => 'getRegisterReasonOptions',
        'relation_roles' => 'getRelationRoles',
        'relation_types' => 'getRelationTypes',
        'reminder_minutes_options' => 'getReminderMinutesOptions',
        'reminder_notification_settings_type_option_list' => 'getReminderNotificationSettingsTypeOptionList',
        'rent_conditions' => 'getRentConditions',
        'rent_specifications' => 'getRentSpecifications',
        'residential_building_type_options' => 'getResidentialBuildingTypeOptions',
        'residential_facility_options' => 'getResidentialFacilityOptions',
        'residential_subtype_others' => 'getResidentialSubtypeOthers',
        'restaurant_hospitality_sector_types' => 'getRestaurantHospitalitySectorTypes',
        'roof_material_options' => 'getRoofMaterialOptions',
        'roof_type_options' => 'getRoofTypeOptions',
        'sale_conditions' => 'getSaleConditions',
        'search_assignment_facility_options' => 'getSearchAssignmentFacilityOptions',
        'search_assignment_peculiarity_options' => 'getSearchAssignmentPeculiarityOptions',
        'situated_type_options' => 'getSituatedTypeOptions',
        'social_media_type_options' => 'getSocialMediaTypeOptions',
        'social_property_facility_type_options' => 'getSocialPropertyFacilityTypeOptions',
        'social_property_type_options' => 'getSocialPropertyTypeOptions',
        'soil_type_options' => 'getSoilTypeOptions',
        'space_types' => 'getSpaceTypes',
        'storage_room_type_options' => 'getStorageRoomTypeOptions',
        'stoves' => 'getStoves',
        'take_over_specification_options' => 'getTakeOverSpecificationOptions',
        'task_categories' => 'getTaskCategories',
        'task_follow_ups' => 'getTaskFollowUps',
        'task_statuses' => 'getTaskStatuses',
        'template_definition_category_options' => 'getTemplateDefinitionCategoryOptions',
        'timeline_action_sub_options' => 'getTimelineActionSubOptions',
        'timeline_action_types' => 'getTimelineActionTypes',
        'type_alv_options' => 'getTypeAlvOptions',
        'type_alv_other_options' => 'getTypeAlvOtherOptions',
        'type_bog_options' => 'getTypeBogOptions',
        'type_of_business_law_options' => 'getTypeOfBusinessLawOptions',
        'type_of_floor_options' => 'getTypeOfFloorOptions',
        'type_of_habitation_options' => 'getTypeOfHabitationOptions',
        'type_of_window_frame_options' => 'getTypeOfWindowFrameOptions',
        'type_part_options' => 'getTypePartOptions',
        'type_part_other_options' => 'getTypePartOtherOptions',
        'types_of_communal_area' => 'getTypesOfCommunalArea',
        'unit_of_measurement_options' => 'getUnitOfMeasurementOptions',
        'unit_of_volume_options' => 'getUnitOfVolumeOptions',
        'unit_size_options' => 'getUnitSizeOptions',
        'vat_conditions' => 'getVatConditions',
        'vendor_type_options' => 'getVendorTypeOptions',
        'waiting_time_options' => 'getWaitingTimeOptions',
        'website_provider_options' => 'getWebsiteProviderOptions',
        'welfare_state_options' => 'getWelfareStateOptions',
        'withdraw_reason_options' => 'getWithdrawReasonOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['acceptances'] = isset($data['acceptances']) ? $data['acceptances'] : null;
        $this->container['acquisition_status_options'] = isset($data['acquisition_status_options']) ? $data['acquisition_status_options'] : null;
        $this->container['address_type_options'] = isset($data['address_type_options']) ? $data['address_type_options'] : null;
        $this->container['agenda_item_category_types'] = isset($data['agenda_item_category_types']) ? $data['agenda_item_category_types'] : null;
        $this->container['agenda_item_reminder_merge_field_options'] = isset($data['agenda_item_reminder_merge_field_options']) ? $data['agenda_item_reminder_merge_field_options'] : null;
        $this->container['agenda_standard_duration_options'] = isset($data['agenda_standard_duration_options']) ? $data['agenda_standard_duration_options'] : null;
        $this->container['age_range_options'] = isset($data['age_range_options']) ? $data['age_range_options'] : null;
        $this->container['agricultural_subtype_others'] = isset($data['agricultural_subtype_others']) ? $data['agricultural_subtype_others'] : null;
        $this->container['air_treatment_options'] = isset($data['air_treatment_options']) ? $data['air_treatment_options'] : null;
        $this->container['alv_agricultural_function_options'] = isset($data['alv_agricultural_function_options']) ? $data['alv_agricultural_function_options'] : null;
        $this->container['alv_building_plot_destination_options'] = isset($data['alv_building_plot_destination_options']) ? $data['alv_building_plot_destination_options'] : null;
        $this->container['alv_continuation_options'] = isset($data['alv_continuation_options']) ? $data['alv_continuation_options'] : null;
        $this->container['alv_non_agricultural_function_options'] = isset($data['alv_non_agricultural_function_options']) ? $data['alv_non_agricultural_function_options'] : null;
        $this->container['amenities_options'] = isset($data['amenities_options']) ? $data['amenities_options'] : null;
        $this->container['apartment_characteristics'] = isset($data['apartment_characteristics']) ? $data['apartment_characteristics'] : null;
        $this->container['apartment_sorts'] = isset($data['apartment_sorts']) ? $data['apartment_sorts'] : null;
        $this->container['applicant_type_options'] = isset($data['applicant_type_options']) ? $data['applicant_type_options'] : null;
        $this->container['appraisal_certifications'] = isset($data['appraisal_certifications']) ? $data['appraisal_certifications'] : null;
        $this->container['assignment_phases'] = isset($data['assignment_phases']) ? $data['assignment_phases'] : null;
        $this->container['assignment_types'] = isset($data['assignment_types']) ? $data['assignment_types'] : null;
        $this->container['attic_options'] = isset($data['attic_options']) ? $data['attic_options'] : null;
        $this->container['availability_statuses'] = isset($data['availability_statuses']) ? $data['availability_statuses'] : null;
        $this->container['balcony_types'] = isset($data['balcony_types']) ? $data['balcony_types'] : null;
        $this->container['bathroom_facilities'] = isset($data['bathroom_facilities']) ? $data['bathroom_facilities'] : null;
        $this->container['beverage_hospitality_sector_types'] = isset($data['beverage_hospitality_sector_types']) ? $data['beverage_hospitality_sector_types'] : null;
        $this->container['bid_status_options'] = isset($data['bid_status_options']) ? $data['bid_status_options'] : null;
        $this->container['bid_type_options'] = isset($data['bid_type_options']) ? $data['bid_type_options'] : null;
        $this->container['bog_combination_object_situation_options'] = isset($data['bog_combination_object_situation_options']) ? $data['bog_combination_object_situation_options'] : null;
        $this->container['bog_combination_object_status_options'] = isset($data['bog_combination_object_status_options']) ? $data['bog_combination_object_status_options'] : null;
        $this->container['bog_combination_object_type_options'] = isset($data['bog_combination_object_type_options']) ? $data['bog_combination_object_type_options'] : null;
        $this->container['building_type_options'] = isset($data['building_type_options']) ? $data['building_type_options'] : null;
        $this->container['buyer_type_options'] = isset($data['buyer_type_options']) ? $data['buyer_type_options'] : null;
        $this->container['cadastral_lot_size_options'] = isset($data['cadastral_lot_size_options']) ? $data['cadastral_lot_size_options'] : null;
        $this->container['cattle_farming_subtypes'] = isset($data['cattle_farming_subtypes']) ? $data['cattle_farming_subtypes'] : null;
        $this->container['certification_options'] = isset($data['certification_options']) ? $data['certification_options'] : null;
        $this->container['child_age_range_options'] = isset($data['child_age_range_options']) ? $data['child_age_range_options'] : null;
        $this->container['civil_states'] = isset($data['civil_states']) ? $data['civil_states'] : null;
        $this->container['comfort_quality_options'] = isset($data['comfort_quality_options']) ? $data['comfort_quality_options'] : null;
        $this->container['commission_paid_by_options'] = isset($data['commission_paid_by_options']) ? $data['commission_paid_by_options'] : null;
        $this->container['commission_type_options'] = isset($data['commission_type_options']) ? $data['commission_type_options'] : null;
        $this->container['condition_options'] = isset($data['condition_options']) ? $data['condition_options'] : null;
        $this->container['condition_type_options'] = isset($data['condition_type_options']) ? $data['condition_type_options'] : null;
        $this->container['construction_option_options'] = isset($data['construction_option_options']) ? $data['construction_option_options'] : null;
        $this->container['construction_periods'] = isset($data['construction_periods']) ? $data['construction_periods'] : null;
        $this->container['contact_link_types'] = isset($data['contact_link_types']) ? $data['contact_link_types'] : null;
        $this->container['contact_person_title_suggestions'] = isset($data['contact_person_title_suggestions']) ? $data['contact_person_title_suggestions'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['default_folder_tree_category_options'] = isset($data['default_folder_tree_category_options']) ? $data['default_folder_tree_category_options'] : null;
        $this->container['document_template_type_options'] = isset($data['document_template_type_options']) ? $data['document_template_type_options'] : null;
        $this->container['drainage_options'] = isset($data['drainage_options']) ? $data['drainage_options'] : null;
        $this->container['email_address_types'] = isset($data['email_address_types']) ? $data['email_address_types'] : null;
        $this->container['energy_class_options'] = isset($data['energy_class_options']) ? $data['energy_class_options'] : null;
        $this->container['energy_source_options'] = isset($data['energy_source_options']) ? $data['energy_source_options'] : null;
        $this->container['exclusive_status_options'] = isset($data['exclusive_status_options']) ? $data['exclusive_status_options'] : null;
        $this->container['facility_options'] = isset($data['facility_options']) ? $data['facility_options'] : null;
        $this->container['family_income_options'] = isset($data['family_income_options']) ? $data['family_income_options'] : null;
        $this->container['fastfood_hospitality_sector_types'] = isset($data['fastfood_hospitality_sector_types']) ? $data['fastfood_hospitality_sector_types'] : null;
        $this->container['fixed_variable_options'] = isset($data['fixed_variable_options']) ? $data['fixed_variable_options'] : null;
        $this->container['floor_type_options'] = isset($data['floor_type_options']) ? $data['floor_type_options'] : null;
        $this->container['furnishing_options'] = isset($data['furnishing_options']) ? $data['furnishing_options'] : null;
        $this->container['garage_type_options'] = isset($data['garage_type_options']) ? $data['garage_type_options'] : null;
        $this->container['garden_quality_options'] = isset($data['garden_quality_options']) ? $data['garden_quality_options'] : null;
        $this->container['garden_type_options'] = isset($data['garden_type_options']) ? $data['garden_type_options'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['ground_lease_period_options'] = isset($data['ground_lease_period_options']) ? $data['ground_lease_period_options'] : null;
        $this->container['ground_ownership_type_options'] = isset($data['ground_ownership_type_options']) ? $data['ground_ownership_type_options'] : null;
        $this->container['ground_usage_options'] = isset($data['ground_usage_options']) ? $data['ground_usage_options'] : null;
        $this->container['heating_method_options'] = isset($data['heating_method_options']) ? $data['heating_method_options'] : null;
        $this->container['heating_water_method_options'] = isset($data['heating_water_method_options']) ? $data['heating_water_method_options'] : null;
        $this->container['horeca_sector_type_options'] = isset($data['horeca_sector_type_options']) ? $data['horeca_sector_type_options'] : null;
        $this->container['horse_company_subtypes'] = isset($data['horse_company_subtypes']) ? $data['horse_company_subtypes'] : null;
        $this->container['horse_trough_location_options'] = isset($data['horse_trough_location_options']) ? $data['horse_trough_location_options'] : null;
        $this->container['horticultural_company_types'] = isset($data['horticultural_company_types']) ? $data['horticultural_company_types'] : null;
        $this->container['hotel_hospitality_sector_types'] = isset($data['hotel_hospitality_sector_types']) ? $data['hotel_hospitality_sector_types'] : null;
        $this->container['house_characteristics'] = isset($data['house_characteristics']) ? $data['house_characteristics'] : null;
        $this->container['household_composition_options'] = isset($data['household_composition_options']) ? $data['household_composition_options'] : null;
        $this->container['house_sorts'] = isset($data['house_sorts']) ? $data['house_sorts'] : null;
        $this->container['house_types'] = isset($data['house_types']) ? $data['house_types'] : null;
        $this->container['identification_types'] = isset($data['identification_types']) ? $data['identification_types'] : null;
        $this->container['industrial_building_facility_options'] = isset($data['industrial_building_facility_options']) ? $data['industrial_building_facility_options'] : null;
        $this->container['investment_type_options'] = isset($data['investment_type_options']) ? $data['investment_type_options'] : null;
        $this->container['invoice_due_terms'] = isset($data['invoice_due_terms']) ? $data['invoice_due_terms'] : null;
        $this->container['invoice_statuses'] = isset($data['invoice_statuses']) ? $data['invoice_statuses'] : null;
        $this->container['invoice_types'] = isset($data['invoice_types']) ? $data['invoice_types'] : null;
        $this->container['isolation_type_options'] = isset($data['isolation_type_options']) ? $data['isolation_type_options'] : null;
        $this->container['kitchen_facility_options'] = isset($data['kitchen_facility_options']) ? $data['kitchen_facility_options'] : null;
        $this->container['kitchen_types'] = isset($data['kitchen_types']) ? $data['kitchen_types'] : null;
        $this->container['land_property_sub_type_options'] = isset($data['land_property_sub_type_options']) ? $data['land_property_sub_type_options'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['leasehold_owner_type_options'] = isset($data['leasehold_owner_type_options']) ? $data['leasehold_owner_type_options'] : null;
        $this->container['lease_term_unit_options'] = isset($data['lease_term_unit_options']) ? $data['lease_term_unit_options'] : null;
        $this->container['legal_status_options'] = isset($data['legal_status_options']) ? $data['legal_status_options'] : null;
        $this->container['leisure_facility_type_options'] = isset($data['leisure_facility_type_options']) ? $data['leisure_facility_type_options'] : null;
        $this->container['leisure_type_options'] = isset($data['leisure_type_options']) ? $data['leisure_type_options'] : null;
        $this->container['listing_types'] = isset($data['listing_types']) ? $data['listing_types'] : null;
        $this->container['living_room_types'] = isset($data['living_room_types']) ? $data['living_room_types'] : null;
        $this->container['location_places'] = isset($data['location_places']) ? $data['location_places'] : null;
        $this->container['match_mail_period_options'] = isset($data['match_mail_period_options']) ? $data['match_mail_period_options'] : null;
        $this->container['match_mail_trigger_options'] = isset($data['match_mail_trigger_options']) ? $data['match_mail_trigger_options'] : null;
        $this->container['measurment_options'] = isset($data['measurment_options']) ? $data['measurment_options'] : null;
        $this->container['media_contract_status_options'] = isset($data['media_contract_status_options']) ? $data['media_contract_status_options'] : null;
        $this->container['media_partner_categories'] = isset($data['media_partner_categories']) ? $data['media_partner_categories'] : null;
        $this->container['mixed_forms'] = isset($data['mixed_forms']) ? $data['mixed_forms'] : null;
        $this->container['moving_reason_options'] = isset($data['moving_reason_options']) ? $data['moving_reason_options'] : null;
        $this->container['nature_registration_options'] = isset($data['nature_registration_options']) ? $data['nature_registration_options'] : null;
        $this->container['notification_date_format_options'] = isset($data['notification_date_format_options']) ? $data['notification_date_format_options'] : null;
        $this->container['offer_type_options'] = isset($data['offer_type_options']) ? $data['offer_type_options'] : null;
        $this->container['open_house_recurrency_options'] = isset($data['open_house_recurrency_options']) ? $data['open_house_recurrency_options'] : null;
        $this->container['orientations'] = isset($data['orientations']) ? $data['orientations'] : null;
        $this->container['ownership_options'] = isset($data['ownership_options']) ? $data['ownership_options'] : null;
        $this->container['ownership_type_options'] = isset($data['ownership_type_options']) ? $data['ownership_type_options'] : null;
        $this->container['parking_facility_options'] = isset($data['parking_facility_options']) ? $data['parking_facility_options'] : null;
        $this->container['parking_type_options'] = isset($data['parking_type_options']) ? $data['parking_type_options'] : null;
        $this->container['pavement_type_options'] = isset($data['pavement_type_options']) ? $data['pavement_type_options'] : null;
        $this->container['peculiarity_options'] = isset($data['peculiarity_options']) ? $data['peculiarity_options'] : null;
        $this->container['phone_number_types'] = isset($data['phone_number_types']) ? $data['phone_number_types'] : null;
        $this->container['pig_company_types'] = isset($data['pig_company_types']) ? $data['pig_company_types'] : null;
        $this->container['point_of_interest_options'] = isset($data['point_of_interest_options']) ? $data['point_of_interest_options'] : null;
        $this->container['polution_type_options'] = isset($data['polution_type_options']) ? $data['polution_type_options'] : null;
        $this->container['poultry_farming_subtypes'] = isset($data['poultry_farming_subtypes']) ? $data['poultry_farming_subtypes'] : null;
        $this->container['poultry_housing_type_options'] = isset($data['poultry_housing_type_options']) ? $data['poultry_housing_type_options'] : null;
        $this->container['price_codes'] = isset($data['price_codes']) ? $data['price_codes'] : null;
        $this->container['price_history_events'] = isset($data['price_history_events']) ? $data['price_history_events'] : null;
        $this->container['priorities'] = isset($data['priorities']) ? $data['priorities'] : null;
        $this->container['publication_statuses'] = isset($data['publication_statuses']) ? $data['publication_statuses'] : null;
        $this->container['real_estate_associations'] = isset($data['real_estate_associations']) ? $data['real_estate_associations'] : null;
        $this->container['real_estate_groups'] = isset($data['real_estate_groups']) ? $data['real_estate_groups'] : null;
        $this->container['register_reason_options'] = isset($data['register_reason_options']) ? $data['register_reason_options'] : null;
        $this->container['relation_roles'] = isset($data['relation_roles']) ? $data['relation_roles'] : null;
        $this->container['relation_types'] = isset($data['relation_types']) ? $data['relation_types'] : null;
        $this->container['reminder_minutes_options'] = isset($data['reminder_minutes_options']) ? $data['reminder_minutes_options'] : null;
        $this->container['reminder_notification_settings_type_option_list'] = isset($data['reminder_notification_settings_type_option_list']) ? $data['reminder_notification_settings_type_option_list'] : null;
        $this->container['rent_conditions'] = isset($data['rent_conditions']) ? $data['rent_conditions'] : null;
        $this->container['rent_specifications'] = isset($data['rent_specifications']) ? $data['rent_specifications'] : null;
        $this->container['residential_building_type_options'] = isset($data['residential_building_type_options']) ? $data['residential_building_type_options'] : null;
        $this->container['residential_facility_options'] = isset($data['residential_facility_options']) ? $data['residential_facility_options'] : null;
        $this->container['residential_subtype_others'] = isset($data['residential_subtype_others']) ? $data['residential_subtype_others'] : null;
        $this->container['restaurant_hospitality_sector_types'] = isset($data['restaurant_hospitality_sector_types']) ? $data['restaurant_hospitality_sector_types'] : null;
        $this->container['roof_material_options'] = isset($data['roof_material_options']) ? $data['roof_material_options'] : null;
        $this->container['roof_type_options'] = isset($data['roof_type_options']) ? $data['roof_type_options'] : null;
        $this->container['sale_conditions'] = isset($data['sale_conditions']) ? $data['sale_conditions'] : null;
        $this->container['search_assignment_facility_options'] = isset($data['search_assignment_facility_options']) ? $data['search_assignment_facility_options'] : null;
        $this->container['search_assignment_peculiarity_options'] = isset($data['search_assignment_peculiarity_options']) ? $data['search_assignment_peculiarity_options'] : null;
        $this->container['situated_type_options'] = isset($data['situated_type_options']) ? $data['situated_type_options'] : null;
        $this->container['social_media_type_options'] = isset($data['social_media_type_options']) ? $data['social_media_type_options'] : null;
        $this->container['social_property_facility_type_options'] = isset($data['social_property_facility_type_options']) ? $data['social_property_facility_type_options'] : null;
        $this->container['social_property_type_options'] = isset($data['social_property_type_options']) ? $data['social_property_type_options'] : null;
        $this->container['soil_type_options'] = isset($data['soil_type_options']) ? $data['soil_type_options'] : null;
        $this->container['space_types'] = isset($data['space_types']) ? $data['space_types'] : null;
        $this->container['storage_room_type_options'] = isset($data['storage_room_type_options']) ? $data['storage_room_type_options'] : null;
        $this->container['stoves'] = isset($data['stoves']) ? $data['stoves'] : null;
        $this->container['take_over_specification_options'] = isset($data['take_over_specification_options']) ? $data['take_over_specification_options'] : null;
        $this->container['task_categories'] = isset($data['task_categories']) ? $data['task_categories'] : null;
        $this->container['task_follow_ups'] = isset($data['task_follow_ups']) ? $data['task_follow_ups'] : null;
        $this->container['task_statuses'] = isset($data['task_statuses']) ? $data['task_statuses'] : null;
        $this->container['template_definition_category_options'] = isset($data['template_definition_category_options']) ? $data['template_definition_category_options'] : null;
        $this->container['timeline_action_sub_options'] = isset($data['timeline_action_sub_options']) ? $data['timeline_action_sub_options'] : null;
        $this->container['timeline_action_types'] = isset($data['timeline_action_types']) ? $data['timeline_action_types'] : null;
        $this->container['type_alv_options'] = isset($data['type_alv_options']) ? $data['type_alv_options'] : null;
        $this->container['type_alv_other_options'] = isset($data['type_alv_other_options']) ? $data['type_alv_other_options'] : null;
        $this->container['type_bog_options'] = isset($data['type_bog_options']) ? $data['type_bog_options'] : null;
        $this->container['type_of_business_law_options'] = isset($data['type_of_business_law_options']) ? $data['type_of_business_law_options'] : null;
        $this->container['type_of_floor_options'] = isset($data['type_of_floor_options']) ? $data['type_of_floor_options'] : null;
        $this->container['type_of_habitation_options'] = isset($data['type_of_habitation_options']) ? $data['type_of_habitation_options'] : null;
        $this->container['type_of_window_frame_options'] = isset($data['type_of_window_frame_options']) ? $data['type_of_window_frame_options'] : null;
        $this->container['type_part_options'] = isset($data['type_part_options']) ? $data['type_part_options'] : null;
        $this->container['type_part_other_options'] = isset($data['type_part_other_options']) ? $data['type_part_other_options'] : null;
        $this->container['types_of_communal_area'] = isset($data['types_of_communal_area']) ? $data['types_of_communal_area'] : null;
        $this->container['unit_of_measurement_options'] = isset($data['unit_of_measurement_options']) ? $data['unit_of_measurement_options'] : null;
        $this->container['unit_of_volume_options'] = isset($data['unit_of_volume_options']) ? $data['unit_of_volume_options'] : null;
        $this->container['unit_size_options'] = isset($data['unit_size_options']) ? $data['unit_size_options'] : null;
        $this->container['vat_conditions'] = isset($data['vat_conditions']) ? $data['vat_conditions'] : null;
        $this->container['vendor_type_options'] = isset($data['vendor_type_options']) ? $data['vendor_type_options'] : null;
        $this->container['waiting_time_options'] = isset($data['waiting_time_options']) ? $data['waiting_time_options'] : null;
        $this->container['website_provider_options'] = isset($data['website_provider_options']) ? $data['website_provider_options'] : null;
        $this->container['welfare_state_options'] = isset($data['welfare_state_options']) ? $data['welfare_state_options'] : null;
        $this->container['withdraw_reason_options'] = isset($data['withdraw_reason_options']) ? $data['withdraw_reason_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acceptances
     *
     * @return \Swagger\Client\Model\AcceptanceOption[]
     */
    public function getAcceptances()
    {
        return $this->container['acceptances'];
    }

    /**
     * Sets acceptances
     *
     * @param \Swagger\Client\Model\AcceptanceOption[] $acceptances Acceptances (E.g. 'In Consultation', 'Per Date').
     *
     * @return $this
     */
    public function setAcceptances($acceptances)
    {
        $this->container['acceptances'] = $acceptances;

        return $this;
    }

    /**
     * Gets acquisition_status_options
     *
     * @return \Swagger\Client\Model\AcquisitionStatusOption[]
     */
    public function getAcquisitionStatusOptions()
    {
        return $this->container['acquisition_status_options'];
    }

    /**
     * Sets acquisition_status_options
     *
     * @param \Swagger\Client\Model\AcquisitionStatusOption[] $acquisition_status_options List of all Acquisition Status(E.g. 'New', 'Under Negociation', 'Canceled', 'Purchased')
     *
     * @return $this
     */
    public function setAcquisitionStatusOptions($acquisition_status_options)
    {
        $this->container['acquisition_status_options'] = $acquisition_status_options;

        return $this;
    }

    /**
     * Gets address_type_options
     *
     * @return \Swagger\Client\Model\AddressTypeOption[]
     */
    public function getAddressTypeOptions()
    {
        return $this->container['address_type_options'];
    }

    /**
     * Sets address_type_options
     *
     * @param \Swagger\Client\Model\AddressTypeOption[] $address_type_options Address type options (E.g. 'future', 'past', 'current')
     *
     * @return $this
     */
    public function setAddressTypeOptions($address_type_options)
    {
        $this->container['address_type_options'] = $address_type_options;

        return $this;
    }

    /**
     * Gets agenda_item_category_types
     *
     * @return \Swagger\Client\Model\AgendaItemCategoryTypeOption[]
     */
    public function getAgendaItemCategoryTypes()
    {
        return $this->container['agenda_item_category_types'];
    }

    /**
     * Sets agenda_item_category_types
     *
     * @param \Swagger\Client\Model\AgendaItemCategoryTypeOption[] $agenda_item_category_types Agenda item category types (E.g. 'Viewing', 'Other')
     *
     * @return $this
     */
    public function setAgendaItemCategoryTypes($agenda_item_category_types)
    {
        $this->container['agenda_item_category_types'] = $agenda_item_category_types;

        return $this;
    }

    /**
     * Gets agenda_item_reminder_merge_field_options
     *
     * @return \Swagger\Client\Model\AgendaItemReminderMergeFieldOption[]
     */
    public function getAgendaItemReminderMergeFieldOptions()
    {
        return $this->container['agenda_item_reminder_merge_field_options'];
    }

    /**
     * Sets agenda_item_reminder_merge_field_options
     *
     * @param \Swagger\Client\Model\AgendaItemReminderMergeFieldOption[] $agenda_item_reminder_merge_field_options Agenda Item Category reminder merge fields (E.g. '{address}', '{ContactEmailAddress}')
     *
     * @return $this
     */
    public function setAgendaItemReminderMergeFieldOptions($agenda_item_reminder_merge_field_options)
    {
        $this->container['agenda_item_reminder_merge_field_options'] = $agenda_item_reminder_merge_field_options;

        return $this;
    }

    /**
     * Gets agenda_standard_duration_options
     *
     * @return \Swagger\Client\Model\AgendaStandardDurationOption[]
     */
    public function getAgendaStandardDurationOptions()
    {
        return $this->container['agenda_standard_duration_options'];
    }

    /**
     * Sets agenda_standard_duration_options
     *
     * @param \Swagger\Client\Model\AgendaStandardDurationOption[] $agenda_standard_duration_options Agenda StandardDuration Options (E.g. '15 minutes', '2 hours', 'All day'). Dutch: Standaard duur afspraak
     *
     * @return $this
     */
    public function setAgendaStandardDurationOptions($agenda_standard_duration_options)
    {
        $this->container['agenda_standard_duration_options'] = $agenda_standard_duration_options;

        return $this;
    }

    /**
     * Gets age_range_options
     *
     * @return \Swagger\Client\Model\AgeRangeOption[]
     */
    public function getAgeRangeOptions()
    {
        return $this->container['age_range_options'];
    }

    /**
     * Sets age_range_options
     *
     * @param \Swagger\Client\Model\AgeRangeOption[] $age_range_options Age Range options (E.g. '25 - 34 year', 'Older then 75').
     *
     * @return $this
     */
    public function setAgeRangeOptions($age_range_options)
    {
        $this->container['age_range_options'] = $age_range_options;

        return $this;
    }

    /**
     * Gets agricultural_subtype_others
     *
     * @return \Swagger\Client\Model\AgriculturalSubtypeOtherOption[]
     */
    public function getAgriculturalSubtypeOthers()
    {
        return $this->container['agricultural_subtype_others'];
    }

    /**
     * Sets agricultural_subtype_others
     *
     * @param \Swagger\Client\Model\AgriculturalSubtypeOtherOption[] $agricultural_subtype_others Agricultural subtype 'others'.  (E.g. 'sheep', 'goat', 'worms')
     *
     * @return $this
     */
    public function setAgriculturalSubtypeOthers($agricultural_subtype_others)
    {
        $this->container['agricultural_subtype_others'] = $agricultural_subtype_others;

        return $this;
    }

    /**
     * Gets air_treatment_options
     *
     * @return \Swagger\Client\Model\AirTreatmentOption[]
     */
    public function getAirTreatmentOptions()
    {
        return $this->container['air_treatment_options'];
    }

    /**
     * Sets air_treatment_options
     *
     * @param \Swagger\Client\Model\AirTreatmentOption[] $air_treatment_options Air treatment Options (E.g. 'Airconditioning', 'Ventilation', 'Peak cooling'). Dutch: Luchtbehandeling
     *
     * @return $this
     */
    public function setAirTreatmentOptions($air_treatment_options)
    {
        $this->container['air_treatment_options'] = $air_treatment_options;

        return $this;
    }

    /**
     * Gets alv_agricultural_function_options
     *
     * @return \Swagger\Client\Model\AlvAgriculturalFunctionOption[]
     */
    public function getAlvAgriculturalFunctionOptions()
    {
        return $this->container['alv_agricultural_function_options'];
    }

    /**
     * Sets alv_agricultural_function_options
     *
     * @param \Swagger\Client\Model\AlvAgriculturalFunctionOption[] $alv_agricultural_function_options Alv agricultural function options (E.g. 'Arable farm', 'Fruit growing company')
     *
     * @return $this
     */
    public function setAlvAgriculturalFunctionOptions($alv_agricultural_function_options)
    {
        $this->container['alv_agricultural_function_options'] = $alv_agricultural_function_options;

        return $this;
    }

    /**
     * Gets alv_building_plot_destination_options
     *
     * @return \Swagger\Client\Model\AlvBuildingPlotDestinationOption[]
     */
    public function getAlvBuildingPlotDestinationOptions()
    {
        return $this->container['alv_building_plot_destination_options'];
    }

    /**
     * Sets alv_building_plot_destination_options
     *
     * @param \Swagger\Client\Model\AlvBuildingPlotDestinationOption[] $alv_building_plot_destination_options Alv building plot destination options (E.g. 'Veal calf holding', 'dairy farm')
     *
     * @return $this
     */
    public function setAlvBuildingPlotDestinationOptions($alv_building_plot_destination_options)
    {
        $this->container['alv_building_plot_destination_options'] = $alv_building_plot_destination_options;

        return $this;
    }

    /**
     * Gets alv_continuation_options
     *
     * @return \Swagger\Client\Model\AlvContinuationOption[]
     */
    public function getAlvContinuationOptions()
    {
        return $this->container['alv_continuation_options'];
    }

    /**
     * Sets alv_continuation_options
     *
     * @param \Swagger\Client\Model\AlvContinuationOption[] $alv_continuation_options Alv continuation options (E.g. 'Current function', 'Other agricultural function')
     *
     * @return $this
     */
    public function setAlvContinuationOptions($alv_continuation_options)
    {
        $this->container['alv_continuation_options'] = $alv_continuation_options;

        return $this;
    }

    /**
     * Gets alv_non_agricultural_function_options
     *
     * @return \Swagger\Client\Model\AlvNonAgriculturalFunctionOption[]
     */
    public function getAlvNonAgriculturalFunctionOptions()
    {
        return $this->container['alv_non_agricultural_function_options'];
    }

    /**
     * Sets alv_non_agricultural_function_options
     *
     * @param \Swagger\Client\Model\AlvNonAgriculturalFunctionOption[] $alv_non_agricultural_function_options Non alv agricultural function options (E.g. 'care function', 'Non agricultural company')
     *
     * @return $this
     */
    public function setAlvNonAgriculturalFunctionOptions($alv_non_agricultural_function_options)
    {
        $this->container['alv_non_agricultural_function_options'] = $alv_non_agricultural_function_options;

        return $this;
    }

    /**
     * Gets amenities_options
     *
     * @return \Swagger\Client\Model\AmenitiesOption[]
     */
    public function getAmenitiesOptions()
    {
        return $this->container['amenities_options'];
    }

    /**
     * Sets amenities_options
     *
     * @param \Swagger\Client\Model\AmenitiesOption[] $amenities_options Amentities options (E.g. 'Heating', 'Electirc door', 'Water')
     *
     * @return $this
     */
    public function setAmenitiesOptions($amenities_options)
    {
        $this->container['amenities_options'] = $amenities_options;

        return $this;
    }

    /**
     * Gets apartment_characteristics
     *
     * @return \Swagger\Client\Model\ApartmentCharacteristicOption[]
     */
    public function getApartmentCharacteristics()
    {
        return $this->container['apartment_characteristics'];
    }

    /**
     * Sets apartment_characteristics
     *
     * @param \Swagger\Client\Model\ApartmentCharacteristicOption[] $apartment_characteristics Apartment characteristics.  (E.g. 'ServiceFlat', Common Apartmen', 'CorridorFlat').
     *
     * @return $this
     */
    public function setApartmentCharacteristics($apartment_characteristics)
    {
        $this->container['apartment_characteristics'] = $apartment_characteristics;

        return $this;
    }

    /**
     * Gets apartment_sorts
     *
     * @return \Swagger\Client\Model\ApartmentSortOption[]
     */
    public function getApartmentSorts()
    {
        return $this->container['apartment_sorts'];
    }

    /**
     * Sets apartment_sorts
     *
     * @param \Swagger\Client\Model\ApartmentSortOption[] $apartment_sorts Apartment sort. (E.g. 'Upstairs Apartment', 'Ground Floor Apartment', 'Maisonette')
     *
     * @return $this
     */
    public function setApartmentSorts($apartment_sorts)
    {
        $this->container['apartment_sorts'] = $apartment_sorts;

        return $this;
    }

    /**
     * Gets applicant_type_options
     *
     * @return \Swagger\Client\Model\ApplicantTypeOption[]
     */
    public function getApplicantTypeOptions()
    {
        return $this->container['applicant_type_options'];
    }

    /**
     * Sets applicant_type_options
     *
     * @param \Swagger\Client\Model\ApplicantTypeOption[] $applicant_type_options Applicant type options (E.g. Buyers, tenants)
     *
     * @return $this
     */
    public function setApplicantTypeOptions($applicant_type_options)
    {
        $this->container['applicant_type_options'] = $applicant_type_options;

        return $this;
    }

    /**
     * Gets appraisal_certifications
     *
     * @return \Swagger\Client\Model\AppraisalCertificationOption[]
     */
    public function getAppraisalCertifications()
    {
        return $this->container['appraisal_certifications'];
    }

    /**
     * Sets appraisal_certifications
     *
     * @param \Swagger\Client\Model\AppraisalCertificationOption[] $appraisal_certifications appraisal_certifications
     *
     * @return $this
     */
    public function setAppraisalCertifications($appraisal_certifications)
    {
        $this->container['appraisal_certifications'] = $appraisal_certifications;

        return $this;
    }

    /**
     * Gets assignment_phases
     *
     * @return \Swagger\Client\Model\AssignmentPhaseOption[]
     */
    public function getAssignmentPhases()
    {
        return $this->container['assignment_phases'];
    }

    /**
     * Sets assignment_phases
     *
     * @param \Swagger\Client\Model\AssignmentPhaseOption[] $assignment_phases Available assignment phases ('Concept', 'Initiated' or 'Completed').
     *
     * @return $this
     */
    public function setAssignmentPhases($assignment_phases)
    {
        $this->container['assignment_phases'] = $assignment_phases;

        return $this;
    }

    /**
     * Gets assignment_types
     *
     * @return \Swagger\Client\Model\AssignmentTypeOption[]
     */
    public function getAssignmentTypes()
    {
        return $this->container['assignment_types'];
    }

    /**
     * Sets assignment_types
     *
     * @param \Swagger\Client\Model\AssignmentTypeOption[] $assignment_types Available assignment types ('Listing', 'ObjectType' or 'Project').
     *
     * @return $this
     */
    public function setAssignmentTypes($assignment_types)
    {
        $this->container['assignment_types'] = $assignment_types;

        return $this;
    }

    /**
     * Gets attic_options
     *
     * @return \Swagger\Client\Model\AtticOptionOption[]
     */
    public function getAtticOptions()
    {
        return $this->container['attic_options'];
    }

    /**
     * Sets attic_options
     *
     * @param \Swagger\Client\Model\AtticOptionOption[] $attic_options Attic options codes (E.g. 'Option for room', 'Staircase', etc.).
     *
     * @return $this
     */
    public function setAtticOptions($attic_options)
    {
        $this->container['attic_options'] = $attic_options;

        return $this;
    }

    /**
     * Gets availability_statuses
     *
     * @return \Swagger\Client\Model\AvailabilityStatusOption[]
     */
    public function getAvailabilityStatuses()
    {
        return $this->container['availability_statuses'];
    }

    /**
     * Sets availability_statuses
     *
     * @param \Swagger\Client\Model\AvailabilityStatusOption[] $availability_statuses Available availabilty statusses (E.g. 'Sold', 'Withdrawn' or 'Rented').
     *
     * @return $this
     */
    public function setAvailabilityStatuses($availability_statuses)
    {
        $this->container['availability_statuses'] = $availability_statuses;

        return $this;
    }

    /**
     * Gets balcony_types
     *
     * @return \Swagger\Client\Model\BalconyTypeOption[]
     */
    public function getBalconyTypes()
    {
        return $this->container['balcony_types'];
    }

    /**
     * Sets balcony_types
     *
     * @param \Swagger\Client\Model\BalconyTypeOption[] $balcony_types Balcony Types (E.g. 'Closed', 'Glazed')]
     *
     * @return $this
     */
    public function setBalconyTypes($balcony_types)
    {
        $this->container['balcony_types'] = $balcony_types;

        return $this;
    }

    /**
     * Gets bathroom_facilities
     *
     * @return \Swagger\Client\Model\BathroomFacilityOption[]
     */
    public function getBathroomFacilities()
    {
        return $this->container['bathroom_facilities'];
    }

    /**
     * Sets bathroom_facilities
     *
     * @param \Swagger\Client\Model\BathroomFacilityOption[] $bathroom_facilities Bathroom facilities (E.g. 'Bath', 'Shower').
     *
     * @return $this
     */
    public function setBathroomFacilities($bathroom_facilities)
    {
        $this->container['bathroom_facilities'] = $bathroom_facilities;

        return $this;
    }

    /**
     * Gets beverage_hospitality_sector_types
     *
     * @return \Swagger\Client\Model\BeverageHospitalityTypeOption[]
     */
    public function getBeverageHospitalitySectorTypes()
    {
        return $this->container['beverage_hospitality_sector_types'];
    }

    /**
     * Sets beverage_hospitality_sector_types
     *
     * @param \Swagger\Client\Model\BeverageHospitalityTypeOption[] $beverage_hospitality_sector_types Beverage hospitality types (E.g. 'Cafe', 'EatCafe', 'Disco')
     *
     * @return $this
     */
    public function setBeverageHospitalitySectorTypes($beverage_hospitality_sector_types)
    {
        $this->container['beverage_hospitality_sector_types'] = $beverage_hospitality_sector_types;

        return $this;
    }

    /**
     * Gets bid_status_options
     *
     * @return \Swagger\Client\Model\BidStatusOption[]
     */
    public function getBidStatusOptions()
    {
        return $this->container['bid_status_options'];
    }

    /**
     * Sets bid_status_options
     *
     * @param \Swagger\Client\Model\BidStatusOption[] $bid_status_options Bid status options (E.g. 'Active', 'Rejected', 'Accepted')
     *
     * @return $this
     */
    public function setBidStatusOptions($bid_status_options)
    {
        $this->container['bid_status_options'] = $bid_status_options;

        return $this;
    }

    /**
     * Gets bid_type_options
     *
     * @return \Swagger\Client\Model\BidTypeOption[]
     */
    public function getBidTypeOptions()
    {
        return $this->container['bid_type_options'];
    }

    /**
     * Sets bid_type_options
     *
     * @param \Swagger\Client\Model\BidTypeOption[] $bid_type_options Bid type options (E.g. 'Incoming', 'Outgoing')
     *
     * @return $this
     */
    public function setBidTypeOptions($bid_type_options)
    {
        $this->container['bid_type_options'] = $bid_type_options;

        return $this;
    }

    /**
     * Gets bog_combination_object_situation_options
     *
     * @return \Swagger\Client\Model\BogCombinationObjectSituationOption[]
     */
    public function getBogCombinationObjectSituationOptions()
    {
        return $this->container['bog_combination_object_situation_options'];
    }

    /**
     * Sets bog_combination_object_situation_options
     *
     * @param \Swagger\Client\Model\BogCombinationObjectSituationOption[] $bog_combination_object_situation_options Bog combination object situation options (E.g. 'Indoors', 'Detached')
     *
     * @return $this
     */
    public function setBogCombinationObjectSituationOptions($bog_combination_object_situation_options)
    {
        $this->container['bog_combination_object_situation_options'] = $bog_combination_object_situation_options;

        return $this;
    }

    /**
     * Gets bog_combination_object_status_options
     *
     * @return \Swagger\Client\Model\BogCombinationObjectStatusOption[]
     */
    public function getBogCombinationObjectStatusOptions()
    {
        return $this->container['bog_combination_object_status_options'];
    }

    /**
     * Sets bog_combination_object_status_options
     *
     * @param \Swagger\Client\Model\BogCombinationObjectStatusOption[] $bog_combination_object_status_options Bog combination object status options (E.g. 'Possible', 'Present')
     *
     * @return $this
     */
    public function setBogCombinationObjectStatusOptions($bog_combination_object_status_options)
    {
        $this->container['bog_combination_object_status_options'] = $bog_combination_object_status_options;

        return $this;
    }

    /**
     * Gets bog_combination_object_type_options
     *
     * @return \Swagger\Client\Model\BogCombinationObjectTypeOption[]
     */
    public function getBogCombinationObjectTypeOptions()
    {
        return $this->container['bog_combination_object_type_options'];
    }

    /**
     * Sets bog_combination_object_type_options
     *
     * @param \Swagger\Client\Model\BogCombinationObjectTypeOption[] $bog_combination_object_type_options Bog combination object type options (E.g. 'Office space', 'Practice room')
     *
     * @return $this
     */
    public function setBogCombinationObjectTypeOptions($bog_combination_object_type_options)
    {
        $this->container['bog_combination_object_type_options'] = $bog_combination_object_type_options;

        return $this;
    }

    /**
     * Gets building_type_options
     *
     * @return \Swagger\Client\Model\BuildingTypeOption[]
     */
    public function getBuildingTypeOptions()
    {
        return $this->container['building_type_options'];
    }

    /**
     * Sets building_type_options
     *
     * @param \Swagger\Client\Model\BuildingTypeOption[] $building_type_options Building type options (E.g. 'New', 'Existing')
     *
     * @return $this
     */
    public function setBuildingTypeOptions($building_type_options)
    {
        $this->container['building_type_options'] = $building_type_options;

        return $this;
    }

    /**
     * Gets buyer_type_options
     *
     * @return \Swagger\Client\Model\BuyerTypeOption[]
     */
    public function getBuyerTypeOptions()
    {
        return $this->container['buyer_type_options'];
    }

    /**
     * Sets buyer_type_options
     *
     * @param \Swagger\Client\Model\BuyerTypeOption[] $buyer_type_options Buyer type options (E.g. 'Starter', 'Parents').
     *
     * @return $this
     */
    public function setBuyerTypeOptions($buyer_type_options)
    {
        $this->container['buyer_type_options'] = $buyer_type_options;

        return $this;
    }

    /**
     * Gets cadastral_lot_size_options
     *
     * @return \Swagger\Client\Model\CadastralLotSizeOption[]
     */
    public function getCadastralLotSizeOptions()
    {
        return $this->container['cadastral_lot_size_options'];
    }

    /**
     * Sets cadastral_lot_size_options
     *
     * @param \Swagger\Client\Model\CadastralLotSizeOption[] $cadastral_lot_size_options Cadastral lot size options (E.g. 'Partial lot', 'Entire lot')
     *
     * @return $this
     */
    public function setCadastralLotSizeOptions($cadastral_lot_size_options)
    {
        $this->container['cadastral_lot_size_options'] = $cadastral_lot_size_options;

        return $this;
    }

    /**
     * Gets cattle_farming_subtypes
     *
     * @return \Swagger\Client\Model\CattleFarmingSubtypeOption[]
     */
    public function getCattleFarmingSubtypes()
    {
        return $this->container['cattle_farming_subtypes'];
    }

    /**
     * Sets cattle_farming_subtypes
     *
     * @param \Swagger\Client\Model\CattleFarmingSubtypeOption[] $cattle_farming_subtypes Cattle Farming Subtypes (E.g. 'Dairy cattle', 'Suckler cows').
     *
     * @return $this
     */
    public function setCattleFarmingSubtypes($cattle_farming_subtypes)
    {
        $this->container['cattle_farming_subtypes'] = $cattle_farming_subtypes;

        return $this;
    }

    /**
     * Gets certification_options
     *
     * @return \Swagger\Client\Model\CertificationOption[]
     */
    public function getCertificationOptions()
    {
        return $this->container['certification_options'];
    }

    /**
     * Sets certification_options
     *
     * @param \Swagger\Client\Model\CertificationOption[] $certification_options Certification Options (E.g. 'GIW waarborgcertificaat', 'Brandveiligheid', 'Politiekeurmerk'). Dutch: Keurmerk
     *
     * @return $this
     */
    public function setCertificationOptions($certification_options)
    {
        $this->container['certification_options'] = $certification_options;

        return $this;
    }

    /**
     * Gets child_age_range_options
     *
     * @return \Swagger\Client\Model\ChildAgeRangeOption[]
     */
    public function getChildAgeRangeOptions()
    {
        return $this->container['child_age_range_options'];
    }

    /**
     * Sets child_age_range_options
     *
     * @param \Swagger\Client\Model\ChildAgeRangeOption[] $child_age_range_options Child age range options (E.g. 'younger then 7', '7 - 11 year')
     *
     * @return $this
     */
    public function setChildAgeRangeOptions($child_age_range_options)
    {
        $this->container['child_age_range_options'] = $child_age_range_options;

        return $this;
    }

    /**
     * Gets civil_states
     *
     * @return \Swagger\Client\Model\CivilStateOption[]
     */
    public function getCivilStates()
    {
        return $this->container['civil_states'];
    }

    /**
     * Sets civil_states
     *
     * @param \Swagger\Client\Model\CivilStateOption[] $civil_states civil_states
     *
     * @return $this
     */
    public function setCivilStates($civil_states)
    {
        $this->container['civil_states'] = $civil_states;

        return $this;
    }

    /**
     * Gets comfort_quality_options
     *
     * @return \Swagger\Client\Model\ComfortQualityOption[]
     */
    public function getComfortQualityOptions()
    {
        return $this->container['comfort_quality_options'];
    }

    /**
     * Sets comfort_quality_options
     *
     * @param \Swagger\Client\Model\ComfortQualityOption[] $comfort_quality_options ComfortQuality Options (E.g. 'Luxury', 'Normal', 'Simple'). Dutch: ComfortKwaliteit
     *
     * @return $this
     */
    public function setComfortQualityOptions($comfort_quality_options)
    {
        $this->container['comfort_quality_options'] = $comfort_quality_options;

        return $this;
    }

    /**
     * Gets commission_paid_by_options
     *
     * @return \Swagger\Client\Model\CommissionPaidByOption[]
     */
    public function getCommissionPaidByOptions()
    {
        return $this->container['commission_paid_by_options'];
    }

    /**
     * Sets commission_paid_by_options
     *
     * @param \Swagger\Client\Model\CommissionPaidByOption[] $commission_paid_by_options Commission PaidBy Options (E.g. 'Owner', 'Customer', 'OwnerAndCustomer').]
     *
     * @return $this
     */
    public function setCommissionPaidByOptions($commission_paid_by_options)
    {
        $this->container['commission_paid_by_options'] = $commission_paid_by_options;

        return $this;
    }

    /**
     * Gets commission_type_options
     *
     * @return \Swagger\Client\Model\CommissionTypeOption[]
     */
    public function getCommissionTypeOptions()
    {
        return $this->container['commission_type_options'];
    }

    /**
     * Sets commission_type_options
     *
     * @param \Swagger\Client\Model\CommissionTypeOption[] $commission_type_options Commission Type Options (E.g. 'Fixed', 'Percentage' or 'FixedAndPercentage').]
     *
     * @return $this
     */
    public function setCommissionTypeOptions($commission_type_options)
    {
        $this->container['commission_type_options'] = $commission_type_options;

        return $this;
    }

    /**
     * Gets condition_options
     *
     * @return \Swagger\Client\Model\ConditionOption[]
     */
    public function getConditionOptions()
    {
        return $this->container['condition_options'];
    }

    /**
     * Sets condition_options
     *
     * @param \Swagger\Client\Model\ConditionOption[] $condition_options Condition Options (E.g. 'Bad', 'Moderate', 'Good'). Dutch: OnderhoudsWaardering
     *
     * @return $this
     */
    public function setConditionOptions($condition_options)
    {
        $this->container['condition_options'] = $condition_options;

        return $this;
    }

    /**
     * Gets condition_type_options
     *
     * @return \Swagger\Client\Model\ConditionTypeOption[]
     */
    public function getConditionTypeOptions()
    {
        return $this->container['condition_type_options'];
    }

    /**
     * Sets condition_type_options
     *
     * @param \Swagger\Client\Model\ConditionTypeOption[] $condition_type_options Condition Type Options (E.g. 'Foundation only', 'In need of renovation', 'First time use after renovation'). Dutch: StaatVanOnderhoud
     *
     * @return $this
     */
    public function setConditionTypeOptions($condition_type_options)
    {
        $this->container['condition_type_options'] = $condition_type_options;

        return $this;
    }

    /**
     * Gets construction_option_options
     *
     * @return \Swagger\Client\Model\ConstructionOptionOption[]
     */
    public function getConstructionOptionOptions()
    {
        return $this->container['construction_option_options'];
    }

    /**
     * Sets construction_option_options
     *
     * @param \Swagger\Client\Model\ConstructionOptionOption[] $construction_option_options ConstructionOption Options (E.g. 'ProductionHall', 'Office').
     *
     * @return $this
     */
    public function setConstructionOptionOptions($construction_option_options)
    {
        $this->container['construction_option_options'] = $construction_option_options;

        return $this;
    }

    /**
     * Gets construction_periods
     *
     * @return \Swagger\Client\Model\ConstructionPeriodOption[]
     */
    public function getConstructionPeriods()
    {
        return $this->container['construction_periods'];
    }

    /**
     * Sets construction_periods
     *
     * @param \Swagger\Client\Model\ConstructionPeriodOption[] $construction_periods Construction Periods (E.g. 'before 1906', 'between 2001 and 2010').
     *
     * @return $this
     */
    public function setConstructionPeriods($construction_periods)
    {
        $this->container['construction_periods'] = $construction_periods;

        return $this;
    }

    /**
     * Gets contact_link_types
     *
     * @return \Swagger\Client\Model\ContactLinkTypeSuggestion[]
     */
    public function getContactLinkTypes()
    {
        return $this->container['contact_link_types'];
    }

    /**
     * Sets contact_link_types
     *
     * @param \Swagger\Client\Model\ContactLinkTypeSuggestion[] $contact_link_types contact_link_types
     *
     * @return $this
     */
    public function setContactLinkTypes($contact_link_types)
    {
        $this->container['contact_link_types'] = $contact_link_types;

        return $this;
    }

    /**
     * Gets contact_person_title_suggestions
     *
     * @return \Swagger\Client\Model\ContactPersonTitleSuggestionOption[]
     */
    public function getContactPersonTitleSuggestions()
    {
        return $this->container['contact_person_title_suggestions'];
    }

    /**
     * Sets contact_person_title_suggestions
     *
     * @param \Swagger\Client\Model\ContactPersonTitleSuggestionOption[] $contact_person_title_suggestions contact_person_title_suggestions
     *
     * @return $this
     */
    public function setContactPersonTitleSuggestions($contact_person_title_suggestions)
    {
        $this->container['contact_person_title_suggestions'] = $contact_person_title_suggestions;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return \Swagger\Client\Model\CountryOption[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \Swagger\Client\Model\CountryOption[] $countries countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets default_folder_tree_category_options
     *
     * @return \Swagger\Client\Model\DefaultFolderTreeCategoryOption[]
     */
    public function getDefaultFolderTreeCategoryOptions()
    {
        return $this->container['default_folder_tree_category_options'];
    }

    /**
     * Sets default_folder_tree_category_options
     *
     * @param \Swagger\Client\Model\DefaultFolderTreeCategoryOption[] $default_folder_tree_category_options List of all Default Folder Tree categories (E.g. 'Contact companies', 'Object Assignments for rent', 'Real estate projects')
     *
     * @return $this
     */
    public function setDefaultFolderTreeCategoryOptions($default_folder_tree_category_options)
    {
        $this->container['default_folder_tree_category_options'] = $default_folder_tree_category_options;

        return $this;
    }

    /**
     * Gets document_template_type_options
     *
     * @return \Swagger\Client\Model\DocumentTemplateTypeOption[]
     */
    public function getDocumentTemplateTypeOptions()
    {
        return $this->container['document_template_type_options'];
    }

    /**
     * Sets document_template_type_options
     *
     * @param \Swagger\Client\Model\DocumentTemplateTypeOption[] $document_template_type_options Document template type options (E.g. 'Agreement', 'Form')
     *
     * @return $this
     */
    public function setDocumentTemplateTypeOptions($document_template_type_options)
    {
        $this->container['document_template_type_options'] = $document_template_type_options;

        return $this;
    }

    /**
     * Gets drainage_options
     *
     * @return \Swagger\Client\Model\DrainageOption[]
     */
    public function getDrainageOptions()
    {
        return $this->container['drainage_options'];
    }

    /**
     * Sets drainage_options
     *
     * @param \Swagger\Client\Model\DrainageOption[] $drainage_options Drainage options (E.g. 'Sanitary', 'DownspoutAfvoer', 'FranseDrain')
     *
     * @return $this
     */
    public function setDrainageOptions($drainage_options)
    {
        $this->container['drainage_options'] = $drainage_options;

        return $this;
    }

    /**
     * Gets email_address_types
     *
     * @return \Swagger\Client\Model\EmailAddressTypeOption[]
     */
    public function getEmailAddressTypes()
    {
        return $this->container['email_address_types'];
    }

    /**
     * Sets email_address_types
     *
     * @param \Swagger\Client\Model\EmailAddressTypeOption[] $email_address_types email_address_types
     *
     * @return $this
     */
    public function setEmailAddressTypes($email_address_types)
    {
        $this->container['email_address_types'] = $email_address_types;

        return $this;
    }

    /**
     * Gets energy_class_options
     *
     * @return \Swagger\Client\Model\EnergyClassOption[]
     */
    public function getEnergyClassOptions()
    {
        return $this->container['energy_class_options'];
    }

    /**
     * Sets energy_class_options
     *
     * @param \Swagger\Client\Model\EnergyClassOption[] $energy_class_options EnergyClass Options (E.g. 'APLUSPLUS', 'A', 'B').
     *
     * @return $this
     */
    public function setEnergyClassOptions($energy_class_options)
    {
        $this->container['energy_class_options'] = $energy_class_options;

        return $this;
    }

    /**
     * Gets energy_source_options
     *
     * @return \Swagger\Client\Model\EnergySourceOption[]
     */
    public function getEnergySourceOptions()
    {
        return $this->container['energy_source_options'];
    }

    /**
     * Sets energy_source_options
     *
     * @param \Swagger\Client\Model\EnergySourceOption[] $energy_source_options EnergySource Options (E.g. 'gas', 'oil', 'electricity'). Dutch: KetelBrandstof
     *
     * @return $this
     */
    public function setEnergySourceOptions($energy_source_options)
    {
        $this->container['energy_source_options'] = $energy_source_options;

        return $this;
    }

    /**
     * Gets exclusive_status_options
     *
     * @return \Swagger\Client\Model\ExclusiveStatusOption[]
     */
    public function getExclusiveStatusOptions()
    {
        return $this->container['exclusive_status_options'];
    }

    /**
     * Sets exclusive_status_options
     *
     * @param \Swagger\Client\Model\ExclusiveStatusOption[] $exclusive_status_options ExclusiveStatus Options (E.g. 'Exclusive', 'Non-exclusive').
     *
     * @return $this
     */
    public function setExclusiveStatusOptions($exclusive_status_options)
    {
        $this->container['exclusive_status_options'] = $exclusive_status_options;

        return $this;
    }

    /**
     * Gets facility_options
     *
     * @return \Swagger\Client\Model\FacilityOption[]
     */
    public function getFacilityOptions()
    {
        return $this->container['facility_options'];
    }

    /**
     * Sets facility_options
     *
     * @param \Swagger\Client\Model\FacilityOption[] $facility_options Facility Options (E.g. 'Recessed lighting', 'elevator', 'opening windows'). Dutch: Opleveringsnivo / Kantoorvoorziening
     *
     * @return $this
     */
    public function setFacilityOptions($facility_options)
    {
        $this->container['facility_options'] = $facility_options;

        return $this;
    }

    /**
     * Gets family_income_options
     *
     * @return \Swagger\Client\Model\FamilyIncomeOption[]
     */
    public function getFamilyIncomeOptions()
    {
        return $this->container['family_income_options'];
    }

    /**
     * Sets family_income_options
     *
     * @param \Swagger\Client\Model\FamilyIncomeOption[] $family_income_options Family income options (e.g. 'less than minimum', 'minimum to modal')
     *
     * @return $this
     */
    public function setFamilyIncomeOptions($family_income_options)
    {
        $this->container['family_income_options'] = $family_income_options;

        return $this;
    }

    /**
     * Gets fastfood_hospitality_sector_types
     *
     * @return \Swagger\Client\Model\FastfoodHospitalitySectorTypeOption[]
     */
    public function getFastfoodHospitalitySectorTypes()
    {
        return $this->container['fastfood_hospitality_sector_types'];
    }

    /**
     * Sets fastfood_hospitality_sector_types
     *
     * @param \Swagger\Client\Model\FastfoodHospitalitySectorTypeOption[] $fastfood_hospitality_sector_types Fastfood hospitality types (E.g. 'Snackbar', 'Ice Cream Parlor')
     *
     * @return $this
     */
    public function setFastfoodHospitalitySectorTypes($fastfood_hospitality_sector_types)
    {
        $this->container['fastfood_hospitality_sector_types'] = $fastfood_hospitality_sector_types;

        return $this;
    }

    /**
     * Gets fixed_variable_options
     *
     * @return \Swagger\Client\Model\FixedVariableOption[]
     */
    public function getFixedVariableOptions()
    {
        return $this->container['fixed_variable_options'];
    }

    /**
     * Sets fixed_variable_options
     *
     * @param \Swagger\Client\Model\FixedVariableOption[] $fixed_variable_options FixedVariable options (E.g. 'Variable', 'Fixed')
     *
     * @return $this
     */
    public function setFixedVariableOptions($fixed_variable_options)
    {
        $this->container['fixed_variable_options'] = $fixed_variable_options;

        return $this;
    }

    /**
     * Gets floor_type_options
     *
     * @return \Swagger\Client\Model\FloorTypeOption[]
     */
    public function getFloorTypeOptions()
    {
        return $this->container['floor_type_options'];
    }

    /**
     * Sets floor_type_options
     *
     * @param \Swagger\Client\Model\FloorTypeOption[] $floor_type_options Type of floor options (E.g. 'Ground floor', 'basement')
     *
     * @return $this
     */
    public function setFloorTypeOptions($floor_type_options)
    {
        $this->container['floor_type_options'] = $floor_type_options;

        return $this;
    }

    /**
     * Gets furnishing_options
     *
     * @return \Swagger\Client\Model\FurnishingOption[]
     */
    public function getFurnishingOptions()
    {
        return $this->container['furnishing_options'];
    }

    /**
     * Sets furnishing_options
     *
     * @param \Swagger\Client\Model\FurnishingOption[] $furnishing_options Furnishing Options (E.g. 'Furnished', 'Upholstered', 'As a shell'). Dutch: Inrichting (gemeubilieerd, gestoffeerd, kaal).
     *
     * @return $this
     */
    public function setFurnishingOptions($furnishing_options)
    {
        $this->container['furnishing_options'] = $furnishing_options;

        return $this;
    }

    /**
     * Gets garage_type_options
     *
     * @return \Swagger\Client\Model\GarageTypeOption[]
     */
    public function getGarageTypeOptions()
    {
        return $this->container['garage_type_options'];
    }

    /**
     * Sets garage_type_options
     *
     * @param \Swagger\Client\Model\GarageTypeOption[] $garage_type_options Garage Type Options (E.g. 'Attached stone', 'Carport', 'Garagebox'). Dutch: TypeGarage
     *
     * @return $this
     */
    public function setGarageTypeOptions($garage_type_options)
    {
        $this->container['garage_type_options'] = $garage_type_options;

        return $this;
    }

    /**
     * Gets garden_quality_options
     *
     * @return \Swagger\Client\Model\GardenQualityOption[]
     */
    public function getGardenQualityOptions()
    {
        return $this->container['garden_quality_options'];
    }

    /**
     * Sets garden_quality_options
     *
     * @param \Swagger\Client\Model\GardenQualityOption[] $garden_quality_options Garden Quality Options (E.g. 'Neglected', 'Beautifully landscaped', 'Well maintained'). Dutch: KwaliteitTuin
     *
     * @return $this
     */
    public function setGardenQualityOptions($garden_quality_options)
    {
        $this->container['garden_quality_options'] = $garden_quality_options;

        return $this;
    }

    /**
     * Gets garden_type_options
     *
     * @return \Swagger\Client\Model\GardenTypeOption[]
     */
    public function getGardenTypeOptions()
    {
        return $this->container['garden_type_options'];
    }

    /**
     * Sets garden_type_options
     *
     * @param \Swagger\Client\Model\GardenTypeOption[] $garden_type_options Garden type Options (E.g. 'Back yard', 'Front yard', 'Patio atrium'). Dutch: TypeTuin
     *
     * @return $this
     */
    public function setGardenTypeOptions($garden_type_options)
    {
        $this->container['garden_type_options'] = $garden_type_options;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Swagger\Client\Model\GenderOption[]
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Swagger\Client\Model\GenderOption[] $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets ground_lease_period_options
     *
     * @return \Swagger\Client\Model\GroundLeasePeriodOption[]
     */
    public function getGroundLeasePeriodOptions()
    {
        return $this->container['ground_lease_period_options'];
    }

    /**
     * Sets ground_lease_period_options
     *
     * @param \Swagger\Client\Model\GroundLeasePeriodOption[] $ground_lease_period_options GroundLeasePeriod Options (E.g. 'Eternal', 'Temporary', 'Progressing'). Dutch: Erfpachtduur
     *
     * @return $this
     */
    public function setGroundLeasePeriodOptions($ground_lease_period_options)
    {
        $this->container['ground_lease_period_options'] = $ground_lease_period_options;

        return $this;
    }

    /**
     * Gets ground_ownership_type_options
     *
     * @return \Swagger\Client\Model\GroundOwnershipTypeOption[]
     */
    public function getGroundOwnershipTypeOptions()
    {
        return $this->container['ground_ownership_type_options'];
    }

    /**
     * Sets ground_ownership_type_options
     *
     * @param \Swagger\Client\Model\GroundOwnershipTypeOption[] $ground_ownership_type_options Ground Ownership Type Options (E.g. 'Full ownership', 'Ground lease'). Dutch: TypeGrondEigendom
     *
     * @return $this
     */
    public function setGroundOwnershipTypeOptions($ground_ownership_type_options)
    {
        $this->container['ground_ownership_type_options'] = $ground_ownership_type_options;

        return $this;
    }

    /**
     * Gets ground_usage_options
     *
     * @return \Swagger\Client\Model\GroundUsageOption[]
     */
    public function getGroundUsageOptions()
    {
        return $this->container['ground_usage_options'];
    }

    /**
     * Sets ground_usage_options
     *
     * @param \Swagger\Client\Model\GroundUsageOption[] $ground_usage_options GroundUsage Options (E.g. 'Aspargus', 'Forest', 'Fruit').
     *
     * @return $this
     */
    public function setGroundUsageOptions($ground_usage_options)
    {
        $this->container['ground_usage_options'] = $ground_usage_options;

        return $this;
    }

    /**
     * Gets heating_method_options
     *
     * @return \Swagger\Client\Model\HeatingMethodOption[]
     */
    public function getHeatingMethodOptions()
    {
        return $this->container['heating_method_options'];
    }

    /**
     * Sets heating_method_options
     *
     * @param \Swagger\Client\Model\HeatingMethodOption[] $heating_method_options Heating method Options (E.g. 'Central fireplace', 'Coal stove', 'Underfloor heating'). Dutch: Verwarming
     *
     * @return $this
     */
    public function setHeatingMethodOptions($heating_method_options)
    {
        $this->container['heating_method_options'] = $heating_method_options;

        return $this;
    }

    /**
     * Gets heating_water_method_options
     *
     * @return \Swagger\Client\Model\HeatingWaterMethodOption[]
     */
    public function getHeatingWaterMethodOptions()
    {
        return $this->container['heating_water_method_options'];
    }

    /**
     * Sets heating_water_method_options
     *
     * @param \Swagger\Client\Model\HeatingWaterMethodOption[] $heating_water_method_options HeatingWaterMethod Options (E.g. 'Central heating system', 'Geyser', 'Gas boiler'). Dutch: SoortWarmWater
     *
     * @return $this
     */
    public function setHeatingWaterMethodOptions($heating_water_method_options)
    {
        $this->container['heating_water_method_options'] = $heating_water_method_options;

        return $this;
    }

    /**
     * Gets horeca_sector_type_options
     *
     * @return \Swagger\Client\Model\HorecaSectorTypeOption[]
     */
    public function getHorecaSectorTypeOptions()
    {
        return $this->container['horeca_sector_type_options'];
    }

    /**
     * Sets horeca_sector_type_options
     *
     * @param \Swagger\Client\Model\HorecaSectorTypeOption[] $horeca_sector_type_options HorecaSectorTypes options (E.g. 'Beverages', 'Fastfood')
     *
     * @return $this
     */
    public function setHorecaSectorTypeOptions($horeca_sector_type_options)
    {
        $this->container['horeca_sector_type_options'] = $horeca_sector_type_options;

        return $this;
    }

    /**
     * Gets horse_company_subtypes
     *
     * @return \Swagger\Client\Model\HorseCompanySubtypeOption[]
     */
    public function getHorseCompanySubtypes()
    {
        return $this->container['horse_company_subtypes'];
    }

    /**
     * Sets horse_company_subtypes
     *
     * @param \Swagger\Client\Model\HorseCompanySubtypeOption[] $horse_company_subtypes Horse Company Subtypes (E.g. 'RidingSchool', 'Pension').
     *
     * @return $this
     */
    public function setHorseCompanySubtypes($horse_company_subtypes)
    {
        $this->container['horse_company_subtypes'] = $horse_company_subtypes;

        return $this;
    }

    /**
     * Gets horse_trough_location_options
     *
     * @return \Swagger\Client\Model\HorseTroughLocationOption[]
     */
    public function getHorseTroughLocationOptions()
    {
        return $this->container['horse_trough_location_options'];
    }

    /**
     * Sets horse_trough_location_options
     *
     * @param \Swagger\Client\Model\HorseTroughLocationOption[] $horse_trough_location_options HorseTroughLocation Options (E.g. 'Indoor', 'Outdoor'). Dutch: Paardenbak
     *
     * @return $this
     */
    public function setHorseTroughLocationOptions($horse_trough_location_options)
    {
        $this->container['horse_trough_location_options'] = $horse_trough_location_options;

        return $this;
    }

    /**
     * Gets horticultural_company_types
     *
     * @return \Swagger\Client\Model\HorticulturalCompanyTypeOption[]
     */
    public function getHorticulturalCompanyTypes()
    {
        return $this->container['horticultural_company_types'];
    }

    /**
     * Sets horticultural_company_types
     *
     * @param \Swagger\Client\Model\HorticulturalCompanyTypeOption[] $horticultural_company_types Horticultural Company Types (E.g. 'Greenhouse', 'FruitGrowing').
     *
     * @return $this
     */
    public function setHorticulturalCompanyTypes($horticultural_company_types)
    {
        $this->container['horticultural_company_types'] = $horticultural_company_types;

        return $this;
    }

    /**
     * Gets hotel_hospitality_sector_types
     *
     * @return \Swagger\Client\Model\HotelHospitalitySectorTypeOption[]
     */
    public function getHotelHospitalitySectorTypes()
    {
        return $this->container['hotel_hospitality_sector_types'];
    }

    /**
     * Sets hotel_hospitality_sector_types
     *
     * @param \Swagger\Client\Model\HotelHospitalitySectorTypeOption[] $hotel_hospitality_sector_types Hotel hospitality types (E.g. 'Hotel', 'Hotel Garni')
     *
     * @return $this
     */
    public function setHotelHospitalitySectorTypes($hotel_hospitality_sector_types)
    {
        $this->container['hotel_hospitality_sector_types'] = $hotel_hospitality_sector_types;

        return $this;
    }

    /**
     * Gets house_characteristics
     *
     * @return \Swagger\Client\Model\HouseCharacteristicOption[]
     */
    public function getHouseCharacteristics()
    {
        return $this->container['house_characteristics'];
    }

    /**
     * Sets house_characteristics
     *
     * @param \Swagger\Client\Model\HouseCharacteristicOption[] $house_characteristics House characteristics. (E.g. 'DikeHouse', 'SplitLevelHouse', 'DriveInHouse').
     *
     * @return $this
     */
    public function setHouseCharacteristics($house_characteristics)
    {
        $this->container['house_characteristics'] = $house_characteristics;

        return $this;
    }

    /**
     * Gets household_composition_options
     *
     * @return \Swagger\Client\Model\HouseholdCompositionOption[]
     */
    public function getHouseholdCompositionOptions()
    {
        return $this->container['household_composition_options'];
    }

    /**
     * Sets household_composition_options
     *
     * @param \Swagger\Client\Model\HouseholdCompositionOption[] $household_composition_options Household Composition options (E.g. 'Refuses', 'Single parent with kid living at home').
     *
     * @return $this
     */
    public function setHouseholdCompositionOptions($household_composition_options)
    {
        $this->container['household_composition_options'] = $household_composition_options;

        return $this;
    }

    /**
     * Gets house_sorts
     *
     * @return \Swagger\Client\Model\HouseSortOption[]
     */
    public function getHouseSorts()
    {
        return $this->container['house_sorts'];
    }

    /**
     * Sets house_sorts
     *
     * @param \Swagger\Client\Model\HouseSortOption[] $house_sorts House sorts.  (E.g. 'Single Family House', 'Mansion', 'Villa').
     *
     * @return $this
     */
    public function setHouseSorts($house_sorts)
    {
        $this->container['house_sorts'] = $house_sorts;

        return $this;
    }

    /**
     * Gets house_types
     *
     * @return \Swagger\Client\Model\HouseTypeOption[]
     */
    public function getHouseTypes()
    {
        return $this->container['house_types'];
    }

    /**
     * Sets house_types
     *
     * @param \Swagger\Client\Model\HouseTypeOption[] $house_types House types.  (E.g. 'DetachedHous', 'LinkedHouse', 'SemiDetachedHouseOneRoof').
     *
     * @return $this
     */
    public function setHouseTypes($house_types)
    {
        $this->container['house_types'] = $house_types;

        return $this;
    }

    /**
     * Gets identification_types
     *
     * @return \Swagger\Client\Model\IdentificationTypeOption[]
     */
    public function getIdentificationTypes()
    {
        return $this->container['identification_types'];
    }

    /**
     * Sets identification_types
     *
     * @param \Swagger\Client\Model\IdentificationTypeOption[] $identification_types identification_types
     *
     * @return $this
     */
    public function setIdentificationTypes($identification_types)
    {
        $this->container['identification_types'] = $identification_types;

        return $this;
    }

    /**
     * Gets industrial_building_facility_options
     *
     * @return \Swagger\Client\Model\IndustrialBuildingFacilityOption[]
     */
    public function getIndustrialBuildingFacilityOptions()
    {
        return $this->container['industrial_building_facility_options'];
    }

    /**
     * Sets industrial_building_facility_options
     *
     * @param \Swagger\Client\Model\IndustrialBuildingFacilityOption[] $industrial_building_facility_options IndustrialBuildingFacility Options (E.g. 'Skylights', 'LoadingDocks').
     *
     * @return $this
     */
    public function setIndustrialBuildingFacilityOptions($industrial_building_facility_options)
    {
        $this->container['industrial_building_facility_options'] = $industrial_building_facility_options;

        return $this;
    }

    /**
     * Gets investment_type_options
     *
     * @return \Swagger\Client\Model\InvestmentTypeOption[]
     */
    public function getInvestmentTypeOptions()
    {
        return $this->container['investment_type_options'];
    }

    /**
     * Sets investment_type_options
     *
     * @param \Swagger\Client\Model\InvestmentTypeOption[] $investment_type_options InvestmentTypes options (E.g. 'Retail', 'Office', 'Residential')
     *
     * @return $this
     */
    public function setInvestmentTypeOptions($investment_type_options)
    {
        $this->container['investment_type_options'] = $investment_type_options;

        return $this;
    }

    /**
     * Gets invoice_due_terms
     *
     * @return \Swagger\Client\Model\InvoiceDueTermOption[]
     */
    public function getInvoiceDueTerms()
    {
        return $this->container['invoice_due_terms'];
    }

    /**
     * Sets invoice_due_terms
     *
     * @param \Swagger\Client\Model\InvoiceDueTermOption[] $invoice_due_terms invoice_due_terms
     *
     * @return $this
     */
    public function setInvoiceDueTerms($invoice_due_terms)
    {
        $this->container['invoice_due_terms'] = $invoice_due_terms;

        return $this;
    }

    /**
     * Gets invoice_statuses
     *
     * @return \Swagger\Client\Model\InvoiceStatusOption[]
     */
    public function getInvoiceStatuses()
    {
        return $this->container['invoice_statuses'];
    }

    /**
     * Sets invoice_statuses
     *
     * @param \Swagger\Client\Model\InvoiceStatusOption[] $invoice_statuses invoice_statuses
     *
     * @return $this
     */
    public function setInvoiceStatuses($invoice_statuses)
    {
        $this->container['invoice_statuses'] = $invoice_statuses;

        return $this;
    }

    /**
     * Gets invoice_types
     *
     * @return \Swagger\Client\Model\InvoiceTypeOption[]
     */
    public function getInvoiceTypes()
    {
        return $this->container['invoice_types'];
    }

    /**
     * Sets invoice_types
     *
     * @param \Swagger\Client\Model\InvoiceTypeOption[] $invoice_types invoice_types
     *
     * @return $this
     */
    public function setInvoiceTypes($invoice_types)
    {
        $this->container['invoice_types'] = $invoice_types;

        return $this;
    }

    /**
     * Gets isolation_type_options
     *
     * @return \Swagger\Client\Model\IsolationTypeOption[]
     */
    public function getIsolationTypeOptions()
    {
        return $this->container['isolation_type_options'];
    }

    /**
     * Sets isolation_type_options
     *
     * @param \Swagger\Client\Model\IsolationTypeOption[] $isolation_type_options IsolationType Options (E.g. 'Roof', 'Wall', 'Floor'). Dutch: IsolatieVorm
     *
     * @return $this
     */
    public function setIsolationTypeOptions($isolation_type_options)
    {
        $this->container['isolation_type_options'] = $isolation_type_options;

        return $this;
    }

    /**
     * Gets kitchen_facility_options
     *
     * @return \Swagger\Client\Model\KitchenFacilityOption[]
     */
    public function getKitchenFacilityOptions()
    {
        return $this->container['kitchen_facility_options'];
    }

    /**
     * Sets kitchen_facility_options
     *
     * @param \Swagger\Client\Model\KitchenFacilityOption[] $kitchen_facility_options Kitchen facility options (E.g. 'Built in equipment', 'Cooking island')
     *
     * @return $this
     */
    public function setKitchenFacilityOptions($kitchen_facility_options)
    {
        $this->container['kitchen_facility_options'] = $kitchen_facility_options;

        return $this;
    }

    /**
     * Gets kitchen_types
     *
     * @return \Swagger\Client\Model\KitchenTypeOption[]
     */
    public function getKitchenTypes()
    {
        return $this->container['kitchen_types'];
    }

    /**
     * Sets kitchen_types
     *
     * @param \Swagger\Client\Model\KitchenTypeOption[] $kitchen_types Kitchen Types (E.g. 'Open', 'Dining')]
     *
     * @return $this
     */
    public function setKitchenTypes($kitchen_types)
    {
        $this->container['kitchen_types'] = $kitchen_types;

        return $this;
    }

    /**
     * Gets land_property_sub_type_options
     *
     * @return \Swagger\Client\Model\LandPropertySubTypeOption[]
     */
    public function getLandPropertySubTypeOptions()
    {
        return $this->container['land_property_sub_type_options'];
    }

    /**
     * Sets land_property_sub_type_options
     *
     * @param \Swagger\Client\Model\LandPropertySubTypeOption[] $land_property_sub_type_options LandPropertySubType Options (E.g. 'Forest land', 'Land by waters', 'Social land'). Dutch: SubTypeLand
     *
     * @return $this
     */
    public function setLandPropertySubTypeOptions($land_property_sub_type_options)
    {
        $this->container['land_property_sub_type_options'] = $land_property_sub_type_options;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \Swagger\Client\Model\LanguageSpokenOption[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Swagger\Client\Model\LanguageSpokenOption[] $languages languages
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets leasehold_owner_type_options
     *
     * @return \Swagger\Client\Model\LeaseholdOwnerTypeOption[]
     */
    public function getLeaseholdOwnerTypeOptions()
    {
        return $this->container['leasehold_owner_type_options'];
    }

    /**
     * Sets leasehold_owner_type_options
     *
     * @param \Swagger\Client\Model\LeaseholdOwnerTypeOption[] $leasehold_owner_type_options LeaseholdOwnerType Options (E.g. 'Private', 'Municipality' or 'Other'.
     *
     * @return $this
     */
    public function setLeaseholdOwnerTypeOptions($leasehold_owner_type_options)
    {
        $this->container['leasehold_owner_type_options'] = $leasehold_owner_type_options;

        return $this;
    }

    /**
     * Gets lease_term_unit_options
     *
     * @return \Swagger\Client\Model\LeaseTermUnitOption[]
     */
    public function getLeaseTermUnitOptions()
    {
        return $this->container['lease_term_unit_options'];
    }

    /**
     * Sets lease_term_unit_options
     *
     * @param \Swagger\Client\Model\LeaseTermUnitOption[] $lease_term_unit_options LeaseTermUnit Options (E.g. 'Days', 'Weeks' or 'Months'.
     *
     * @return $this
     */
    public function setLeaseTermUnitOptions($lease_term_unit_options)
    {
        $this->container['lease_term_unit_options'] = $lease_term_unit_options;

        return $this;
    }

    /**
     * Gets legal_status_options
     *
     * @return \Swagger\Client\Model\LegalStatusOption[]
     */
    public function getLegalStatusOptions()
    {
        return $this->container['legal_status_options'];
    }

    /**
     * Sets legal_status_options
     *
     * @param \Swagger\Client\Model\LegalStatusOption[] $legal_status_options LegalStatus Options (E.g. 'shared ownership', 'new construction', 'Condominium'). Dutch: JuridischeStatus
     *
     * @return $this
     */
    public function setLegalStatusOptions($legal_status_options)
    {
        $this->container['legal_status_options'] = $legal_status_options;

        return $this;
    }

    /**
     * Gets leisure_facility_type_options
     *
     * @return \Swagger\Client\Model\LeisureFacilityOption[]
     */
    public function getLeisureFacilityTypeOptions()
    {
        return $this->container['leisure_facility_type_options'];
    }

    /**
     * Sets leisure_facility_type_options
     *
     * @param \Swagger\Client\Model\LeisureFacilityOption[] $leisure_facility_type_options LeisureFacilityTypes options (E.g. 'Mini market', 'Toilet buildings')
     *
     * @return $this
     */
    public function setLeisureFacilityTypeOptions($leisure_facility_type_options)
    {
        $this->container['leisure_facility_type_options'] = $leisure_facility_type_options;

        return $this;
    }

    /**
     * Gets leisure_type_options
     *
     * @return \Swagger\Client\Model\LeisureTypeOption[]
     */
    public function getLeisureTypeOptions()
    {
        return $this->container['leisure_type_options'];
    }

    /**
     * Sets leisure_type_options
     *
     * @param \Swagger\Client\Model\LeisureTypeOption[] $leisure_type_options LeisureType options (E.g. 'Camping', 'Bungalow park', 'Daytime operation')
     *
     * @return $this
     */
    public function setLeisureTypeOptions($leisure_type_options)
    {
        $this->container['leisure_type_options'] = $leisure_type_options;

        return $this;
    }

    /**
     * Gets listing_types
     *
     * @return \Swagger\Client\Model\ListingTypeOption[]
     */
    public function getListingTypes()
    {
        return $this->container['listing_types'];
    }

    /**
     * Sets listing_types
     *
     * @param \Swagger\Client\Model\ListingTypeOption[] $listing_types Available isting types (e.g. 'Woonhuis', 'Appartement' or 'Parkeergelegenheid').
     *
     * @return $this
     */
    public function setListingTypes($listing_types)
    {
        $this->container['listing_types'] = $listing_types;

        return $this;
    }

    /**
     * Gets living_room_types
     *
     * @return \Swagger\Client\Model\LivingRoomTypeOption[]
     */
    public function getLivingRoomTypes()
    {
        return $this->container['living_room_types'];
    }

    /**
     * Sets living_room_types
     *
     * @param \Swagger\Client\Model\LivingRoomTypeOption[] $living_room_types Living room types (E.g. 'T-room', 'U-room')]
     *
     * @return $this
     */
    public function setLivingRoomTypes($living_room_types)
    {
        $this->container['living_room_types'] = $living_room_types;

        return $this;
    }

    /**
     * Gets location_places
     *
     * @return \Swagger\Client\Model\LocationPlaceOption[]
     */
    public function getLocationPlaces()
    {
        return $this->container['location_places'];
    }

    /**
     * Sets location_places
     *
     * @param \Swagger\Client\Model\LocationPlaceOption[] $location_places Location Places Periods (E.g. 'OnBusyStreet', 'NearRailwayStation').
     *
     * @return $this
     */
    public function setLocationPlaces($location_places)
    {
        $this->container['location_places'] = $location_places;

        return $this;
    }

    /**
     * Gets match_mail_period_options
     *
     * @return \Swagger\Client\Model\MatchMailPeriodOption[]
     */
    public function getMatchMailPeriodOptions()
    {
        return $this->container['match_mail_period_options'];
    }

    /**
     * Sets match_mail_period_options
     *
     * @param \Swagger\Client\Model\MatchMailPeriodOption[] $match_mail_period_options Matchmail period options (E.g. 'Never', 'Daily')
     *
     * @return $this
     */
    public function setMatchMailPeriodOptions($match_mail_period_options)
    {
        $this->container['match_mail_period_options'] = $match_mail_period_options;

        return $this;
    }

    /**
     * Gets match_mail_trigger_options
     *
     * @return \Swagger\Client\Model\MatchMailTriggerOption[]
     */
    public function getMatchMailTriggerOptions()
    {
        return $this->container['match_mail_trigger_options'];
    }

    /**
     * Sets match_mail_trigger_options
     *
     * @param \Swagger\Client\Model\MatchMailTriggerOption[] $match_mail_trigger_options Matchmail trigger options (E.g. 'AllChanges', 'PriceChanges')
     *
     * @return $this
     */
    public function setMatchMailTriggerOptions($match_mail_trigger_options)
    {
        $this->container['match_mail_trigger_options'] = $match_mail_trigger_options;

        return $this;
    }

    /**
     * Gets measurment_options
     *
     * @return \Swagger\Client\Model\MeasurementUnitOption[]
     */
    public function getMeasurmentOptions()
    {
        return $this->container['measurment_options'];
    }

    /**
     * Sets measurment_options
     *
     * @param \Swagger\Client\Model\MeasurementUnitOption[] $measurment_options Measurment unit optionss (E.g. 'Metric', 'Imperial')
     *
     * @return $this
     */
    public function setMeasurmentOptions($measurment_options)
    {
        $this->container['measurment_options'] = $measurment_options;

        return $this;
    }

    /**
     * Gets media_contract_status_options
     *
     * @return \Swagger\Client\Model\MediaContractStatusOption[]
     */
    public function getMediaContractStatusOptions()
    {
        return $this->container['media_contract_status_options'];
    }

    /**
     * Sets media_contract_status_options
     *
     * @param \Swagger\Client\Model\MediaContractStatusOption[] $media_contract_status_options Media Contract status options (E.g. 'Inactive', 'PendingActivation', 'Active')
     *
     * @return $this
     */
    public function setMediaContractStatusOptions($media_contract_status_options)
    {
        $this->container['media_contract_status_options'] = $media_contract_status_options;

        return $this;
    }

    /**
     * Gets media_partner_categories
     *
     * @return \Swagger\Client\Model\MediaPartnerCategoryOption[]
     */
    public function getMediaPartnerCategories()
    {
        return $this->container['media_partner_categories'];
    }

    /**
     * Sets media_partner_categories
     *
     * @param \Swagger\Client\Model\MediaPartnerCategoryOption[] $media_partner_categories MediaPartner Categories (E.g. 'Other', 'Portals', 'Printing').]
     *
     * @return $this
     */
    public function setMediaPartnerCategories($media_partner_categories)
    {
        $this->container['media_partner_categories'] = $media_partner_categories;

        return $this;
    }

    /**
     * Gets mixed_forms
     *
     * @return \Swagger\Client\Model\MixedFormOption[]
     */
    public function getMixedForms()
    {
        return $this->container['mixed_forms'];
    }

    /**
     * Sets mixed_forms
     *
     * @param \Swagger\Client\Model\MixedFormOption[] $mixed_forms Mengvormen (E.g. 'MGE constructie', 'HomeSaleGuarantee', 'uitpondproject').]
     *
     * @return $this
     */
    public function setMixedForms($mixed_forms)
    {
        $this->container['mixed_forms'] = $mixed_forms;

        return $this;
    }

    /**
     * Gets moving_reason_options
     *
     * @return \Swagger\Client\Model\MovingReasonOption[]
     */
    public function getMovingReasonOptions()
    {
        return $this->container['moving_reason_options'];
    }

    /**
     * Sets moving_reason_options
     *
     * @param \Swagger\Client\Model\MovingReasonOption[] $moving_reason_options Moving reason options (E.g. 'too small', 'too big')
     *
     * @return $this
     */
    public function setMovingReasonOptions($moving_reason_options)
    {
        $this->container['moving_reason_options'] = $moving_reason_options;

        return $this;
    }

    /**
     * Gets nature_registration_options
     *
     * @return \Swagger\Client\Model\NatureRegistrationOption[]
     */
    public function getNatureRegistrationOptions()
    {
        return $this->container['nature_registration_options'];
    }

    /**
     * Sets nature_registration_options
     *
     * @param \Swagger\Client\Model\NatureRegistrationOption[] $nature_registration_options Nature of registration options (E.g. 'Voluntarily for personal reasons', 'Forced due to business economic reasons')
     *
     * @return $this
     */
    public function setNatureRegistrationOptions($nature_registration_options)
    {
        $this->container['nature_registration_options'] = $nature_registration_options;

        return $this;
    }

    /**
     * Gets notification_date_format_options
     *
     * @return \Swagger\Client\Model\NotificationDateFormatOption[]
     */
    public function getNotificationDateFormatOptions()
    {
        return $this->container['notification_date_format_options'];
    }

    /**
     * Sets notification_date_format_options
     *
     * @param \Swagger\Client\Model\NotificationDateFormatOption[] $notification_date_format_options Notification date format options (E.g. 'week', 'month')
     *
     * @return $this
     */
    public function setNotificationDateFormatOptions($notification_date_format_options)
    {
        $this->container['notification_date_format_options'] = $notification_date_format_options;

        return $this;
    }

    /**
     * Gets offer_type_options
     *
     * @return \Swagger\Client\Model\OfferTypeOption[]
     */
    public function getOfferTypeOptions()
    {
        return $this->container['offer_type_options'];
    }

    /**
     * Sets offer_type_options
     *
     * @param \Swagger\Client\Model\OfferTypeOption[] $offer_type_options Offer type options (E.g. 'ForSale', 'ForRent')
     *
     * @return $this
     */
    public function setOfferTypeOptions($offer_type_options)
    {
        $this->container['offer_type_options'] = $offer_type_options;

        return $this;
    }

    /**
     * Gets open_house_recurrency_options
     *
     * @return \Swagger\Client\Model\OpenHouseRecurrenceOption[]
     */
    public function getOpenHouseRecurrencyOptions()
    {
        return $this->container['open_house_recurrency_options'];
    }

    /**
     * Sets open_house_recurrency_options
     *
     * @param \Swagger\Client\Model\OpenHouseRecurrenceOption[] $open_house_recurrency_options OpenHouseRecurrence Options (E.g. 'Single', 'Weekly'). Dutch: OpenHuisOptie
     *
     * @return $this
     */
    public function setOpenHouseRecurrencyOptions($open_house_recurrency_options)
    {
        $this->container['open_house_recurrency_options'] = $open_house_recurrency_options;

        return $this;
    }

    /**
     * Gets orientations
     *
     * @return \Swagger\Client\Model\OrientationOption[]
     */
    public function getOrientations()
    {
        return $this->container['orientations'];
    }

    /**
     * Sets orientations
     *
     * @param \Swagger\Client\Model\OrientationOption[] $orientations Orientations (E.g. 'North', 'South')]
     *
     * @return $this
     */
    public function setOrientations($orientations)
    {
        $this->container['orientations'] = $orientations;

        return $this;
    }

    /**
     * Gets ownership_options
     *
     * @return \Swagger\Client\Model\OwnershipOption[]
     */
    public function getOwnershipOptions()
    {
        return $this->container['ownership_options'];
    }

    /**
     * Sets ownership_options
     *
     * @param \Swagger\Client\Model\OwnershipOption[] $ownership_options Ownership Options (E.g. 'owned', 'rented', 'leased'). Dutch: KetelEigendom
     *
     * @return $this
     */
    public function setOwnershipOptions($ownership_options)
    {
        $this->container['ownership_options'] = $ownership_options;

        return $this;
    }

    /**
     * Gets ownership_type_options
     *
     * @return \Swagger\Client\Model\OwnershipTypeOption[]
     */
    public function getOwnershipTypeOptions()
    {
        return $this->container['ownership_type_options'];
    }

    /**
     * Sets ownership_type_options
     *
     * @param \Swagger\Client\Model\OwnershipTypeOption[] $ownership_type_options Ownership Type Options (E.g. 'Full ownership', 'Sublease', 'Use and occupancy'). Dutch: SoortEigendomsGegeven
     *
     * @return $this
     */
    public function setOwnershipTypeOptions($ownership_type_options)
    {
        $this->container['ownership_type_options'] = $ownership_type_options;

        return $this;
    }

    /**
     * Gets parking_facility_options
     *
     * @return \Swagger\Client\Model\ParkingFacilityOption[]
     */
    public function getParkingFacilityOptions()
    {
        return $this->container['parking_facility_options'];
    }

    /**
     * Sets parking_facility_options
     *
     * @param \Swagger\Client\Model\ParkingFacilityOption[] $parking_facility_options Parking Facility Options (E.g. 'Public parking', 'Paid parking', 'Car park'). Dutch: Parkeerfaciliteit, zoals betaald parkeren, parkeren met een vergunning.
     *
     * @return $this
     */
    public function setParkingFacilityOptions($parking_facility_options)
    {
        $this->container['parking_facility_options'] = $parking_facility_options;

        return $this;
    }

    /**
     * Gets parking_type_options
     *
     * @return \Swagger\Client\Model\ParkingTypeOption[]
     */
    public function getParkingTypeOptions()
    {
        return $this->container['parking_type_options'];
    }

    /**
     * Sets parking_type_options
     *
     * @param \Swagger\Client\Model\ParkingTypeOption[] $parking_type_options ParkingType Options (E.g. 'Public parking', 'Paid parking', 'Car park'). Dutch: TypeParkeerfaciliteit OR TypeParkeergelegenheid ?!?!
     *
     * @return $this
     */
    public function setParkingTypeOptions($parking_type_options)
    {
        $this->container['parking_type_options'] = $parking_type_options;

        return $this;
    }

    /**
     * Gets pavement_type_options
     *
     * @return \Swagger\Client\Model\PavementTypeOption[]
     */
    public function getPavementTypeOptions()
    {
        return $this->container['pavement_type_options'];
    }

    /**
     * Sets pavement_type_options
     *
     * @param \Swagger\Client\Model\PavementTypeOption[] $pavement_type_options Pavement types (E.g. 'Bitumen', 'Pavers')
     *
     * @return $this
     */
    public function setPavementTypeOptions($pavement_type_options)
    {
        $this->container['pavement_type_options'] = $pavement_type_options;

        return $this;
    }

    /**
     * Gets peculiarity_options
     *
     * @return \Swagger\Client\Model\PeculiarityOption[]
     */
    public function getPeculiarityOptions()
    {
        return $this->container['peculiarity_options'];
    }

    /**
     * Sets peculiarity_options
     *
     * @param \Swagger\Client\Model\PeculiarityOption[] $peculiarity_options Peculiarity Options (E.g. 'Monumental Building', 'Padded', 'Partially Leased').]
     *
     * @return $this
     */
    public function setPeculiarityOptions($peculiarity_options)
    {
        $this->container['peculiarity_options'] = $peculiarity_options;

        return $this;
    }

    /**
     * Gets phone_number_types
     *
     * @return \Swagger\Client\Model\PhoneNumberTypeOption[]
     */
    public function getPhoneNumberTypes()
    {
        return $this->container['phone_number_types'];
    }

    /**
     * Sets phone_number_types
     *
     * @param \Swagger\Client\Model\PhoneNumberTypeOption[] $phone_number_types phone_number_types
     *
     * @return $this
     */
    public function setPhoneNumberTypes($phone_number_types)
    {
        $this->container['phone_number_types'] = $phone_number_types;

        return $this;
    }

    /**
     * Gets pig_company_types
     *
     * @return \Swagger\Client\Model\PigCompanyTypeOption[]
     */
    public function getPigCompanyTypes()
    {
        return $this->container['pig_company_types'];
    }

    /**
     * Sets pig_company_types
     *
     * @param \Swagger\Client\Model\PigCompanyTypeOption[] $pig_company_types Pig Company Types (E.g. 'Sows', 'Meat').
     *
     * @return $this
     */
    public function setPigCompanyTypes($pig_company_types)
    {
        $this->container['pig_company_types'] = $pig_company_types;

        return $this;
    }

    /**
     * Gets point_of_interest_options
     *
     * @return \Swagger\Client\Model\PointOfInterestTypeOption[]
     */
    public function getPointOfInterestOptions()
    {
        return $this->container['point_of_interest_options'];
    }

    /**
     * Sets point_of_interest_options
     *
     * @param \Swagger\Client\Model\PointOfInterestTypeOption[] $point_of_interest_options PointOfInterest Options (E.g. 'Bank', 'Bus stop', 'metro stop').
     *
     * @return $this
     */
    public function setPointOfInterestOptions($point_of_interest_options)
    {
        $this->container['point_of_interest_options'] = $point_of_interest_options;

        return $this;
    }

    /**
     * Gets polution_type_options
     *
     * @return \Swagger\Client\Model\PollutionTypeOption[]
     */
    public function getPolutionTypeOptions()
    {
        return $this->container['polution_type_options'];
    }

    /**
     * Sets polution_type_options
     *
     * @param \Swagger\Client\Model\PollutionTypeOption[] $polution_type_options Polution Type Options (E.g. 'Removed', 'With certificate', 'Filled'). Dutch: Verontreiniging
     *
     * @return $this
     */
    public function setPolutionTypeOptions($polution_type_options)
    {
        $this->container['polution_type_options'] = $polution_type_options;

        return $this;
    }

    /**
     * Gets poultry_farming_subtypes
     *
     * @return \Swagger\Client\Model\PoultryFarmingSubtypeOption[]
     */
    public function getPoultryFarmingSubtypes()
    {
        return $this->container['poultry_farming_subtypes'];
    }

    /**
     * Sets poultry_farming_subtypes
     *
     * @param \Swagger\Client\Model\PoultryFarmingSubtypeOption[] $poultry_farming_subtypes Poultry Farming Subtypes (E.g. 'Broilers', 'Breeding Hens').
     *
     * @return $this
     */
    public function setPoultryFarmingSubtypes($poultry_farming_subtypes)
    {
        $this->container['poultry_farming_subtypes'] = $poultry_farming_subtypes;

        return $this;
    }

    /**
     * Gets poultry_housing_type_options
     *
     * @return \Swagger\Client\Model\PoultryHousingTypeOption[]
     */
    public function getPoultryHousingTypeOptions()
    {
        return $this->container['poultry_housing_type_options'];
    }

    /**
     * Sets poultry_housing_type_options
     *
     * @param \Swagger\Client\Model\PoultryHousingTypeOption[] $poultry_housing_type_options Poultry housing type options (E.g. 'Cage housing', 'Traditional housing')
     *
     * @return $this
     */
    public function setPoultryHousingTypeOptions($poultry_housing_type_options)
    {
        $this->container['poultry_housing_type_options'] = $poultry_housing_type_options;

        return $this;
    }

    /**
     * Gets price_codes
     *
     * @return \Swagger\Client\Model\PriceCodeOption[]
     */
    public function getPriceCodes()
    {
        return $this->container['price_codes'];
    }

    /**
     * Sets price_codes
     *
     * @param \Swagger\Client\Model\PriceCodeOption[] $price_codes Price codes (E.g. 'higher budget', 'public auction', etc.).
     *
     * @return $this
     */
    public function setPriceCodes($price_codes)
    {
        $this->container['price_codes'] = $price_codes;

        return $this;
    }

    /**
     * Gets price_history_events
     *
     * @return \Swagger\Client\Model\PriceHistoryEventOption[]
     */
    public function getPriceHistoryEvents()
    {
        return $this->container['price_history_events'];
    }

    /**
     * Sets price_history_events
     *
     * @param \Swagger\Client\Model\PriceHistoryEventOption[] $price_history_events PriceHistory Events (E.g. 'Registered', 'Changed').
     *
     * @return $this
     */
    public function setPriceHistoryEvents($price_history_events)
    {
        $this->container['price_history_events'] = $price_history_events;

        return $this;
    }

    /**
     * Gets priorities
     *
     * @return \Swagger\Client\Model\PriorityOption[]
     */
    public function getPriorities()
    {
        return $this->container['priorities'];
    }

    /**
     * Sets priorities
     *
     * @param \Swagger\Client\Model\PriorityOption[] $priorities priorities
     *
     * @return $this
     */
    public function setPriorities($priorities)
    {
        $this->container['priorities'] = $priorities;

        return $this;
    }

    /**
     * Gets publication_statuses
     *
     * @return \Swagger\Client\Model\PublicationStatusOption[]
     */
    public function getPublicationStatuses()
    {
        return $this->container['publication_statuses'];
    }

    /**
     * Sets publication_statuses
     *
     * @param \Swagger\Client\Model\PublicationStatusOption[] $publication_statuses Publication Statuses Options (E.g. 'Inactive', 'Publish Request Enqueued', 'Published').]
     *
     * @return $this
     */
    public function setPublicationStatuses($publication_statuses)
    {
        $this->container['publication_statuses'] = $publication_statuses;

        return $this;
    }

    /**
     * Gets real_estate_associations
     *
     * @return \Swagger\Client\Model\RealEstateAssociationOption[]
     */
    public function getRealEstateAssociations()
    {
        return $this->container['real_estate_associations'];
    }

    /**
     * Sets real_estate_associations
     *
     * @param \Swagger\Client\Model\RealEstateAssociationOption[] $real_estate_associations real_estate_associations
     *
     * @return $this
     */
    public function setRealEstateAssociations($real_estate_associations)
    {
        $this->container['real_estate_associations'] = $real_estate_associations;

        return $this;
    }

    /**
     * Gets real_estate_groups
     *
     * @return \Swagger\Client\Model\RealEstateGroupOption[]
     */
    public function getRealEstateGroups()
    {
        return $this->container['real_estate_groups'];
    }

    /**
     * Sets real_estate_groups
     *
     * @param \Swagger\Client\Model\RealEstateGroupOption[] $real_estate_groups Available realEstate groups ('Residential', 'Commercial', 'Agricultural', 'Production rights').
     *
     * @return $this
     */
    public function setRealEstateGroups($real_estate_groups)
    {
        $this->container['real_estate_groups'] = $real_estate_groups;

        return $this;
    }

    /**
     * Gets register_reason_options
     *
     * @return \Swagger\Client\Model\RegisterReasonOption[]
     */
    public function getRegisterReasonOptions()
    {
        return $this->container['register_reason_options'];
    }

    /**
     * Sets register_reason_options
     *
     * @param \Swagger\Client\Model\RegisterReasonOption[] $register_reason_options Register reason options (E.g. 'Relocation to other country', 'Business termination')
     *
     * @return $this
     */
    public function setRegisterReasonOptions($register_reason_options)
    {
        $this->container['register_reason_options'] = $register_reason_options;

        return $this;
    }

    /**
     * Gets relation_roles
     *
     * @return \Swagger\Client\Model\RelationRoleOption[]
     */
    public function getRelationRoles()
    {
        return $this->container['relation_roles'];
    }

    /**
     * Sets relation_roles
     *
     * @param \Swagger\Client\Model\RelationRoleOption[] $relation_roles Relation Roles (E.g. 'Vendor', 'Applicant', 'Notary').
     *
     * @return $this
     */
    public function setRelationRoles($relation_roles)
    {
        $this->container['relation_roles'] = $relation_roles;

        return $this;
    }

    /**
     * Gets relation_types
     *
     * @return \Swagger\Client\Model\RelationTypeOption[]
     */
    public function getRelationTypes()
    {
        return $this->container['relation_types'];
    }

    /**
     * Sets relation_types
     *
     * @param \Swagger\Client\Model\RelationTypeOption[] $relation_types relation_types
     *
     * @return $this
     */
    public function setRelationTypes($relation_types)
    {
        $this->container['relation_types'] = $relation_types;

        return $this;
    }

    /**
     * Gets reminder_minutes_options
     *
     * @return \Swagger\Client\Model\ReminderMinutesOption[]
     */
    public function getReminderMinutesOptions()
    {
        return $this->container['reminder_minutes_options'];
    }

    /**
     * Sets reminder_minutes_options
     *
     * @param \Swagger\Client\Model\ReminderMinutesOption[] $reminder_minutes_options reminder_minutes_options
     *
     * @return $this
     */
    public function setReminderMinutesOptions($reminder_minutes_options)
    {
        $this->container['reminder_minutes_options'] = $reminder_minutes_options;

        return $this;
    }

    /**
     * Gets reminder_notification_settings_type_option_list
     *
     * @return \Swagger\Client\Model\ReminderNotificationSettingTypeOption[]
     */
    public function getReminderNotificationSettingsTypeOptionList()
    {
        return $this->container['reminder_notification_settings_type_option_list'];
    }

    /**
     * Sets reminder_notification_settings_type_option_list
     *
     * @param \Swagger\Client\Model\ReminderNotificationSettingTypeOption[] $reminder_notification_settings_type_option_list Reminder notification setting type options (E.g. 'BankGuarantee', 'CallAfterViewing')
     *
     * @return $this
     */
    public function setReminderNotificationSettingsTypeOptionList($reminder_notification_settings_type_option_list)
    {
        $this->container['reminder_notification_settings_type_option_list'] = $reminder_notification_settings_type_option_list;

        return $this;
    }

    /**
     * Gets rent_conditions
     *
     * @return \Swagger\Client\Model\RentConditionOption[]
     */
    public function getRentConditions()
    {
        return $this->container['rent_conditions'];
    }

    /**
     * Sets rent_conditions
     *
     * @param \Swagger\Client\Model\RentConditionOption[] $rent_conditions Available Rent conditions (E.g. 'Per month', 'Per year').
     *
     * @return $this
     */
    public function setRentConditions($rent_conditions)
    {
        $this->container['rent_conditions'] = $rent_conditions;

        return $this;
    }

    /**
     * Gets rent_specifications
     *
     * @return \Swagger\Client\Model\RentSpecificationOption[]
     */
    public function getRentSpecifications()
    {
        return $this->container['rent_specifications'];
    }

    /**
     * Sets rent_specifications
     *
     * @param \Swagger\Client\Model\RentSpecificationOption[] $rent_specifications Rent specifications (E.g. including 'Gas', 'Water', 'ServiceCosts', 'Upholstered', etc.).
     *
     * @return $this
     */
    public function setRentSpecifications($rent_specifications)
    {
        $this->container['rent_specifications'] = $rent_specifications;

        return $this;
    }

    /**
     * Gets residential_building_type_options
     *
     * @return \Swagger\Client\Model\ResidentialBuildingTypeOption[]
     */
    public function getResidentialBuildingTypeOptions()
    {
        return $this->container['residential_building_type_options'];
    }

    /**
     * Sets residential_building_type_options
     *
     * @param \Swagger\Client\Model\ResidentialBuildingTypeOption[] $residential_building_type_options ResidentialBuildingType options (E.g. 'Apartment', 'House', 'Apartment complex')
     *
     * @return $this
     */
    public function setResidentialBuildingTypeOptions($residential_building_type_options)
    {
        $this->container['residential_building_type_options'] = $residential_building_type_options;

        return $this;
    }

    /**
     * Gets residential_facility_options
     *
     * @return \Swagger\Client\Model\ResidentialFacilityOption[]
     */
    public function getResidentialFacilityOptions()
    {
        return $this->container['residential_facility_options'];
    }

    /**
     * Sets residential_facility_options
     *
     * @param \Swagger\Client\Model\ResidentialFacilityOption[] $residential_facility_options Residential facility options (E.g. 'Elevator', 'Alarm system', 'Solar panels')
     *
     * @return $this
     */
    public function setResidentialFacilityOptions($residential_facility_options)
    {
        $this->container['residential_facility_options'] = $residential_facility_options;

        return $this;
    }

    /**
     * Gets residential_subtype_others
     *
     * @return \Swagger\Client\Model\ResidentialSubtypeOtherOption[]
     */
    public function getResidentialSubtypeOthers()
    {
        return $this->container['residential_subtype_others'];
    }

    /**
     * Sets residential_subtype_others
     *
     * @param \Swagger\Client\Model\ResidentialSubtypeOtherOption[] $residential_subtype_others Residential Subtype 'Others' (E.g. 'MobileHomePitch', 'StorageSpace').
     *
     * @return $this
     */
    public function setResidentialSubtypeOthers($residential_subtype_others)
    {
        $this->container['residential_subtype_others'] = $residential_subtype_others;

        return $this;
    }

    /**
     * Gets restaurant_hospitality_sector_types
     *
     * @return \Swagger\Client\Model\RestaurantHospitalitySectorTypeOption[]
     */
    public function getRestaurantHospitalitySectorTypes()
    {
        return $this->container['restaurant_hospitality_sector_types'];
    }

    /**
     * Sets restaurant_hospitality_sector_types
     *
     * @param \Swagger\Client\Model\RestaurantHospitalitySectorTypeOption[] $restaurant_hospitality_sector_types Restaurant hospitality types (E.g. 'CafeRestaurant', 'Roadhouse')
     *
     * @return $this
     */
    public function setRestaurantHospitalitySectorTypes($restaurant_hospitality_sector_types)
    {
        $this->container['restaurant_hospitality_sector_types'] = $restaurant_hospitality_sector_types;

        return $this;
    }

    /**
     * Gets roof_material_options
     *
     * @return \Swagger\Client\Model\RoofMaterialOption[]
     */
    public function getRoofMaterialOptions()
    {
        return $this->container['roof_material_options'];
    }

    /**
     * Sets roof_material_options
     *
     * @param \Swagger\Client\Model\RoofMaterialOption[] $roof_material_options RoofMaterial Options (E.g. 'Asbestos', 'Concrete', 'Wood'). Dutch: DakMateriaal
     *
     * @return $this
     */
    public function setRoofMaterialOptions($roof_material_options)
    {
        $this->container['roof_material_options'] = $roof_material_options;

        return $this;
    }

    /**
     * Gets roof_type_options
     *
     * @return \Swagger\Client\Model\RoofTypeOption[]
     */
    public function getRoofTypeOptions()
    {
        return $this->container['roof_type_options'];
    }

    /**
     * Sets roof_type_options
     *
     * @param \Swagger\Client\Model\RoofTypeOption[] $roof_type_options Roof type Options (E.g. 'Flat', 'Shed', 'Gambrel'). Dutch: TypeDak
     *
     * @return $this
     */
    public function setRoofTypeOptions($roof_type_options)
    {
        $this->container['roof_type_options'] = $roof_type_options;

        return $this;
    }

    /**
     * Gets sale_conditions
     *
     * @return \Swagger\Client\Model\SaleConditionOption[]
     */
    public function getSaleConditions()
    {
        return $this->container['sale_conditions'];
    }

    /**
     * Sets sale_conditions
     *
     * @param \Swagger\Client\Model\SaleConditionOption[] $sale_conditions Available Sale conditions (E.g. 'Costs Buyer', 'Costs split').
     *
     * @return $this
     */
    public function setSaleConditions($sale_conditions)
    {
        $this->container['sale_conditions'] = $sale_conditions;

        return $this;
    }

    /**
     * Gets search_assignment_facility_options
     *
     * @return \Swagger\Client\Model\SearchAssignmentFacilityOption[]
     */
    public function getSearchAssignmentFacilityOptions()
    {
        return $this->container['search_assignment_facility_options'];
    }

    /**
     * Sets search_assignment_facility_options
     *
     * @param \Swagger\Client\Model\SearchAssignmentFacilityOption[] $search_assignment_facility_options Search Assignment fAcility Options (E.g. 'Garden', 'ElevatorInBuilding', 'Basement')
     *
     * @return $this
     */
    public function setSearchAssignmentFacilityOptions($search_assignment_facility_options)
    {
        $this->container['search_assignment_facility_options'] = $search_assignment_facility_options;

        return $this;
    }

    /**
     * Gets search_assignment_peculiarity_options
     *
     * @return \Swagger\Client\Model\SearchAssignmentPeculiarityOption[]
     */
    public function getSearchAssignmentPeculiarityOptions()
    {
        return $this->container['search_assignment_peculiarity_options'];
    }

    /**
     * Sets search_assignment_peculiarity_options
     *
     * @param \Swagger\Client\Model\SearchAssignmentPeculiarityOption[] $search_assignment_peculiarity_options Search Assignment Peculiarity options (E.g. 'TargetGroupListing', 'RecreationalListing', 'MoumentalListing')
     *
     * @return $this
     */
    public function setSearchAssignmentPeculiarityOptions($search_assignment_peculiarity_options)
    {
        $this->container['search_assignment_peculiarity_options'] = $search_assignment_peculiarity_options;

        return $this;
    }

    /**
     * Gets situated_type_options
     *
     * @return \Swagger\Client\Model\SituatedTypeOption[]
     */
    public function getSituatedTypeOptions()
    {
        return $this->container['situated_type_options'];
    }

    /**
     * Sets situated_type_options
     *
     * @param \Swagger\Client\Model\SituatedTypeOption[] $situated_type_options Situated Type Options (E.g. 'Indoor', 'Annex', 'Detached'). Dutch: Situatie
     *
     * @return $this
     */
    public function setSituatedTypeOptions($situated_type_options)
    {
        $this->container['situated_type_options'] = $situated_type_options;

        return $this;
    }

    /**
     * Gets social_media_type_options
     *
     * @return \Swagger\Client\Model\SocialMediaTypeOption[]
     */
    public function getSocialMediaTypeOptions()
    {
        return $this->container['social_media_type_options'];
    }

    /**
     * Sets social_media_type_options
     *
     * @param \Swagger\Client\Model\SocialMediaTypeOption[] $social_media_type_options SocialMediaTypes Options (E.g. 'LinkedIn', 'Facebook', 'Twitter').
     *
     * @return $this
     */
    public function setSocialMediaTypeOptions($social_media_type_options)
    {
        $this->container['social_media_type_options'] = $social_media_type_options;

        return $this;
    }

    /**
     * Gets social_property_facility_type_options
     *
     * @return \Swagger\Client\Model\SocialPropertyFacilityOption[]
     */
    public function getSocialPropertyFacilityTypeOptions()
    {
        return $this->container['social_property_facility_type_options'];
    }

    /**
     * Sets social_property_facility_type_options
     *
     * @param \Swagger\Client\Model\SocialPropertyFacilityOption[] $social_property_facility_type_options SocialPropertyFacilityTypes options (E.g. 'Private parking', 'Elevator', 'Swimming pool')
     *
     * @return $this
     */
    public function setSocialPropertyFacilityTypeOptions($social_property_facility_type_options)
    {
        $this->container['social_property_facility_type_options'] = $social_property_facility_type_options;

        return $this;
    }

    /**
     * Gets social_property_type_options
     *
     * @return \Swagger\Client\Model\SocialPropertyTypeOption[]
     */
    public function getSocialPropertyTypeOptions()
    {
        return $this->container['social_property_type_options'];
    }

    /**
     * Sets social_property_type_options
     *
     * @param \Swagger\Client\Model\SocialPropertyTypeOption[] $social_property_type_options SocialPropertyType options (E.g. 'Healthcare', 'Sports', 'Cultural')
     *
     * @return $this
     */
    public function setSocialPropertyTypeOptions($social_property_type_options)
    {
        $this->container['social_property_type_options'] = $social_property_type_options;

        return $this;
    }

    /**
     * Gets soil_type_options
     *
     * @return \Swagger\Client\Model\SoilTypeOption[]
     */
    public function getSoilTypeOptions()
    {
        return $this->container['soil_type_options'];
    }

    /**
     * Sets soil_type_options
     *
     * @param \Swagger\Client\Model\SoilTypeOption[] $soil_type_options Soil type options (E.g. 'Clay', 'MarineClay', 'ConcreteFloor')
     *
     * @return $this
     */
    public function setSoilTypeOptions($soil_type_options)
    {
        $this->container['soil_type_options'] = $soil_type_options;

        return $this;
    }

    /**
     * Gets space_types
     *
     * @return \Swagger\Client\Model\SpaceTypeOption[]
     */
    public function getSpaceTypes()
    {
        return $this->container['space_types'];
    }

    /**
     * Sets space_types
     *
     * @param \Swagger\Client\Model\SpaceTypeOption[] $space_types Space types (E.g. 'Kitchen', 'Bathroom')]
     *
     * @return $this
     */
    public function setSpaceTypes($space_types)
    {
        $this->container['space_types'] = $space_types;

        return $this;
    }

    /**
     * Gets storage_room_type_options
     *
     * @return \Swagger\Client\Model\StorageRoomTypeOption[]
     */
    public function getStorageRoomTypeOptions()
    {
        return $this->container['storage_room_type_options'];
    }

    /**
     * Sets storage_room_type_options
     *
     * @param \Swagger\Client\Model\StorageRoomTypeOption[] $storage_room_type_options StorageRoomType Options (E.g. 'Attached stone', 'Indoor', 'Detached wood'). Dutch: TypeBerging
     *
     * @return $this
     */
    public function setStorageRoomTypeOptions($storage_room_type_options)
    {
        $this->container['storage_room_type_options'] = $storage_room_type_options;

        return $this;
    }

    /**
     * Gets stoves
     *
     * @return \Swagger\Client\Model\StoveOption[]
     */
    public function getStoves()
    {
        return $this->container['stoves'];
    }

    /**
     * Sets stoves
     *
     * @param \Swagger\Client\Model\StoveOption[] $stoves Stove type (E.g. 'Electric', 'Gas')]
     *
     * @return $this
     */
    public function setStoves($stoves)
    {
        $this->container['stoves'] = $stoves;

        return $this;
    }

    /**
     * Gets take_over_specification_options
     *
     * @return \Swagger\Client\Model\TakeOverSpecificationOption[]
     */
    public function getTakeOverSpecificationOptions()
    {
        return $this->container['take_over_specification_options'];
    }

    /**
     * Sets take_over_specification_options
     *
     * @param \Swagger\Client\Model\TakeOverSpecificationOption[] $take_over_specification_options TakeOver specification options (E.g. 'StaysBehind', 'GoesAlong')
     *
     * @return $this
     */
    public function setTakeOverSpecificationOptions($take_over_specification_options)
    {
        $this->container['take_over_specification_options'] = $take_over_specification_options;

        return $this;
    }

    /**
     * Gets task_categories
     *
     * @return \Swagger\Client\Model\TaskCategoryOption[]
     */
    public function getTaskCategories()
    {
        return $this->container['task_categories'];
    }

    /**
     * Sets task_categories
     *
     * @param \Swagger\Client\Model\TaskCategoryOption[] $task_categories task_categories
     *
     * @return $this
     */
    public function setTaskCategories($task_categories)
    {
        $this->container['task_categories'] = $task_categories;

        return $this;
    }

    /**
     * Gets task_follow_ups
     *
     * @return \Swagger\Client\Model\TaskFollowUpOption[]
     */
    public function getTaskFollowUps()
    {
        return $this->container['task_follow_ups'];
    }

    /**
     * Sets task_follow_ups
     *
     * @param \Swagger\Client\Model\TaskFollowUpOption[] $task_follow_ups task_follow_ups
     *
     * @return $this
     */
    public function setTaskFollowUps($task_follow_ups)
    {
        $this->container['task_follow_ups'] = $task_follow_ups;

        return $this;
    }

    /**
     * Gets task_statuses
     *
     * @return \Swagger\Client\Model\TaskStatusOption[]
     */
    public function getTaskStatuses()
    {
        return $this->container['task_statuses'];
    }

    /**
     * Sets task_statuses
     *
     * @param \Swagger\Client\Model\TaskStatusOption[] $task_statuses task_statuses
     *
     * @return $this
     */
    public function setTaskStatuses($task_statuses)
    {
        $this->container['task_statuses'] = $task_statuses;

        return $this;
    }

    /**
     * Gets template_definition_category_options
     *
     * @return \Swagger\Client\Model\TemplateDefinitionCategoryOption[]
     */
    public function getTemplateDefinitionCategoryOptions()
    {
        return $this->container['template_definition_category_options'];
    }

    /**
     * Sets template_definition_category_options
     *
     * @param \Swagger\Client\Model\TemplateDefinitionCategoryOption[] $template_definition_category_options Template definition category options (E.g. email signature, email template)
     *
     * @return $this
     */
    public function setTemplateDefinitionCategoryOptions($template_definition_category_options)
    {
        $this->container['template_definition_category_options'] = $template_definition_category_options;

        return $this;
    }

    /**
     * Gets timeline_action_sub_options
     *
     * @return \Swagger\Client\Model\TimelineActionSubOption[]
     */
    public function getTimelineActionSubOptions()
    {
        return $this->container['timeline_action_sub_options'];
    }

    /**
     * Sets timeline_action_sub_options
     *
     * @param \Swagger\Client\Model\TimelineActionSubOption[] $timeline_action_sub_options Timeline Action Sub options (E.g. 'Mandate', 'DateAuction')
     *
     * @return $this
     */
    public function setTimelineActionSubOptions($timeline_action_sub_options)
    {
        $this->container['timeline_action_sub_options'] = $timeline_action_sub_options;

        return $this;
    }

    /**
     * Gets timeline_action_types
     *
     * @return \Swagger\Client\Model\TimelineActionTypeOption[]
     */
    public function getTimelineActionTypes()
    {
        return $this->container['timeline_action_types'];
    }

    /**
     * Sets timeline_action_types
     *
     * @param \Swagger\Client\Model\TimelineActionTypeOption[] $timeline_action_types timeline_action_types
     *
     * @return $this
     */
    public function setTimelineActionTypes($timeline_action_types)
    {
        $this->container['timeline_action_types'] = $timeline_action_types;

        return $this;
    }

    /**
     * Gets type_alv_options
     *
     * @return \Swagger\Client\Model\TypeAlvOption[]
     */
    public function getTypeAlvOptions()
    {
        return $this->container['type_alv_options'];
    }

    /**
     * Sets type_alv_options
     *
     * @param \Swagger\Client\Model\TypeAlvOption[] $type_alv_options ALV types (E.g. 'CattleFarming', 'MeatCalves', 'DairyFarming')
     *
     * @return $this
     */
    public function setTypeAlvOptions($type_alv_options)
    {
        $this->container['type_alv_options'] = $type_alv_options;

        return $this;
    }

    /**
     * Gets type_alv_other_options
     *
     * @return \Swagger\Client\Model\TypeAlvOtherOption[]
     */
    public function getTypeAlvOtherOptions()
    {
        return $this->container['type_alv_other_options'];
    }

    /**
     * Sets type_alv_other_options
     *
     * @param \Swagger\Client\Model\TypeAlvOtherOption[] $type_alv_other_options Type ALV Other options (E.g. 'Sheep', 'Goats', 'Eel')
     *
     * @return $this
     */
    public function setTypeAlvOtherOptions($type_alv_other_options)
    {
        $this->container['type_alv_other_options'] = $type_alv_other_options;

        return $this;
    }

    /**
     * Gets type_bog_options
     *
     * @return \Swagger\Client\Model\TypeBOGOption[]
     */
    public function getTypeBogOptions()
    {
        return $this->container['type_bog_options'];
    }

    /**
     * Sets type_bog_options
     *
     * @param \Swagger\Client\Model\TypeBOGOption[] $type_bog_options BOG types (E.g. 'Leisure', 'Social Property', 'Investment')
     *
     * @return $this
     */
    public function setTypeBogOptions($type_bog_options)
    {
        $this->container['type_bog_options'] = $type_bog_options;

        return $this;
    }

    /**
     * Gets type_of_business_law_options
     *
     * @return \Swagger\Client\Model\TypeOfBusinessLawOption[]
     */
    public function getTypeOfBusinessLawOptions()
    {
        return $this->container['type_of_business_law_options'];
    }

    /**
     * Sets type_of_business_law_options
     *
     * @param \Swagger\Client\Model\TypeOfBusinessLawOption[] $type_of_business_law_options Type of business law options (E.g. 'ProtectedMonument', 'CategringAllowed')
     *
     * @return $this
     */
    public function setTypeOfBusinessLawOptions($type_of_business_law_options)
    {
        $this->container['type_of_business_law_options'] = $type_of_business_law_options;

        return $this;
    }

    /**
     * Gets type_of_floor_options
     *
     * @return \Swagger\Client\Model\TypeOfFloorOption[]
     */
    public function getTypeOfFloorOptions()
    {
        return $this->container['type_of_floor_options'];
    }

    /**
     * Sets type_of_floor_options
     *
     * @param \Swagger\Client\Model\TypeOfFloorOption[] $type_of_floor_options Type of floors (E.g. 'Attic', 'Ground floor', etc.).
     *
     * @return $this
     */
    public function setTypeOfFloorOptions($type_of_floor_options)
    {
        $this->container['type_of_floor_options'] = $type_of_floor_options;

        return $this;
    }

    /**
     * Gets type_of_habitation_options
     *
     * @return \Swagger\Client\Model\TypeOfHabitationOption[]
     */
    public function getTypeOfHabitationOptions()
    {
        return $this->container['type_of_habitation_options'];
    }

    /**
     * Sets type_of_habitation_options
     *
     * @param \Swagger\Client\Model\TypeOfHabitationOption[] $type_of_habitation_options Type of habitation options (E.g. 'rent', 'buy')
     *
     * @return $this
     */
    public function setTypeOfHabitationOptions($type_of_habitation_options)
    {
        $this->container['type_of_habitation_options'] = $type_of_habitation_options;

        return $this;
    }

    /**
     * Gets type_of_window_frame_options
     *
     * @return \Swagger\Client\Model\TypeOfWindowFrameOption[]
     */
    public function getTypeOfWindowFrameOptions()
    {
        return $this->container['type_of_window_frame_options'];
    }

    /**
     * Sets type_of_window_frame_options
     *
     * @param \Swagger\Client\Model\TypeOfWindowFrameOption[] $type_of_window_frame_options Window frame type options (E.g. 'Wood', 'Aluminium', 'Plastic'). Dutch: TypeOfWindowFrame
     *
     * @return $this
     */
    public function setTypeOfWindowFrameOptions($type_of_window_frame_options)
    {
        $this->container['type_of_window_frame_options'] = $type_of_window_frame_options;

        return $this;
    }

    /**
     * Gets type_part_options
     *
     * @return \Swagger\Client\Model\TypePARTOption[]
     */
    public function getTypePartOptions()
    {
        return $this->container['type_part_options'];
    }

    /**
     * Sets type_part_options
     *
     * @param \Swagger\Client\Model\TypePARTOption[] $type_part_options PART types (E.g. 'Apartment', 'BuildingGround', 'Other')
     *
     * @return $this
     */
    public function setTypePartOptions($type_part_options)
    {
        $this->container['type_part_options'] = $type_part_options;

        return $this;
    }

    /**
     * Gets type_part_other_options
     *
     * @return \Swagger\Client\Model\TypePARTOtherOption[]
     */
    public function getTypePartOtherOptions()
    {
        return $this->container['type_part_other_options'];
    }

    /**
     * Sets type_part_other_options
     *
     * @param \Swagger\Client\Model\TypePARTOtherOption[] $type_part_other_options Type PART Other options (E.g. 'Storage', 'Caravan Place', 'Parking space')
     *
     * @return $this
     */
    public function setTypePartOtherOptions($type_part_other_options)
    {
        $this->container['type_part_other_options'] = $type_part_other_options;

        return $this;
    }

    /**
     * Gets types_of_communal_area
     *
     * @return \Swagger\Client\Model\TypeOfCommunalAreaOption[]
     */
    public function getTypesOfCommunalArea()
    {
        return $this->container['types_of_communal_area'];
    }

    /**
     * Sets types_of_communal_area
     *
     * @param \Swagger\Client\Model\TypeOfCommunalAreaOption[] $types_of_communal_area Types of communal area options (E.g. 'Cafeteria', 'ConferenceRoom', 'Reception')
     *
     * @return $this
     */
    public function setTypesOfCommunalArea($types_of_communal_area)
    {
        $this->container['types_of_communal_area'] = $types_of_communal_area;

        return $this;
    }

    /**
     * Gets unit_of_measurement_options
     *
     * @return \Swagger\Client\Model\UnitOfMeasurementOption[]
     */
    public function getUnitOfMeasurementOptions()
    {
        return $this->container['unit_of_measurement_options'];
    }

    /**
     * Sets unit_of_measurement_options
     *
     * @param \Swagger\Client\Model\UnitOfMeasurementOption[] $unit_of_measurement_options UnitOfMeasurement Options (E.g. '', '', '').
     *
     * @return $this
     */
    public function setUnitOfMeasurementOptions($unit_of_measurement_options)
    {
        $this->container['unit_of_measurement_options'] = $unit_of_measurement_options;

        return $this;
    }

    /**
     * Gets unit_of_volume_options
     *
     * @return \Swagger\Client\Model\UnitOfVolumeOption[]
     */
    public function getUnitOfVolumeOptions()
    {
        return $this->container['unit_of_volume_options'];
    }

    /**
     * Sets unit_of_volume_options
     *
     * @param \Swagger\Client\Model\UnitOfVolumeOption[] $unit_of_volume_options UnitOfVolume Options (E.g. '', '', '').
     *
     * @return $this
     */
    public function setUnitOfVolumeOptions($unit_of_volume_options)
    {
        $this->container['unit_of_volume_options'] = $unit_of_volume_options;

        return $this;
    }

    /**
     * Gets unit_size_options
     *
     * @return \Swagger\Client\Model\UnitSizeOption[]
     */
    public function getUnitSizeOptions()
    {
        return $this->container['unit_size_options'];
    }

    /**
     * Sets unit_size_options
     *
     * @param \Swagger\Client\Model\UnitSizeOption[] $unit_size_options UnitSize Options (E.g. '', '', ''). Dutch: UnitSize
     *
     * @return $this
     */
    public function setUnitSizeOptions($unit_size_options)
    {
        $this->container['unit_size_options'] = $unit_size_options;

        return $this;
    }

    /**
     * Gets vat_conditions
     *
     * @return \Swagger\Client\Model\VatConditionOption[]
     */
    public function getVatConditions()
    {
        return $this->container['vat_conditions'];
    }

    /**
     * Sets vat_conditions
     *
     * @param \Swagger\Client\Model\VatConditionOption[] $vat_conditions Available VAT conditions (E.g. 'Included VAT', 'Excluded VAT').
     *
     * @return $this
     */
    public function setVatConditions($vat_conditions)
    {
        $this->container['vat_conditions'] = $vat_conditions;

        return $this;
    }

    /**
     * Gets vendor_type_options
     *
     * @return \Swagger\Client\Model\VendorTypeOption[]
     */
    public function getVendorTypeOptions()
    {
        return $this->container['vendor_type_options'];
    }

    /**
     * Sets vendor_type_options
     *
     * @param \Swagger\Client\Model\VendorTypeOption[] $vendor_type_options Vendor type options (E.g. sellers, Vendor)
     *
     * @return $this
     */
    public function setVendorTypeOptions($vendor_type_options)
    {
        $this->container['vendor_type_options'] = $vendor_type_options;

        return $this;
    }

    /**
     * Gets waiting_time_options
     *
     * @return \Swagger\Client\Model\WaitingTimeOption[]
     */
    public function getWaitingTimeOptions()
    {
        return $this->container['waiting_time_options'];
    }

    /**
     * Sets waiting_time_options
     *
     * @param \Swagger\Client\Model\WaitingTimeOption[] $waiting_time_options Waitingtime for projects
     *
     * @return $this
     */
    public function setWaitingTimeOptions($waiting_time_options)
    {
        $this->container['waiting_time_options'] = $waiting_time_options;

        return $this;
    }

    /**
     * Gets website_provider_options
     *
     * @return \Swagger\Client\Model\WebsiteProviderOption[]
     */
    public function getWebsiteProviderOptions()
    {
        return $this->container['website_provider_options'];
    }

    /**
     * Sets website_provider_options
     *
     * @param \Swagger\Client\Model\WebsiteProviderOption[] $website_provider_options Website provider options (E.g. 'Housenet 3', 'Other')
     *
     * @return $this
     */
    public function setWebsiteProviderOptions($website_provider_options)
    {
        $this->container['website_provider_options'] = $website_provider_options;

        return $this;
    }

    /**
     * Gets welfare_state_options
     *
     * @return \Swagger\Client\Model\WelfareStateOption[]
     */
    public function getWelfareStateOptions()
    {
        return $this->container['welfare_state_options'];
    }

    /**
     * Sets welfare_state_options
     *
     * @param \Swagger\Client\Model\WelfareStateOption[] $welfare_state_options Welfare State Options (E.g. 'A1', 'A2', 'B1'). Dutch: Welstandsklasse
     *
     * @return $this
     */
    public function setWelfareStateOptions($welfare_state_options)
    {
        $this->container['welfare_state_options'] = $welfare_state_options;

        return $this;
    }

    /**
     * Gets withdraw_reason_options
     *
     * @return \Swagger\Client\Model\WithdrawReasonOption[]
     */
    public function getWithdrawReasonOptions()
    {
        return $this->container['withdraw_reason_options'];
    }

    /**
     * Sets withdraw_reason_options
     *
     * @param \Swagger\Client\Model\WithdrawReasonOption[] $withdraw_reason_options WithdrawReason Options (E.g. 'No more reason to move', 'Set price not met', 'Change of realtor'). Dutch: RedenVanIntrekken
     *
     * @return $this
     */
    public function setWithdrawReasonOptions($withdraw_reason_options)
    {
        $this->container['withdraw_reason_options'] = $withdraw_reason_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


