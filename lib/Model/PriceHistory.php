<?php
/**
 * PriceHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PriceHistory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PriceHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_time_modified' => '\DateTime',
        'event' => '\Swagger\Client\Model\PriceHistoryEvent',
        'new_price' => 'float',
        'new_price_max' => 'float',
        'old_price' => 'float',
        'old_price_max' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_time_modified' => 'date-time',
        'event' => null,
        'new_price' => 'decimal',
        'new_price_max' => 'decimal',
        'old_price' => 'decimal',
        'old_price_max' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_time_modified' => 'dateTimeModified',
        'event' => 'event',
        'new_price' => 'newPrice',
        'new_price_max' => 'newPriceMax',
        'old_price' => 'oldPrice',
        'old_price_max' => 'oldPriceMax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_time_modified' => 'setDateTimeModified',
        'event' => 'setEvent',
        'new_price' => 'setNewPrice',
        'new_price_max' => 'setNewPriceMax',
        'old_price' => 'setOldPrice',
        'old_price_max' => 'setOldPriceMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_time_modified' => 'getDateTimeModified',
        'event' => 'getEvent',
        'new_price' => 'getNewPrice',
        'new_price_max' => 'getNewPriceMax',
        'old_price' => 'getOldPrice',
        'old_price_max' => 'getOldPriceMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_time_modified'] = isset($data['date_time_modified']) ? $data['date_time_modified'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['new_price'] = isset($data['new_price']) ? $data['new_price'] : null;
        $this->container['new_price_max'] = isset($data['new_price_max']) ? $data['new_price_max'] : null;
        $this->container['old_price'] = isset($data['old_price']) ? $data['old_price'] : null;
        $this->container['old_price_max'] = isset($data['old_price_max']) ? $data['old_price_max'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['date_time_modified'] === null) {
            $invalidProperties[] = "'date_time_modified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_time_modified
     *
     * @return \DateTime
     */
    public function getDateTimeModified()
    {
        return $this->container['date_time_modified'];
    }

    /**
     * Sets date_time_modified
     *
     * @param \DateTime $date_time_modified date_time_modified
     *
     * @return $this
     */
    public function setDateTimeModified($date_time_modified)
    {
        $this->container['date_time_modified'] = $date_time_modified;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Swagger\Client\Model\PriceHistoryEvent
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \Swagger\Client\Model\PriceHistoryEvent $event event
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets new_price
     *
     * @return float
     */
    public function getNewPrice()
    {
        return $this->container['new_price'];
    }

    /**
     * Sets new_price
     *
     * @param float $new_price new_price
     *
     * @return $this
     */
    public function setNewPrice($new_price)
    {
        $this->container['new_price'] = $new_price;

        return $this;
    }

    /**
     * Gets new_price_max
     *
     * @return float
     */
    public function getNewPriceMax()
    {
        return $this->container['new_price_max'];
    }

    /**
     * Sets new_price_max
     *
     * @param float $new_price_max new_price_max
     *
     * @return $this
     */
    public function setNewPriceMax($new_price_max)
    {
        $this->container['new_price_max'] = $new_price_max;

        return $this;
    }

    /**
     * Gets old_price
     *
     * @return float
     */
    public function getOldPrice()
    {
        return $this->container['old_price'];
    }

    /**
     * Sets old_price
     *
     * @param float $old_price old_price
     *
     * @return $this
     */
    public function setOldPrice($old_price)
    {
        $this->container['old_price'] = $old_price;

        return $this;
    }

    /**
     * Gets old_price_max
     *
     * @return float
     */
    public function getOldPriceMax()
    {
        return $this->container['old_price_max'];
    }

    /**
     * Sets old_price_max
     *
     * @param float $old_price_max old_price_max
     *
     * @return $this
     */
    public function setOldPriceMax($old_price_max)
    {
        $this->container['old_price_max'] = $old_price_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


