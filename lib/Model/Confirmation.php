<?php
/**
 * Confirmation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Confirmation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Confirmation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Confirmation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'days_until_confirmation' => 'int',
        'is_confirmation_sms_enabled' => 'bool',
        'is_confirmation_email_enabled' => 'bool',
        'email_text' => 'string',
        'email_subject' => 'string',
        'sms_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'days_until_confirmation' => 'int32',
        'is_confirmation_sms_enabled' => null,
        'is_confirmation_email_enabled' => null,
        'email_text' => null,
        'email_subject' => null,
        'sms_text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'days_until_confirmation' => 'daysUntilConfirmation',
        'is_confirmation_sms_enabled' => 'isConfirmationSMSEnabled',
        'is_confirmation_email_enabled' => 'isConfirmationEmailEnabled',
        'email_text' => 'emailText',
        'email_subject' => 'emailSubject',
        'sms_text' => 'smsText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'days_until_confirmation' => 'setDaysUntilConfirmation',
        'is_confirmation_sms_enabled' => 'setIsConfirmationSmsEnabled',
        'is_confirmation_email_enabled' => 'setIsConfirmationEmailEnabled',
        'email_text' => 'setEmailText',
        'email_subject' => 'setEmailSubject',
        'sms_text' => 'setSmsText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'days_until_confirmation' => 'getDaysUntilConfirmation',
        'is_confirmation_sms_enabled' => 'getIsConfirmationSmsEnabled',
        'is_confirmation_email_enabled' => 'getIsConfirmationEmailEnabled',
        'email_text' => 'getEmailText',
        'email_subject' => 'getEmailSubject',
        'sms_text' => 'getSmsText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['days_until_confirmation'] = isset($data['days_until_confirmation']) ? $data['days_until_confirmation'] : null;
        $this->container['is_confirmation_sms_enabled'] = isset($data['is_confirmation_sms_enabled']) ? $data['is_confirmation_sms_enabled'] : null;
        $this->container['is_confirmation_email_enabled'] = isset($data['is_confirmation_email_enabled']) ? $data['is_confirmation_email_enabled'] : null;
        $this->container['email_text'] = isset($data['email_text']) ? $data['email_text'] : null;
        $this->container['email_subject'] = isset($data['email_subject']) ? $data['email_subject'] : null;
        $this->container['sms_text'] = isset($data['sms_text']) ? $data['sms_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['days_until_confirmation'] === null) {
            $invalidProperties[] = "'days_until_confirmation' can't be null";
        }
        if ($this->container['is_confirmation_sms_enabled'] === null) {
            $invalidProperties[] = "'is_confirmation_sms_enabled' can't be null";
        }
        if ($this->container['is_confirmation_email_enabled'] === null) {
            $invalidProperties[] = "'is_confirmation_email_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets days_until_confirmation
     *
     * @return int
     */
    public function getDaysUntilConfirmation()
    {
        return $this->container['days_until_confirmation'];
    }

    /**
     * Sets days_until_confirmation
     *
     * @param int $days_until_confirmation days_until_confirmation
     *
     * @return $this
     */
    public function setDaysUntilConfirmation($days_until_confirmation)
    {
        $this->container['days_until_confirmation'] = $days_until_confirmation;

        return $this;
    }

    /**
     * Gets is_confirmation_sms_enabled
     *
     * @return bool
     */
    public function getIsConfirmationSmsEnabled()
    {
        return $this->container['is_confirmation_sms_enabled'];
    }

    /**
     * Sets is_confirmation_sms_enabled
     *
     * @param bool $is_confirmation_sms_enabled is_confirmation_sms_enabled
     *
     * @return $this
     */
    public function setIsConfirmationSmsEnabled($is_confirmation_sms_enabled)
    {
        $this->container['is_confirmation_sms_enabled'] = $is_confirmation_sms_enabled;

        return $this;
    }

    /**
     * Gets is_confirmation_email_enabled
     *
     * @return bool
     */
    public function getIsConfirmationEmailEnabled()
    {
        return $this->container['is_confirmation_email_enabled'];
    }

    /**
     * Sets is_confirmation_email_enabled
     *
     * @param bool $is_confirmation_email_enabled is_confirmation_email_enabled
     *
     * @return $this
     */
    public function setIsConfirmationEmailEnabled($is_confirmation_email_enabled)
    {
        $this->container['is_confirmation_email_enabled'] = $is_confirmation_email_enabled;

        return $this;
    }

    /**
     * Gets email_text
     *
     * @return string
     */
    public function getEmailText()
    {
        return $this->container['email_text'];
    }

    /**
     * Sets email_text
     *
     * @param string $email_text email_text
     *
     * @return $this
     */
    public function setEmailText($email_text)
    {
        $this->container['email_text'] = $email_text;

        return $this;
    }

    /**
     * Gets email_subject
     *
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     *
     * @param string $email_subject email_subject
     *
     * @return $this
     */
    public function setEmailSubject($email_subject)
    {
        $this->container['email_subject'] = $email_subject;

        return $this;
    }

    /**
     * Gets sms_text
     *
     * @return string
     */
    public function getSmsText()
    {
        return $this->container['sms_text'];
    }

    /**
     * Sets sms_text
     *
     * @param string $sms_text sms_text
     *
     * @return $this
     */
    public function setSmsText($sms_text)
    {
        $this->container['sms_text'] = $sms_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


