<?php
/**
 * AssignmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AssignmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssignmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assignmentsExport
     *
     * Search for assignments and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function assignmentsExport($request, $real_estate_agency_id)
    {
        $this->assignmentsExportWithHttpInfo($request, $real_estate_agency_id);
    }

    /**
     * Operation assignmentsExportWithHttpInfo
     *
     * Search for assignments and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignmentsExportWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '';
        $request = $this->assignmentsExportRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignmentsExportAsync
     *
     * Search for assignments and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignmentsExportAsync($request, $real_estate_agency_id)
    {
        return $this->assignmentsExportAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignmentsExportAsyncWithHttpInfo
     *
     * Search for assignments and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignmentsExportAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '';
        $request = $this->assignmentsExportRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignmentsExport'
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignmentsExportRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling assignmentsExport'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling assignmentsExport'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Assignments/Export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignmentsSearch
     *
     * Search for assignments.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AssignmentsSearchResponse
     */
    public function assignmentsSearch($request, $real_estate_agency_id)
    {
        list($response) = $this->assignmentsSearchWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation assignmentsSearchWithHttpInfo
     *
     * Search for assignments.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AssignmentsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignmentsSearchWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AssignmentsSearchResponse';
        $request = $this->assignmentsSearchRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AssignmentsSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignmentsSearchAsync
     *
     * Search for assignments.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignmentsSearchAsync($request, $real_estate_agency_id)
    {
        return $this->assignmentsSearchAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignmentsSearchAsyncWithHttpInfo
     *
     * Search for assignments.
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignmentsSearchAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AssignmentsSearchResponse';
        $request = $this->assignmentsSearchRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignmentsSearch'
     *
     * @param  \Swagger\Client\Model\AssignmentsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignmentsSearchRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling assignmentsSearch'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling assignmentsSearch'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Assignments/Search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignmentsSearchAndExport
     *
     * Search for assignments and export result to Excel.
     *
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     * @param  string[] $assignment_ids Search by specific assignment Ids. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\AssignmentPhase[] $assignment_phases Filter by assignment phase (&#39;Concept&#39;, &#39;Initiated&#39;, &#39;Completed&#39;) (optional)
     * @param  \Swagger\Client\Model\AvailabilityStatus[] $availabilty_statuses availabilty_statuses (optional)
     * @param  string $country_code Filter by selected Country Code. (optional)
     * @param  string[] $employee_ids Filter by selected Employee Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentType[] $filter_by_assignment_types Filter by selected assignment types. (optional)
     * @param  \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...). (optional)
     * @param  bool $for_rent If true assingments that are for rent are returned.. (optional)
     * @param  bool $for_sale If true assingments that are for sale are returned.. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the assignments and total commissions. (optional)
     * @param  \Swagger\Client\Model\ListingType[] $listing_types listing_types (optional)
     * @param  string[] $localities Filter by selected Localities. (optional)
     * @param  string[] $office_ids Filter by selected Office Ids. (optional)
     * @param  string $order_by Order the results by the indicated assignment field. (optional)
     * @param  string[] $relation_ids Filter by selected Relation Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  string[] $filter_by_project_assignment_ids Filter by selected Project Ids. (optional)
     * @param  string[] $filter_by_object_type_assignment_ids Filter by selected Object Type Ids. (optional)
     * @param  string[] $filter_by_acquisition_assignment_ids Filter by selected Acquisition Assignment Ids. (optional)
     * @param  bool $ignore_old_versions Assignments might be &#39;versions&#39; of other Assignments (see /ObjectAssignment/MakeVersionOf). To force to receive only the most recent &#39;version&#39; of an Assignment set IgnoreOldVersions to true. (optional)
     * @param  bool $has_key Only return assignment that have a key, or not. (optional)
     * @param  int[] $filter_by_key_numbers Filter by assignments key numbers. (optional)
     * @param  \Swagger\Client\Model\Furnishing[] $filter_by_furnishings Filter by assignment furnishing. (optional)
     * @param  float $filter_by_min_price The minimal asking price (optional)
     * @param  float $filter_by_max_price The maximal asking price (optional)
     * @param  int $filter_by_number_of_bedrooms_min The minimal number of bedrooms (optional)
     * @param  int $filter_by_number_of_bedrooms_max The maximal number of bedrooms (optional)
     * @param  bool $is_cancelled Return acquisition assignment that are cancelled or not. Only applies to acquisition assignments. (optional)
     * @param  \Swagger\Client\Model\AcquisitionStatus[] $acquisition_statuses Return acquisition assignments with the specified acquisition statuses. Only applies to acquisition object assignments (optional)
     * @param  \DateTime $available_from_min Return rent assignments with an availability from date higher than the provided date time value. (optional)
     * @param  \DateTime $available_from_max Return rent assignments with an availability from date lower than the provided date time value. (optional)
     * @param  \DateTime $available_until_min Return rent assignments with an availability until date higher than the provided date time value. (optional)
     * @param  \DateTime $available_until_max Return rent assignments with an availability until date lower than the provided date time value. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function assignmentsSearchAndExport($real_estate_agency_id, $assignment_ids = null, $assignment_phases = null, $availabilty_statuses = null, $country_code = null, $employee_ids = null, $filter_by_assignment_types = null, $filter_by_real_estate_groups = null, $for_rent = null, $for_sale = null, $include_statistics = null, $listing_types = null, $localities = null, $office_ids = null, $order_by = null, $relation_ids = null, $term_fields = null, $culture = null, $filter_by_project_assignment_ids = null, $filter_by_object_type_assignment_ids = null, $filter_by_acquisition_assignment_ids = null, $ignore_old_versions = null, $has_key = null, $filter_by_key_numbers = null, $filter_by_furnishings = null, $filter_by_min_price = null, $filter_by_max_price = null, $filter_by_number_of_bedrooms_min = null, $filter_by_number_of_bedrooms_max = null, $is_cancelled = null, $acquisition_statuses = null, $available_from_min = null, $available_from_max = null, $available_until_min = null, $available_until_max = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $this->assignmentsSearchAndExportWithHttpInfo($real_estate_agency_id, $assignment_ids, $assignment_phases, $availabilty_statuses, $country_code, $employee_ids, $filter_by_assignment_types, $filter_by_real_estate_groups, $for_rent, $for_sale, $include_statistics, $listing_types, $localities, $office_ids, $order_by, $relation_ids, $term_fields, $culture, $filter_by_project_assignment_ids, $filter_by_object_type_assignment_ids, $filter_by_acquisition_assignment_ids, $ignore_old_versions, $has_key, $filter_by_key_numbers, $filter_by_furnishings, $filter_by_min_price, $filter_by_max_price, $filter_by_number_of_bedrooms_min, $filter_by_number_of_bedrooms_max, $is_cancelled, $acquisition_statuses, $available_from_min, $available_from_max, $available_until_min, $available_until_max, $filter_by_active, $order, $skip, $take, $term);
    }

    /**
     * Operation assignmentsSearchAndExportWithHttpInfo
     *
     * Search for assignments and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $assignment_ids Search by specific assignment Ids. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\AssignmentPhase[] $assignment_phases Filter by assignment phase (&#39;Concept&#39;, &#39;Initiated&#39;, &#39;Completed&#39;) (optional)
     * @param  \Swagger\Client\Model\AvailabilityStatus[] $availabilty_statuses (optional)
     * @param  string $country_code Filter by selected Country Code. (optional)
     * @param  string[] $employee_ids Filter by selected Employee Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentType[] $filter_by_assignment_types Filter by selected assignment types. (optional)
     * @param  \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...). (optional)
     * @param  bool $for_rent If true assingments that are for rent are returned.. (optional)
     * @param  bool $for_sale If true assingments that are for sale are returned.. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the assignments and total commissions. (optional)
     * @param  \Swagger\Client\Model\ListingType[] $listing_types (optional)
     * @param  string[] $localities Filter by selected Localities. (optional)
     * @param  string[] $office_ids Filter by selected Office Ids. (optional)
     * @param  string $order_by Order the results by the indicated assignment field. (optional)
     * @param  string[] $relation_ids Filter by selected Relation Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  string[] $filter_by_project_assignment_ids Filter by selected Project Ids. (optional)
     * @param  string[] $filter_by_object_type_assignment_ids Filter by selected Object Type Ids. (optional)
     * @param  string[] $filter_by_acquisition_assignment_ids Filter by selected Acquisition Assignment Ids. (optional)
     * @param  bool $ignore_old_versions Assignments might be &#39;versions&#39; of other Assignments (see /ObjectAssignment/MakeVersionOf). To force to receive only the most recent &#39;version&#39; of an Assignment set IgnoreOldVersions to true. (optional)
     * @param  bool $has_key Only return assignment that have a key, or not. (optional)
     * @param  int[] $filter_by_key_numbers Filter by assignments key numbers. (optional)
     * @param  \Swagger\Client\Model\Furnishing[] $filter_by_furnishings Filter by assignment furnishing. (optional)
     * @param  float $filter_by_min_price The minimal asking price (optional)
     * @param  float $filter_by_max_price The maximal asking price (optional)
     * @param  int $filter_by_number_of_bedrooms_min The minimal number of bedrooms (optional)
     * @param  int $filter_by_number_of_bedrooms_max The maximal number of bedrooms (optional)
     * @param  bool $is_cancelled Return acquisition assignment that are cancelled or not. Only applies to acquisition assignments. (optional)
     * @param  \Swagger\Client\Model\AcquisitionStatus[] $acquisition_statuses Return acquisition assignments with the specified acquisition statuses. Only applies to acquisition object assignments (optional)
     * @param  \DateTime $available_from_min Return rent assignments with an availability from date higher than the provided date time value. (optional)
     * @param  \DateTime $available_from_max Return rent assignments with an availability from date lower than the provided date time value. (optional)
     * @param  \DateTime $available_until_min Return rent assignments with an availability until date higher than the provided date time value. (optional)
     * @param  \DateTime $available_until_max Return rent assignments with an availability until date lower than the provided date time value. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignmentsSearchAndExportWithHttpInfo($real_estate_agency_id, $assignment_ids = null, $assignment_phases = null, $availabilty_statuses = null, $country_code = null, $employee_ids = null, $filter_by_assignment_types = null, $filter_by_real_estate_groups = null, $for_rent = null, $for_sale = null, $include_statistics = null, $listing_types = null, $localities = null, $office_ids = null, $order_by = null, $relation_ids = null, $term_fields = null, $culture = null, $filter_by_project_assignment_ids = null, $filter_by_object_type_assignment_ids = null, $filter_by_acquisition_assignment_ids = null, $ignore_old_versions = null, $has_key = null, $filter_by_key_numbers = null, $filter_by_furnishings = null, $filter_by_min_price = null, $filter_by_max_price = null, $filter_by_number_of_bedrooms_min = null, $filter_by_number_of_bedrooms_max = null, $is_cancelled = null, $acquisition_statuses = null, $available_from_min = null, $available_from_max = null, $available_until_min = null, $available_until_max = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $returnType = '';
        $request = $this->assignmentsSearchAndExportRequest($real_estate_agency_id, $assignment_ids, $assignment_phases, $availabilty_statuses, $country_code, $employee_ids, $filter_by_assignment_types, $filter_by_real_estate_groups, $for_rent, $for_sale, $include_statistics, $listing_types, $localities, $office_ids, $order_by, $relation_ids, $term_fields, $culture, $filter_by_project_assignment_ids, $filter_by_object_type_assignment_ids, $filter_by_acquisition_assignment_ids, $ignore_old_versions, $has_key, $filter_by_key_numbers, $filter_by_furnishings, $filter_by_min_price, $filter_by_max_price, $filter_by_number_of_bedrooms_min, $filter_by_number_of_bedrooms_max, $is_cancelled, $acquisition_statuses, $available_from_min, $available_from_max, $available_until_min, $available_until_max, $filter_by_active, $order, $skip, $take, $term);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignmentsSearchAndExportAsync
     *
     * Search for assignments and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $assignment_ids Search by specific assignment Ids. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\AssignmentPhase[] $assignment_phases Filter by assignment phase (&#39;Concept&#39;, &#39;Initiated&#39;, &#39;Completed&#39;) (optional)
     * @param  \Swagger\Client\Model\AvailabilityStatus[] $availabilty_statuses (optional)
     * @param  string $country_code Filter by selected Country Code. (optional)
     * @param  string[] $employee_ids Filter by selected Employee Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentType[] $filter_by_assignment_types Filter by selected assignment types. (optional)
     * @param  \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...). (optional)
     * @param  bool $for_rent If true assingments that are for rent are returned.. (optional)
     * @param  bool $for_sale If true assingments that are for sale are returned.. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the assignments and total commissions. (optional)
     * @param  \Swagger\Client\Model\ListingType[] $listing_types (optional)
     * @param  string[] $localities Filter by selected Localities. (optional)
     * @param  string[] $office_ids Filter by selected Office Ids. (optional)
     * @param  string $order_by Order the results by the indicated assignment field. (optional)
     * @param  string[] $relation_ids Filter by selected Relation Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  string[] $filter_by_project_assignment_ids Filter by selected Project Ids. (optional)
     * @param  string[] $filter_by_object_type_assignment_ids Filter by selected Object Type Ids. (optional)
     * @param  string[] $filter_by_acquisition_assignment_ids Filter by selected Acquisition Assignment Ids. (optional)
     * @param  bool $ignore_old_versions Assignments might be &#39;versions&#39; of other Assignments (see /ObjectAssignment/MakeVersionOf). To force to receive only the most recent &#39;version&#39; of an Assignment set IgnoreOldVersions to true. (optional)
     * @param  bool $has_key Only return assignment that have a key, or not. (optional)
     * @param  int[] $filter_by_key_numbers Filter by assignments key numbers. (optional)
     * @param  \Swagger\Client\Model\Furnishing[] $filter_by_furnishings Filter by assignment furnishing. (optional)
     * @param  float $filter_by_min_price The minimal asking price (optional)
     * @param  float $filter_by_max_price The maximal asking price (optional)
     * @param  int $filter_by_number_of_bedrooms_min The minimal number of bedrooms (optional)
     * @param  int $filter_by_number_of_bedrooms_max The maximal number of bedrooms (optional)
     * @param  bool $is_cancelled Return acquisition assignment that are cancelled or not. Only applies to acquisition assignments. (optional)
     * @param  \Swagger\Client\Model\AcquisitionStatus[] $acquisition_statuses Return acquisition assignments with the specified acquisition statuses. Only applies to acquisition object assignments (optional)
     * @param  \DateTime $available_from_min Return rent assignments with an availability from date higher than the provided date time value. (optional)
     * @param  \DateTime $available_from_max Return rent assignments with an availability from date lower than the provided date time value. (optional)
     * @param  \DateTime $available_until_min Return rent assignments with an availability until date higher than the provided date time value. (optional)
     * @param  \DateTime $available_until_max Return rent assignments with an availability until date lower than the provided date time value. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignmentsSearchAndExportAsync($real_estate_agency_id, $assignment_ids = null, $assignment_phases = null, $availabilty_statuses = null, $country_code = null, $employee_ids = null, $filter_by_assignment_types = null, $filter_by_real_estate_groups = null, $for_rent = null, $for_sale = null, $include_statistics = null, $listing_types = null, $localities = null, $office_ids = null, $order_by = null, $relation_ids = null, $term_fields = null, $culture = null, $filter_by_project_assignment_ids = null, $filter_by_object_type_assignment_ids = null, $filter_by_acquisition_assignment_ids = null, $ignore_old_versions = null, $has_key = null, $filter_by_key_numbers = null, $filter_by_furnishings = null, $filter_by_min_price = null, $filter_by_max_price = null, $filter_by_number_of_bedrooms_min = null, $filter_by_number_of_bedrooms_max = null, $is_cancelled = null, $acquisition_statuses = null, $available_from_min = null, $available_from_max = null, $available_until_min = null, $available_until_max = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        return $this->assignmentsSearchAndExportAsyncWithHttpInfo($real_estate_agency_id, $assignment_ids, $assignment_phases, $availabilty_statuses, $country_code, $employee_ids, $filter_by_assignment_types, $filter_by_real_estate_groups, $for_rent, $for_sale, $include_statistics, $listing_types, $localities, $office_ids, $order_by, $relation_ids, $term_fields, $culture, $filter_by_project_assignment_ids, $filter_by_object_type_assignment_ids, $filter_by_acquisition_assignment_ids, $ignore_old_versions, $has_key, $filter_by_key_numbers, $filter_by_furnishings, $filter_by_min_price, $filter_by_max_price, $filter_by_number_of_bedrooms_min, $filter_by_number_of_bedrooms_max, $is_cancelled, $acquisition_statuses, $available_from_min, $available_from_max, $available_until_min, $available_until_max, $filter_by_active, $order, $skip, $take, $term)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignmentsSearchAndExportAsyncWithHttpInfo
     *
     * Search for assignments and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $assignment_ids Search by specific assignment Ids. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\AssignmentPhase[] $assignment_phases Filter by assignment phase (&#39;Concept&#39;, &#39;Initiated&#39;, &#39;Completed&#39;) (optional)
     * @param  \Swagger\Client\Model\AvailabilityStatus[] $availabilty_statuses (optional)
     * @param  string $country_code Filter by selected Country Code. (optional)
     * @param  string[] $employee_ids Filter by selected Employee Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentType[] $filter_by_assignment_types Filter by selected assignment types. (optional)
     * @param  \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...). (optional)
     * @param  bool $for_rent If true assingments that are for rent are returned.. (optional)
     * @param  bool $for_sale If true assingments that are for sale are returned.. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the assignments and total commissions. (optional)
     * @param  \Swagger\Client\Model\ListingType[] $listing_types (optional)
     * @param  string[] $localities Filter by selected Localities. (optional)
     * @param  string[] $office_ids Filter by selected Office Ids. (optional)
     * @param  string $order_by Order the results by the indicated assignment field. (optional)
     * @param  string[] $relation_ids Filter by selected Relation Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  string[] $filter_by_project_assignment_ids Filter by selected Project Ids. (optional)
     * @param  string[] $filter_by_object_type_assignment_ids Filter by selected Object Type Ids. (optional)
     * @param  string[] $filter_by_acquisition_assignment_ids Filter by selected Acquisition Assignment Ids. (optional)
     * @param  bool $ignore_old_versions Assignments might be &#39;versions&#39; of other Assignments (see /ObjectAssignment/MakeVersionOf). To force to receive only the most recent &#39;version&#39; of an Assignment set IgnoreOldVersions to true. (optional)
     * @param  bool $has_key Only return assignment that have a key, or not. (optional)
     * @param  int[] $filter_by_key_numbers Filter by assignments key numbers. (optional)
     * @param  \Swagger\Client\Model\Furnishing[] $filter_by_furnishings Filter by assignment furnishing. (optional)
     * @param  float $filter_by_min_price The minimal asking price (optional)
     * @param  float $filter_by_max_price The maximal asking price (optional)
     * @param  int $filter_by_number_of_bedrooms_min The minimal number of bedrooms (optional)
     * @param  int $filter_by_number_of_bedrooms_max The maximal number of bedrooms (optional)
     * @param  bool $is_cancelled Return acquisition assignment that are cancelled or not. Only applies to acquisition assignments. (optional)
     * @param  \Swagger\Client\Model\AcquisitionStatus[] $acquisition_statuses Return acquisition assignments with the specified acquisition statuses. Only applies to acquisition object assignments (optional)
     * @param  \DateTime $available_from_min Return rent assignments with an availability from date higher than the provided date time value. (optional)
     * @param  \DateTime $available_from_max Return rent assignments with an availability from date lower than the provided date time value. (optional)
     * @param  \DateTime $available_until_min Return rent assignments with an availability until date higher than the provided date time value. (optional)
     * @param  \DateTime $available_until_max Return rent assignments with an availability until date lower than the provided date time value. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignmentsSearchAndExportAsyncWithHttpInfo($real_estate_agency_id, $assignment_ids = null, $assignment_phases = null, $availabilty_statuses = null, $country_code = null, $employee_ids = null, $filter_by_assignment_types = null, $filter_by_real_estate_groups = null, $for_rent = null, $for_sale = null, $include_statistics = null, $listing_types = null, $localities = null, $office_ids = null, $order_by = null, $relation_ids = null, $term_fields = null, $culture = null, $filter_by_project_assignment_ids = null, $filter_by_object_type_assignment_ids = null, $filter_by_acquisition_assignment_ids = null, $ignore_old_versions = null, $has_key = null, $filter_by_key_numbers = null, $filter_by_furnishings = null, $filter_by_min_price = null, $filter_by_max_price = null, $filter_by_number_of_bedrooms_min = null, $filter_by_number_of_bedrooms_max = null, $is_cancelled = null, $acquisition_statuses = null, $available_from_min = null, $available_from_max = null, $available_until_min = null, $available_until_max = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $returnType = '';
        $request = $this->assignmentsSearchAndExportRequest($real_estate_agency_id, $assignment_ids, $assignment_phases, $availabilty_statuses, $country_code, $employee_ids, $filter_by_assignment_types, $filter_by_real_estate_groups, $for_rent, $for_sale, $include_statistics, $listing_types, $localities, $office_ids, $order_by, $relation_ids, $term_fields, $culture, $filter_by_project_assignment_ids, $filter_by_object_type_assignment_ids, $filter_by_acquisition_assignment_ids, $ignore_old_versions, $has_key, $filter_by_key_numbers, $filter_by_furnishings, $filter_by_min_price, $filter_by_max_price, $filter_by_number_of_bedrooms_min, $filter_by_number_of_bedrooms_max, $is_cancelled, $acquisition_statuses, $available_from_min, $available_from_max, $available_until_min, $available_until_max, $filter_by_active, $order, $skip, $take, $term);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignmentsSearchAndExport'
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $assignment_ids Search by specific assignment Ids. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\AssignmentPhase[] $assignment_phases Filter by assignment phase (&#39;Concept&#39;, &#39;Initiated&#39;, &#39;Completed&#39;) (optional)
     * @param  \Swagger\Client\Model\AvailabilityStatus[] $availabilty_statuses (optional)
     * @param  string $country_code Filter by selected Country Code. (optional)
     * @param  string[] $employee_ids Filter by selected Employee Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentType[] $filter_by_assignment_types Filter by selected assignment types. (optional)
     * @param  \Swagger\Client\Model\RealEstateGroup[] $filter_by_real_estate_groups Filter by selected real estate groups (residential, commercial,...). (optional)
     * @param  bool $for_rent If true assingments that are for rent are returned.. (optional)
     * @param  bool $for_sale If true assingments that are for sale are returned.. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the assignments and total commissions. (optional)
     * @param  \Swagger\Client\Model\ListingType[] $listing_types (optional)
     * @param  string[] $localities Filter by selected Localities. (optional)
     * @param  string[] $office_ids Filter by selected Office Ids. (optional)
     * @param  string $order_by Order the results by the indicated assignment field. (optional)
     * @param  string[] $relation_ids Filter by selected Relation Ids. (optional)
     * @param  \Swagger\Client\Model\AssignmentTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  string[] $filter_by_project_assignment_ids Filter by selected Project Ids. (optional)
     * @param  string[] $filter_by_object_type_assignment_ids Filter by selected Object Type Ids. (optional)
     * @param  string[] $filter_by_acquisition_assignment_ids Filter by selected Acquisition Assignment Ids. (optional)
     * @param  bool $ignore_old_versions Assignments might be &#39;versions&#39; of other Assignments (see /ObjectAssignment/MakeVersionOf). To force to receive only the most recent &#39;version&#39; of an Assignment set IgnoreOldVersions to true. (optional)
     * @param  bool $has_key Only return assignment that have a key, or not. (optional)
     * @param  int[] $filter_by_key_numbers Filter by assignments key numbers. (optional)
     * @param  \Swagger\Client\Model\Furnishing[] $filter_by_furnishings Filter by assignment furnishing. (optional)
     * @param  float $filter_by_min_price The minimal asking price (optional)
     * @param  float $filter_by_max_price The maximal asking price (optional)
     * @param  int $filter_by_number_of_bedrooms_min The minimal number of bedrooms (optional)
     * @param  int $filter_by_number_of_bedrooms_max The maximal number of bedrooms (optional)
     * @param  bool $is_cancelled Return acquisition assignment that are cancelled or not. Only applies to acquisition assignments. (optional)
     * @param  \Swagger\Client\Model\AcquisitionStatus[] $acquisition_statuses Return acquisition assignments with the specified acquisition statuses. Only applies to acquisition object assignments (optional)
     * @param  \DateTime $available_from_min Return rent assignments with an availability from date higher than the provided date time value. (optional)
     * @param  \DateTime $available_from_max Return rent assignments with an availability from date lower than the provided date time value. (optional)
     * @param  \DateTime $available_until_min Return rent assignments with an availability until date higher than the provided date time value. (optional)
     * @param  \DateTime $available_until_max Return rent assignments with an availability until date lower than the provided date time value. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignmentsSearchAndExportRequest($real_estate_agency_id, $assignment_ids = null, $assignment_phases = null, $availabilty_statuses = null, $country_code = null, $employee_ids = null, $filter_by_assignment_types = null, $filter_by_real_estate_groups = null, $for_rent = null, $for_sale = null, $include_statistics = null, $listing_types = null, $localities = null, $office_ids = null, $order_by = null, $relation_ids = null, $term_fields = null, $culture = null, $filter_by_project_assignment_ids = null, $filter_by_object_type_assignment_ids = null, $filter_by_acquisition_assignment_ids = null, $ignore_old_versions = null, $has_key = null, $filter_by_key_numbers = null, $filter_by_furnishings = null, $filter_by_min_price = null, $filter_by_max_price = null, $filter_by_number_of_bedrooms_min = null, $filter_by_number_of_bedrooms_max = null, $is_cancelled = null, $acquisition_statuses = null, $available_from_min = null, $available_from_max = null, $available_until_min = null, $available_until_max = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling assignmentsSearchAndExport'
            );
        }
        if ($culture !== null && strlen($culture) > 5) {
            throw new \InvalidArgumentException('invalid length for "$culture" when calling AssignmentsApi.assignmentsSearchAndExport, must be smaller than or equal to 5.');
        }
        if ($culture !== null && strlen($culture) < 0) {
            throw new \InvalidArgumentException('invalid length for "$culture" when calling AssignmentsApi.assignmentsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($skip !== null && $skip > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AssignmentsApi.assignmentsSearchAndExport, must be smaller than or equal to 2147483647.');
        }
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AssignmentsApi.assignmentsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($take !== null && $take > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling AssignmentsApi.assignmentsSearchAndExport, must be smaller than or equal to 2147483647.');
        }
        if ($take !== null && $take < 0) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling AssignmentsApi.assignmentsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($term !== null && strlen($term) > 50) {
            throw new \InvalidArgumentException('invalid length for "$term" when calling AssignmentsApi.assignmentsSearchAndExport, must be smaller than or equal to 50.');
        }
        if ($term !== null && strlen($term) < 0) {
            throw new \InvalidArgumentException('invalid length for "$term" when calling AssignmentsApi.assignmentsSearchAndExport, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v3/{RealEstateAgencyId}/Assignments/SearchAndExport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($assignment_ids)) {
            $queryParams['assignmentIds'] = $assignment_ids;
        } else
        if ($assignment_ids !== null) {
            $queryParams['assignmentIds'] = ObjectSerializer::toQueryValue($assignment_ids);
        }
        // query params
        if (is_array($assignment_phases)) {
            $queryParams['assignmentPhases'] = $assignment_phases;
        } else
        if ($assignment_phases !== null) {
            $queryParams['assignmentPhases'] = ObjectSerializer::toQueryValue($assignment_phases);
        }
        // query params
        if (is_array($availabilty_statuses)) {
            $queryParams['availabiltyStatuses'] = $availabilty_statuses;
        } else
        if ($availabilty_statuses !== null) {
            $queryParams['availabiltyStatuses'] = ObjectSerializer::toQueryValue($availabilty_statuses);
        }
        // query params
        if ($country_code !== null) {
            $queryParams['countryCode'] = ObjectSerializer::toQueryValue($country_code);
        }
        // query params
        if (is_array($employee_ids)) {
            $queryParams['employeeIds'] = $employee_ids;
        } else
        if ($employee_ids !== null) {
            $queryParams['employeeIds'] = ObjectSerializer::toQueryValue($employee_ids);
        }
        // query params
        if (is_array($filter_by_assignment_types)) {
            $queryParams['filterByAssignmentTypes'] = $filter_by_assignment_types;
        } else
        if ($filter_by_assignment_types !== null) {
            $queryParams['filterByAssignmentTypes'] = ObjectSerializer::toQueryValue($filter_by_assignment_types);
        }
        // query params
        if (is_array($filter_by_real_estate_groups)) {
            $queryParams['filterByRealEstateGroups'] = $filter_by_real_estate_groups;
        } else
        if ($filter_by_real_estate_groups !== null) {
            $queryParams['filterByRealEstateGroups'] = ObjectSerializer::toQueryValue($filter_by_real_estate_groups);
        }
        // query params
        if ($for_rent !== null) {
            $queryParams['forRent'] = ObjectSerializer::toQueryValue($for_rent);
        }
        // query params
        if ($for_sale !== null) {
            $queryParams['forSale'] = ObjectSerializer::toQueryValue($for_sale);
        }
        // query params
        if ($include_statistics !== null) {
            $queryParams['includeStatistics'] = ObjectSerializer::toQueryValue($include_statistics);
        }
        // query params
        if (is_array($listing_types)) {
            $queryParams['listingTypes'] = $listing_types;
        } else
        if ($listing_types !== null) {
            $queryParams['listingTypes'] = ObjectSerializer::toQueryValue($listing_types);
        }
        // query params
        if (is_array($localities)) {
            $queryParams['localities'] = $localities;
        } else
        if ($localities !== null) {
            $queryParams['localities'] = ObjectSerializer::toQueryValue($localities);
        }
        // query params
        if (is_array($office_ids)) {
            $queryParams['officeIds'] = $office_ids;
        } else
        if ($office_ids !== null) {
            $queryParams['officeIds'] = ObjectSerializer::toQueryValue($office_ids);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if (is_array($relation_ids)) {
            $queryParams['relationIds'] = $relation_ids;
        } else
        if ($relation_ids !== null) {
            $queryParams['relationIds'] = ObjectSerializer::toQueryValue($relation_ids);
        }
        // query params
        if (is_array($term_fields)) {
            $queryParams['termFields'] = $term_fields;
        } else
        if ($term_fields !== null) {
            $queryParams['termFields'] = ObjectSerializer::toQueryValue($term_fields);
        }
        // query params
        if ($culture !== null) {
            $queryParams['culture'] = ObjectSerializer::toQueryValue($culture);
        }
        // query params
        if (is_array($filter_by_project_assignment_ids)) {
            $queryParams['filterByProjectAssignmentIds'] = $filter_by_project_assignment_ids;
        } else
        if ($filter_by_project_assignment_ids !== null) {
            $queryParams['filterByProjectAssignmentIds'] = ObjectSerializer::toQueryValue($filter_by_project_assignment_ids);
        }
        // query params
        if (is_array($filter_by_object_type_assignment_ids)) {
            $queryParams['filterByObjectTypeAssignmentIds'] = $filter_by_object_type_assignment_ids;
        } else
        if ($filter_by_object_type_assignment_ids !== null) {
            $queryParams['filterByObjectTypeAssignmentIds'] = ObjectSerializer::toQueryValue($filter_by_object_type_assignment_ids);
        }
        // query params
        if (is_array($filter_by_acquisition_assignment_ids)) {
            $queryParams['filterByAcquisitionAssignmentIds'] = $filter_by_acquisition_assignment_ids;
        } else
        if ($filter_by_acquisition_assignment_ids !== null) {
            $queryParams['filterByAcquisitionAssignmentIds'] = ObjectSerializer::toQueryValue($filter_by_acquisition_assignment_ids);
        }
        // query params
        if ($ignore_old_versions !== null) {
            $queryParams['ignoreOldVersions'] = ObjectSerializer::toQueryValue($ignore_old_versions);
        }
        // query params
        if ($has_key !== null) {
            $queryParams['hasKey'] = ObjectSerializer::toQueryValue($has_key);
        }
        // query params
        if (is_array($filter_by_key_numbers)) {
            $queryParams['filterByKeyNumbers'] = $filter_by_key_numbers;
        } else
        if ($filter_by_key_numbers !== null) {
            $queryParams['filterByKeyNumbers'] = ObjectSerializer::toQueryValue($filter_by_key_numbers);
        }
        // query params
        if (is_array($filter_by_furnishings)) {
            $queryParams['filterByFurnishings'] = $filter_by_furnishings;
        } else
        if ($filter_by_furnishings !== null) {
            $queryParams['filterByFurnishings'] = ObjectSerializer::toQueryValue($filter_by_furnishings);
        }
        // query params
        if ($filter_by_min_price !== null) {
            $queryParams['filterByMinPrice'] = ObjectSerializer::toQueryValue($filter_by_min_price);
        }
        // query params
        if ($filter_by_max_price !== null) {
            $queryParams['filterByMaxPrice'] = ObjectSerializer::toQueryValue($filter_by_max_price);
        }
        // query params
        if ($filter_by_number_of_bedrooms_min !== null) {
            $queryParams['filterByNumberOfBedroomsMin'] = ObjectSerializer::toQueryValue($filter_by_number_of_bedrooms_min);
        }
        // query params
        if ($filter_by_number_of_bedrooms_max !== null) {
            $queryParams['filterByNumberOfBedroomsMax'] = ObjectSerializer::toQueryValue($filter_by_number_of_bedrooms_max);
        }
        // query params
        if ($is_cancelled !== null) {
            $queryParams['isCancelled'] = ObjectSerializer::toQueryValue($is_cancelled);
        }
        // query params
        if (is_array($acquisition_statuses)) {
            $queryParams['acquisitionStatuses'] = $acquisition_statuses;
        } else
        if ($acquisition_statuses !== null) {
            $queryParams['acquisitionStatuses'] = ObjectSerializer::toQueryValue($acquisition_statuses);
        }
        // query params
        if ($available_from_min !== null) {
            $queryParams['availableFromMin'] = ObjectSerializer::toQueryValue($available_from_min);
        }
        // query params
        if ($available_from_max !== null) {
            $queryParams['availableFromMax'] = ObjectSerializer::toQueryValue($available_from_max);
        }
        // query params
        if ($available_until_min !== null) {
            $queryParams['availableUntilMin'] = ObjectSerializer::toQueryValue($available_until_min);
        }
        // query params
        if ($available_until_max !== null) {
            $queryParams['availableUntilMax'] = ObjectSerializer::toQueryValue($available_until_max);
        }
        // query params
        if ($filter_by_active !== null) {
            $queryParams['filterByActive'] = ObjectSerializer::toQueryValue($filter_by_active);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }

        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
