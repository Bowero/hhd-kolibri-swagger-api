<?php
/**
 * BlobsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * BlobsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BlobsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation blobsCreateBatchDownload
     *
     * Create a batch download
     *
     * @param  \Swagger\Client\Model\BatchDownloadRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BatchDownloadResponse
     */
    public function blobsCreateBatchDownload($request, $real_estate_agency_id)
    {
        list($response) = $this->blobsCreateBatchDownloadWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation blobsCreateBatchDownloadWithHttpInfo
     *
     * Create a batch download
     *
     * @param  \Swagger\Client\Model\BatchDownloadRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BatchDownloadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blobsCreateBatchDownloadWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\BatchDownloadResponse';
        $request = $this->blobsCreateBatchDownloadRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BatchDownloadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blobsCreateBatchDownloadAsync
     *
     * Create a batch download
     *
     * @param  \Swagger\Client\Model\BatchDownloadRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsCreateBatchDownloadAsync($request, $real_estate_agency_id)
    {
        return $this->blobsCreateBatchDownloadAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blobsCreateBatchDownloadAsyncWithHttpInfo
     *
     * Create a batch download
     *
     * @param  \Swagger\Client\Model\BatchDownloadRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsCreateBatchDownloadAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\BatchDownloadResponse';
        $request = $this->blobsCreateBatchDownloadRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blobsCreateBatchDownload'
     *
     * @param  \Swagger\Client\Model\BatchDownloadRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blobsCreateBatchDownloadRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling blobsCreateBatchDownload'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling blobsCreateBatchDownload'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Blobs/CreateBatchDownload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blobsDownload
     *
     * @param  string $file_data_id file_data_id (required)
     * @param  string $file_name_and_extension file_name_and_extension (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     * @param  bool $convert_to_pdf convert_to_pdf (optional, default to false)
     * @param  string $file_name file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function blobsDownload($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        $this->blobsDownloadWithHttpInfo($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf, $file_name);
    }

    /**
     * Operation blobsDownloadWithHttpInfo
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function blobsDownloadWithHttpInfo($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsDownloadRequest($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blobsDownloadAsync
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsDownloadAsync($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        return $this->blobsDownloadAsyncWithHttpInfo($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blobsDownloadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsDownloadAsyncWithHttpInfo($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsDownloadRequest($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blobsDownload'
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blobsDownloadRequest($file_data_id, $file_name_and_extension, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        // verify the required parameter 'file_data_id' is set
        if ($file_data_id === null || (is_array($file_data_id) && count($file_data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_data_id when calling blobsDownload'
            );
        }
        // verify the required parameter 'file_name_and_extension' is set
        if ($file_name_and_extension === null || (is_array($file_name_and_extension) && count($file_name_and_extension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name_and_extension when calling blobsDownload'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling blobsDownload'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Blobs/Download/{filedataid}/{filenameandextension}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($convert_to_pdf !== null) {
            $queryParams['convert_to_pdf'] = ObjectSerializer::toQueryValue($convert_to_pdf);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['file_name'] = ObjectSerializer::toQueryValue($file_name);
        }

        // path params
        if ($file_data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileDataId' . '}',
                ObjectSerializer::toPathValue($file_data_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name_and_extension !== null) {
            $resourcePath = str_replace(
                '{' . 'fileNameAndExtension' . '}',
                ObjectSerializer::toPathValue($file_name_and_extension),
                $resourcePath
            );
        }
        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blobsDownload2
     *
     * @param  string $file_data_id file_data_id (required)
     * @param  string $file_name_and_extension file_name_and_extension (required)
     * @param  bool $convert_to_pdf convert_to_pdf (optional, default to false)
     * @param  string $file_name file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function blobsDownload2($file_data_id, $file_name_and_extension, $convert_to_pdf = 'false', $file_name = null)
    {
        $this->blobsDownload2WithHttpInfo($file_data_id, $file_name_and_extension, $convert_to_pdf, $file_name);
    }

    /**
     * Operation blobsDownload2WithHttpInfo
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function blobsDownload2WithHttpInfo($file_data_id, $file_name_and_extension, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsDownload2Request($file_data_id, $file_name_and_extension, $convert_to_pdf, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blobsDownload2Async
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsDownload2Async($file_data_id, $file_name_and_extension, $convert_to_pdf = 'false', $file_name = null)
    {
        return $this->blobsDownload2AsyncWithHttpInfo($file_data_id, $file_name_and_extension, $convert_to_pdf, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blobsDownload2AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsDownload2AsyncWithHttpInfo($file_data_id, $file_name_and_extension, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsDownload2Request($file_data_id, $file_name_and_extension, $convert_to_pdf, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blobsDownload2'
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blobsDownload2Request($file_data_id, $file_name_and_extension, $convert_to_pdf = 'false', $file_name = null)
    {
        // verify the required parameter 'file_data_id' is set
        if ($file_data_id === null || (is_array($file_data_id) && count($file_data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_data_id when calling blobsDownload2'
            );
        }
        // verify the required parameter 'file_name_and_extension' is set
        if ($file_name_and_extension === null || (is_array($file_name_and_extension) && count($file_name_and_extension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name_and_extension when calling blobsDownload2'
            );
        }

        $resourcePath = '/Download/{fileDataId}/{fileNameAndExtension}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($convert_to_pdf !== null) {
            $queryParams['convert_to_pdf'] = ObjectSerializer::toQueryValue($convert_to_pdf);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['file_name'] = ObjectSerializer::toQueryValue($file_name);
        }

        // path params
        if ($file_data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileDataId' . '}',
                ObjectSerializer::toPathValue($file_data_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name_and_extension !== null) {
            $resourcePath = str_replace(
                '{' . 'fileNameAndExtension' . '}',
                ObjectSerializer::toPathValue($file_name_and_extension),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blobsTempAccessDownload
     *
     * @param  string $file_data_id file_data_id (required)
     * @param  string $file_name_and_extension file_name_and_extension (required)
     * @param  string $signed_token signed_token (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     * @param  bool $convert_to_pdf convert_to_pdf (optional, default to false)
     * @param  string $file_name file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function blobsTempAccessDownload($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        $this->blobsTempAccessDownloadWithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf, $file_name);
    }

    /**
     * Operation blobsTempAccessDownloadWithHttpInfo
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function blobsTempAccessDownloadWithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsTempAccessDownloadRequest($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blobsTempAccessDownloadAsync
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsTempAccessDownloadAsync($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        return $this->blobsTempAccessDownloadAsyncWithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blobsTempAccessDownloadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsTempAccessDownloadAsyncWithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsTempAccessDownloadRequest($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blobsTempAccessDownload'
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  string $real_estate_agency_id (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blobsTempAccessDownloadRequest($file_data_id, $file_name_and_extension, $signed_token, $real_estate_agency_id, $convert_to_pdf = 'false', $file_name = null)
    {
        // verify the required parameter 'file_data_id' is set
        if ($file_data_id === null || (is_array($file_data_id) && count($file_data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_data_id when calling blobsTempAccessDownload'
            );
        }
        // verify the required parameter 'file_name_and_extension' is set
        if ($file_name_and_extension === null || (is_array($file_name_and_extension) && count($file_name_and_extension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name_and_extension when calling blobsTempAccessDownload'
            );
        }
        // verify the required parameter 'signed_token' is set
        if ($signed_token === null || (is_array($signed_token) && count($signed_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signed_token when calling blobsTempAccessDownload'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling blobsTempAccessDownload'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Blobs/TempAccessDownload/{filedataid}/{filenameandextension}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($signed_token !== null) {
            $queryParams['signed_token'] = ObjectSerializer::toQueryValue($signed_token);
        }
        // query params
        if ($convert_to_pdf !== null) {
            $queryParams['convert_to_pdf'] = ObjectSerializer::toQueryValue($convert_to_pdf);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['file_name'] = ObjectSerializer::toQueryValue($file_name);
        }

        // path params
        if ($file_data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileDataId' . '}',
                ObjectSerializer::toPathValue($file_data_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name_and_extension !== null) {
            $resourcePath = str_replace(
                '{' . 'fileNameAndExtension' . '}',
                ObjectSerializer::toPathValue($file_name_and_extension),
                $resourcePath
            );
        }
        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blobsTempAccessDownload2
     *
     * @param  string $file_data_id file_data_id (required)
     * @param  string $file_name_and_extension file_name_and_extension (required)
     * @param  string $signed_token signed_token (required)
     * @param  bool $convert_to_pdf convert_to_pdf (optional, default to false)
     * @param  string $file_name file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function blobsTempAccessDownload2($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf = 'false', $file_name = null)
    {
        $this->blobsTempAccessDownload2WithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf, $file_name);
    }

    /**
     * Operation blobsTempAccessDownload2WithHttpInfo
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function blobsTempAccessDownload2WithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsTempAccessDownload2Request($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blobsTempAccessDownload2Async
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsTempAccessDownload2Async($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf = 'false', $file_name = null)
    {
        return $this->blobsTempAccessDownload2AsyncWithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blobsTempAccessDownload2AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsTempAccessDownload2AsyncWithHttpInfo($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf = 'false', $file_name = null)
    {
        $returnType = '';
        $request = $this->blobsTempAccessDownload2Request($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blobsTempAccessDownload2'
     *
     * @param  string $file_data_id (required)
     * @param  string $file_name_and_extension (required)
     * @param  string $signed_token (required)
     * @param  bool $convert_to_pdf (optional, default to false)
     * @param  string $file_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blobsTempAccessDownload2Request($file_data_id, $file_name_and_extension, $signed_token, $convert_to_pdf = 'false', $file_name = null)
    {
        // verify the required parameter 'file_data_id' is set
        if ($file_data_id === null || (is_array($file_data_id) && count($file_data_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_data_id when calling blobsTempAccessDownload2'
            );
        }
        // verify the required parameter 'file_name_and_extension' is set
        if ($file_name_and_extension === null || (is_array($file_name_and_extension) && count($file_name_and_extension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name_and_extension when calling blobsTempAccessDownload2'
            );
        }
        // verify the required parameter 'signed_token' is set
        if ($signed_token === null || (is_array($signed_token) && count($signed_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signed_token when calling blobsTempAccessDownload2'
            );
        }

        $resourcePath = '/TempAccessDownload/{fileDataId}/{fileNameAndExtension}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($signed_token !== null) {
            $queryParams['signed_token'] = ObjectSerializer::toQueryValue($signed_token);
        }
        // query params
        if ($convert_to_pdf !== null) {
            $queryParams['convert_to_pdf'] = ObjectSerializer::toQueryValue($convert_to_pdf);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['file_name'] = ObjectSerializer::toQueryValue($file_name);
        }

        // path params
        if ($file_data_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileDataId' . '}',
                ObjectSerializer::toPathValue($file_data_id),
                $resourcePath
            );
        }
        // path params
        if ($file_name_and_extension !== null) {
            $resourcePath = str_replace(
                '{' . 'fileNameAndExtension' . '}',
                ObjectSerializer::toPathValue($file_name_and_extension),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blobsUpload
     *
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UploadResponse
     */
    public function blobsUpload($real_estate_agency_id)
    {
        list($response) = $this->blobsUploadWithHttpInfo($real_estate_agency_id);
        return $response;
    }

    /**
     * Operation blobsUploadWithHttpInfo
     *
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blobsUploadWithHttpInfo($real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\UploadResponse';
        $request = $this->blobsUploadRequest($real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UploadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blobsUploadAsync
     *
     * 
     *
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsUploadAsync($real_estate_agency_id)
    {
        return $this->blobsUploadAsyncWithHttpInfo($real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blobsUploadAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsUploadAsyncWithHttpInfo($real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\UploadResponse';
        $request = $this->blobsUploadRequest($real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blobsUpload'
     *
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blobsUploadRequest($real_estate_agency_id)
    {
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling blobsUpload'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Blobs/Upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blobsUploadFromUri
     *
     * @param  \Swagger\Client\Model\UploadFromUriRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UploadResponse
     */
    public function blobsUploadFromUri($request, $real_estate_agency_id)
    {
        list($response) = $this->blobsUploadFromUriWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation blobsUploadFromUriWithHttpInfo
     *
     * @param  \Swagger\Client\Model\UploadFromUriRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function blobsUploadFromUriWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\UploadResponse';
        $request = $this->blobsUploadFromUriRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UploadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blobsUploadFromUriAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\UploadFromUriRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsUploadFromUriAsync($request, $real_estate_agency_id)
    {
        return $this->blobsUploadFromUriAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blobsUploadFromUriAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\UploadFromUriRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blobsUploadFromUriAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\UploadResponse';
        $request = $this->blobsUploadFromUriRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blobsUploadFromUri'
     *
     * @param  \Swagger\Client\Model\UploadFromUriRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blobsUploadFromUriRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling blobsUploadFromUri'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling blobsUploadFromUri'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Blobs/UploadFromUri';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
