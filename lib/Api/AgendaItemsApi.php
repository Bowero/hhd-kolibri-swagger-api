<?php
/**
 * AgendaItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AgendaItemsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgendaItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation agendaItemsAddRecurrenceException
     *
     * Adds an occurence exception to a recurring agenda item.
     *
     * @param  \Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionResponse
     */
    public function agendaItemsAddRecurrenceException($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsAddRecurrenceExceptionWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsAddRecurrenceExceptionWithHttpInfo
     *
     * Adds an occurence exception to a recurring agenda item.
     *
     * @param  \Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsAddRecurrenceExceptionWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionResponse';
        $request = $this->agendaItemsAddRecurrenceExceptionRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsAddRecurrenceExceptionAsync
     *
     * Adds an occurence exception to a recurring agenda item.
     *
     * @param  \Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsAddRecurrenceExceptionAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsAddRecurrenceExceptionAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsAddRecurrenceExceptionAsyncWithHttpInfo
     *
     * Adds an occurence exception to a recurring agenda item.
     *
     * @param  \Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsAddRecurrenceExceptionAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionResponse';
        $request = $this->agendaItemsAddRecurrenceExceptionRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsAddRecurrenceException'
     *
     * @param  \Swagger\Client\Model\AgendaItemsAddRecurrencyExceptionRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsAddRecurrenceExceptionRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsAddRecurrenceException'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsAddRecurrenceException'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/AddRecurrenceException';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsCancel
     *
     * Cancel selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsCancelRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSingleItemResponse
     */
    public function agendaItemsCancel($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsCancelWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsCancelWithHttpInfo
     *
     * Cancel selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsCancelRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSingleItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsCancelWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsCancelRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSingleItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsCancelAsync
     *
     * Cancel selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsCancelRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsCancelAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsCancelAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsCancelAsyncWithHttpInfo
     *
     * Cancel selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsCancelRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsCancelAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsCancelRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsCancel'
     *
     * @param  \Swagger\Client\Model\AgendaItemsCancelRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsCancelRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsCancel'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsCancel'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/Cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsConfirm
     *
     * Confirm selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsConfirmRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSingleItemResponse
     */
    public function agendaItemsConfirm($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsConfirmWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsConfirmWithHttpInfo
     *
     * Confirm selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsConfirmRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSingleItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsConfirmWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsConfirmRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSingleItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsConfirmAsync
     *
     * Confirm selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsConfirmRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsConfirmAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsConfirmAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsConfirmAsyncWithHttpInfo
     *
     * Confirm selected agenda item
     *
     * @param  \Swagger\Client\Model\AgendaItemsConfirmRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsConfirmAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsConfirmRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsConfirm'
     *
     * @param  \Swagger\Client\Model\AgendaItemsConfirmRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsConfirmRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsConfirm'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsConfirm'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/Confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsDefineNew
     *
     * Defines a new agendaItem instance, without saving it.
     *
     * @param  \Swagger\Client\Model\AgendaItemsDefineNewRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSingleItemResponse
     */
    public function agendaItemsDefineNew($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsDefineNewWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsDefineNewWithHttpInfo
     *
     * Defines a new agendaItem instance, without saving it.
     *
     * @param  \Swagger\Client\Model\AgendaItemsDefineNewRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSingleItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsDefineNewWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsDefineNewRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSingleItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsDefineNewAsync
     *
     * Defines a new agendaItem instance, without saving it.
     *
     * @param  \Swagger\Client\Model\AgendaItemsDefineNewRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsDefineNewAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsDefineNewAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsDefineNewAsyncWithHttpInfo
     *
     * Defines a new agendaItem instance, without saving it.
     *
     * @param  \Swagger\Client\Model\AgendaItemsDefineNewRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsDefineNewAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsDefineNewRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsDefineNew'
     *
     * @param  \Swagger\Client\Model\AgendaItemsDefineNewRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsDefineNewRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsDefineNew'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsDefineNew'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/DefineNew';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsDelete
     *
     * Delete selected agendaItem
     *
     * @param  string $id id (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function agendaItemsDelete($id, $real_estate_agency_id)
    {
        $this->agendaItemsDeleteWithHttpInfo($id, $real_estate_agency_id);
    }

    /**
     * Operation agendaItemsDeleteWithHttpInfo
     *
     * Delete selected agendaItem
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsDeleteWithHttpInfo($id, $real_estate_agency_id)
    {
        $returnType = '';
        $request = $this->agendaItemsDeleteRequest($id, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsDeleteAsync
     *
     * Delete selected agendaItem
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsDeleteAsync($id, $real_estate_agency_id)
    {
        return $this->agendaItemsDeleteAsyncWithHttpInfo($id, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsDeleteAsyncWithHttpInfo
     *
     * Delete selected agendaItem
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsDeleteAsyncWithHttpInfo($id, $real_estate_agency_id)
    {
        $returnType = '';
        $request = $this->agendaItemsDeleteRequest($id, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsDelete'
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsDeleteRequest($id, $real_estate_agency_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling agendaItemsDelete'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsDelete'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }

        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsExport
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function agendaItemsExport($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsExportWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsExportWithHttpInfo
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsExportWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\SplFileObject';
        $request = $this->agendaItemsExportRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsExportAsync
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsExportAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsExportAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsExportAsyncWithHttpInfo
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsExportAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\SplFileObject';
        $request = $this->agendaItemsExportRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsExport'
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsExportRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsExport'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsExport'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/Export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsMove
     *
     * Update selected agendaItem by changing its startDateTime or endDateTime, allDayEvent end/or attendees (employees).
     *
     * @param  \Swagger\Client\Model\AgendaItemsMoveRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSingleItemResponse
     */
    public function agendaItemsMove($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsMoveWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsMoveWithHttpInfo
     *
     * Update selected agendaItem by changing its startDateTime or endDateTime, allDayEvent end/or attendees (employees).
     *
     * @param  \Swagger\Client\Model\AgendaItemsMoveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSingleItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsMoveWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsMoveRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSingleItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsMoveAsync
     *
     * Update selected agendaItem by changing its startDateTime or endDateTime, allDayEvent end/or attendees (employees).
     *
     * @param  \Swagger\Client\Model\AgendaItemsMoveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsMoveAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsMoveAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsMoveAsyncWithHttpInfo
     *
     * Update selected agendaItem by changing its startDateTime or endDateTime, allDayEvent end/or attendees (employees).
     *
     * @param  \Swagger\Client\Model\AgendaItemsMoveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsMoveAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsMoveRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsMove'
     *
     * @param  \Swagger\Client\Model\AgendaItemsMoveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsMoveRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsMove'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsMove'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/Move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsRead
     *
     * Read a single agendaItem.
     *
     * @param  string $id id (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSingleItemResponse
     */
    public function agendaItemsRead($id, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsReadWithHttpInfo($id, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsReadWithHttpInfo
     *
     * Read a single agendaItem.
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSingleItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsReadWithHttpInfo($id, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsReadRequest($id, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSingleItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsReadAsync
     *
     * Read a single agendaItem.
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsReadAsync($id, $real_estate_agency_id)
    {
        return $this->agendaItemsReadAsyncWithHttpInfo($id, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsReadAsyncWithHttpInfo
     *
     * Read a single agendaItem.
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsReadAsyncWithHttpInfo($id, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsReadRequest($id, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsRead'
     *
     * @param  string $id (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsReadRequest($id, $real_estate_agency_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling agendaItemsRead'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsRead'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }

        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsSave
     *
     * Save given agendaItem
     *
     * @param  \Swagger\Client\Model\AgendaItemsSaveRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSingleItemResponse
     */
    public function agendaItemsSave($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsSaveWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsSaveWithHttpInfo
     *
     * Save given agendaItem
     *
     * @param  \Swagger\Client\Model\AgendaItemsSaveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSingleItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsSaveWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsSaveRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSingleItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsSaveAsync
     *
     * Save given agendaItem
     *
     * @param  \Swagger\Client\Model\AgendaItemsSaveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsSaveAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsSaveAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsSaveAsyncWithHttpInfo
     *
     * Save given agendaItem
     *
     * @param  \Swagger\Client\Model\AgendaItemsSaveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsSaveAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsSaveRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsSave'
     *
     * @param  \Swagger\Client\Model\AgendaItemsSaveRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsSaveRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsSave'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsSave'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsSearch
     *
     * Search for agendaItems.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSearchResponse
     */
    public function agendaItemsSearch($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsSearchWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsSearchWithHttpInfo
     *
     * Search for agendaItems.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsSearchWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSearchResponse';
        $request = $this->agendaItemsSearchRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsSearchAsync
     *
     * Search for agendaItems.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsSearchAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsSearchAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsSearchAsyncWithHttpInfo
     *
     * Search for agendaItems.
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsSearchAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSearchResponse';
        $request = $this->agendaItemsSearchRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsSearch'
     *
     * @param  \Swagger\Client\Model\AgendaItemsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsSearchRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsSearch'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsSearch'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/Search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsSearchAndExport
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     * @param  string[] $category_ids Only return agendaItems linked at one of the categories indicated by given AgendaItem category Id&#39;s. (optional)
     * @param  \Swagger\Client\Model\AgendaItemCategoryType[] $category_types Only return agendaItems linked at one of the categories with a category type indicated by given AgendaItem Category Types. (optional)
     * @param  string[] $employee_ids Search the agendaItems of the given employees. (optional)
     * @param  string $order_by Order the results by the indicated AgendaItem field. (optional)
     * @param  \DateTime $period_date_time_max Highest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \DateTime $period_date_time_min Lowest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \Swagger\Client\Model\AgendaItemTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  bool $is_canceled If isCanceled is null, results are eiter canceled or not. If it is defined as true, only canceled results are returned. If it is defined as false, only not canceled results are returned. (optional)
     * @param  bool $is_confirmed If isConfirmed is null, results are either confirmed or not. If it is defined as true, only confirmed results are returned. If it is defined as false, only non confirmed results are returned. (optional)
     * @param  bool $return_occurences_of_recurring_agenda_items If returnOccurencesOfRecurringAgendaItems is set to true each occurence of a recurring agendaitem will be in the search results. When set to false only the recurring agendaItem (with its recurrency patter) is in the results. For the /AgendaItem/Search endpoint the default value of returnOccurencesOfRecurringAgendaItems is false. For the /AgendaItem/SearchAndExport endpoint the default value of returnOccurencesOfRecurringAgendaItems is true. (optional)
     * @param  string $agenda_item_id Search by a specific agendaItem Id. Used to return/refresh one search result. (optional)
     * @param  string[] $agenda_item_ids Search by specific agenda item Ids. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function agendaItemsSearchAndExport($real_estate_agency_id, $category_ids = null, $category_types = null, $employee_ids = null, $order_by = null, $period_date_time_max = null, $period_date_time_min = null, $term_fields = null, $culture = null, $is_canceled = null, $is_confirmed = null, $return_occurences_of_recurring_agenda_items = null, $agenda_item_id = null, $agenda_item_ids = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        list($response) = $this->agendaItemsSearchAndExportWithHttpInfo($real_estate_agency_id, $category_ids, $category_types, $employee_ids, $order_by, $period_date_time_max, $period_date_time_min, $term_fields, $culture, $is_canceled, $is_confirmed, $return_occurences_of_recurring_agenda_items, $agenda_item_id, $agenda_item_ids, $filter_by_active, $order, $skip, $take, $term);
        return $response;
    }

    /**
     * Operation agendaItemsSearchAndExportWithHttpInfo
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $category_ids Only return agendaItems linked at one of the categories indicated by given AgendaItem category Id&#39;s. (optional)
     * @param  \Swagger\Client\Model\AgendaItemCategoryType[] $category_types Only return agendaItems linked at one of the categories with a category type indicated by given AgendaItem Category Types. (optional)
     * @param  string[] $employee_ids Search the agendaItems of the given employees. (optional)
     * @param  string $order_by Order the results by the indicated AgendaItem field. (optional)
     * @param  \DateTime $period_date_time_max Highest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \DateTime $period_date_time_min Lowest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \Swagger\Client\Model\AgendaItemTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  bool $is_canceled If isCanceled is null, results are eiter canceled or not. If it is defined as true, only canceled results are returned. If it is defined as false, only not canceled results are returned. (optional)
     * @param  bool $is_confirmed If isConfirmed is null, results are either confirmed or not. If it is defined as true, only confirmed results are returned. If it is defined as false, only non confirmed results are returned. (optional)
     * @param  bool $return_occurences_of_recurring_agenda_items If returnOccurencesOfRecurringAgendaItems is set to true each occurence of a recurring agendaitem will be in the search results. When set to false only the recurring agendaItem (with its recurrency patter) is in the results. For the /AgendaItem/Search endpoint the default value of returnOccurencesOfRecurringAgendaItems is false. For the /AgendaItem/SearchAndExport endpoint the default value of returnOccurencesOfRecurringAgendaItems is true. (optional)
     * @param  string $agenda_item_id Search by a specific agendaItem Id. Used to return/refresh one search result. (optional)
     * @param  string[] $agenda_item_ids Search by specific agenda item Ids. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsSearchAndExportWithHttpInfo($real_estate_agency_id, $category_ids = null, $category_types = null, $employee_ids = null, $order_by = null, $period_date_time_max = null, $period_date_time_min = null, $term_fields = null, $culture = null, $is_canceled = null, $is_confirmed = null, $return_occurences_of_recurring_agenda_items = null, $agenda_item_id = null, $agenda_item_ids = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->agendaItemsSearchAndExportRequest($real_estate_agency_id, $category_ids, $category_types, $employee_ids, $order_by, $period_date_time_max, $period_date_time_min, $term_fields, $culture, $is_canceled, $is_confirmed, $return_occurences_of_recurring_agenda_items, $agenda_item_id, $agenda_item_ids, $filter_by_active, $order, $skip, $take, $term);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsSearchAndExportAsync
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $category_ids Only return agendaItems linked at one of the categories indicated by given AgendaItem category Id&#39;s. (optional)
     * @param  \Swagger\Client\Model\AgendaItemCategoryType[] $category_types Only return agendaItems linked at one of the categories with a category type indicated by given AgendaItem Category Types. (optional)
     * @param  string[] $employee_ids Search the agendaItems of the given employees. (optional)
     * @param  string $order_by Order the results by the indicated AgendaItem field. (optional)
     * @param  \DateTime $period_date_time_max Highest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \DateTime $period_date_time_min Lowest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \Swagger\Client\Model\AgendaItemTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  bool $is_canceled If isCanceled is null, results are eiter canceled or not. If it is defined as true, only canceled results are returned. If it is defined as false, only not canceled results are returned. (optional)
     * @param  bool $is_confirmed If isConfirmed is null, results are either confirmed or not. If it is defined as true, only confirmed results are returned. If it is defined as false, only non confirmed results are returned. (optional)
     * @param  bool $return_occurences_of_recurring_agenda_items If returnOccurencesOfRecurringAgendaItems is set to true each occurence of a recurring agendaitem will be in the search results. When set to false only the recurring agendaItem (with its recurrency patter) is in the results. For the /AgendaItem/Search endpoint the default value of returnOccurencesOfRecurringAgendaItems is false. For the /AgendaItem/SearchAndExport endpoint the default value of returnOccurencesOfRecurringAgendaItems is true. (optional)
     * @param  string $agenda_item_id Search by a specific agendaItem Id. Used to return/refresh one search result. (optional)
     * @param  string[] $agenda_item_ids Search by specific agenda item Ids. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsSearchAndExportAsync($real_estate_agency_id, $category_ids = null, $category_types = null, $employee_ids = null, $order_by = null, $period_date_time_max = null, $period_date_time_min = null, $term_fields = null, $culture = null, $is_canceled = null, $is_confirmed = null, $return_occurences_of_recurring_agenda_items = null, $agenda_item_id = null, $agenda_item_ids = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        return $this->agendaItemsSearchAndExportAsyncWithHttpInfo($real_estate_agency_id, $category_ids, $category_types, $employee_ids, $order_by, $period_date_time_max, $period_date_time_min, $term_fields, $culture, $is_canceled, $is_confirmed, $return_occurences_of_recurring_agenda_items, $agenda_item_id, $agenda_item_ids, $filter_by_active, $order, $skip, $take, $term)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsSearchAndExportAsyncWithHttpInfo
     *
     * Search for agenda items and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $category_ids Only return agendaItems linked at one of the categories indicated by given AgendaItem category Id&#39;s. (optional)
     * @param  \Swagger\Client\Model\AgendaItemCategoryType[] $category_types Only return agendaItems linked at one of the categories with a category type indicated by given AgendaItem Category Types. (optional)
     * @param  string[] $employee_ids Search the agendaItems of the given employees. (optional)
     * @param  string $order_by Order the results by the indicated AgendaItem field. (optional)
     * @param  \DateTime $period_date_time_max Highest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \DateTime $period_date_time_min Lowest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \Swagger\Client\Model\AgendaItemTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  bool $is_canceled If isCanceled is null, results are eiter canceled or not. If it is defined as true, only canceled results are returned. If it is defined as false, only not canceled results are returned. (optional)
     * @param  bool $is_confirmed If isConfirmed is null, results are either confirmed or not. If it is defined as true, only confirmed results are returned. If it is defined as false, only non confirmed results are returned. (optional)
     * @param  bool $return_occurences_of_recurring_agenda_items If returnOccurencesOfRecurringAgendaItems is set to true each occurence of a recurring agendaitem will be in the search results. When set to false only the recurring agendaItem (with its recurrency patter) is in the results. For the /AgendaItem/Search endpoint the default value of returnOccurencesOfRecurringAgendaItems is false. For the /AgendaItem/SearchAndExport endpoint the default value of returnOccurencesOfRecurringAgendaItems is true. (optional)
     * @param  string $agenda_item_id Search by a specific agendaItem Id. Used to return/refresh one search result. (optional)
     * @param  string[] $agenda_item_ids Search by specific agenda item Ids. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsSearchAndExportAsyncWithHttpInfo($real_estate_agency_id, $category_ids = null, $category_types = null, $employee_ids = null, $order_by = null, $period_date_time_max = null, $period_date_time_min = null, $term_fields = null, $culture = null, $is_canceled = null, $is_confirmed = null, $return_occurences_of_recurring_agenda_items = null, $agenda_item_id = null, $agenda_item_ids = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->agendaItemsSearchAndExportRequest($real_estate_agency_id, $category_ids, $category_types, $employee_ids, $order_by, $period_date_time_max, $period_date_time_min, $term_fields, $culture, $is_canceled, $is_confirmed, $return_occurences_of_recurring_agenda_items, $agenda_item_id, $agenda_item_ids, $filter_by_active, $order, $skip, $take, $term);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsSearchAndExport'
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $category_ids Only return agendaItems linked at one of the categories indicated by given AgendaItem category Id&#39;s. (optional)
     * @param  \Swagger\Client\Model\AgendaItemCategoryType[] $category_types Only return agendaItems linked at one of the categories with a category type indicated by given AgendaItem Category Types. (optional)
     * @param  string[] $employee_ids Search the agendaItems of the given employees. (optional)
     * @param  string $order_by Order the results by the indicated AgendaItem field. (optional)
     * @param  \DateTime $period_date_time_max Highest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \DateTime $period_date_time_min Lowest value agenda items should occur. Not required when searching by AgendaItemId. (optional)
     * @param  \Swagger\Client\Model\AgendaItemTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  bool $is_canceled If isCanceled is null, results are eiter canceled or not. If it is defined as true, only canceled results are returned. If it is defined as false, only not canceled results are returned. (optional)
     * @param  bool $is_confirmed If isConfirmed is null, results are either confirmed or not. If it is defined as true, only confirmed results are returned. If it is defined as false, only non confirmed results are returned. (optional)
     * @param  bool $return_occurences_of_recurring_agenda_items If returnOccurencesOfRecurringAgendaItems is set to true each occurence of a recurring agendaitem will be in the search results. When set to false only the recurring agendaItem (with its recurrency patter) is in the results. For the /AgendaItem/Search endpoint the default value of returnOccurencesOfRecurringAgendaItems is false. For the /AgendaItem/SearchAndExport endpoint the default value of returnOccurencesOfRecurringAgendaItems is true. (optional)
     * @param  string $agenda_item_id Search by a specific agendaItem Id. Used to return/refresh one search result. (optional)
     * @param  string[] $agenda_item_ids Search by specific agenda item Ids. (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsSearchAndExportRequest($real_estate_agency_id, $category_ids = null, $category_types = null, $employee_ids = null, $order_by = null, $period_date_time_max = null, $period_date_time_min = null, $term_fields = null, $culture = null, $is_canceled = null, $is_confirmed = null, $return_occurences_of_recurring_agenda_items = null, $agenda_item_id = null, $agenda_item_ids = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsSearchAndExport'
            );
        }
        if ($culture !== null && strlen($culture) > 5) {
            throw new \InvalidArgumentException('invalid length for "$culture" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be smaller than or equal to 5.');
        }
        if ($culture !== null && strlen($culture) < 0) {
            throw new \InvalidArgumentException('invalid length for "$culture" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($skip !== null && $skip > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be smaller than or equal to 2147483647.');
        }
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($take !== null && $take > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be smaller than or equal to 2147483647.');
        }
        if ($take !== null && $take < 0) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($term !== null && strlen($term) > 50) {
            throw new \InvalidArgumentException('invalid length for "$term" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be smaller than or equal to 50.');
        }
        if ($term !== null && strlen($term) < 0) {
            throw new \InvalidArgumentException('invalid length for "$term" when calling AgendaItemsApi.agendaItemsSearchAndExport, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/SearchAndExport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($category_ids)) {
            $queryParams['categoryIds'] = $category_ids;
        } else
        if ($category_ids !== null) {
            $queryParams['categoryIds'] = ObjectSerializer::toQueryValue($category_ids);
        }
        // query params
        if (is_array($category_types)) {
            $queryParams['categoryTypes'] = $category_types;
        } else
        if ($category_types !== null) {
            $queryParams['categoryTypes'] = ObjectSerializer::toQueryValue($category_types);
        }
        // query params
        if (is_array($employee_ids)) {
            $queryParams['employeeIds'] = $employee_ids;
        } else
        if ($employee_ids !== null) {
            $queryParams['employeeIds'] = ObjectSerializer::toQueryValue($employee_ids);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($period_date_time_max !== null) {
            $queryParams['periodDateTimeMax'] = ObjectSerializer::toQueryValue($period_date_time_max);
        }
        // query params
        if ($period_date_time_min !== null) {
            $queryParams['periodDateTimeMin'] = ObjectSerializer::toQueryValue($period_date_time_min);
        }
        // query params
        if (is_array($term_fields)) {
            $queryParams['termFields'] = $term_fields;
        } else
        if ($term_fields !== null) {
            $queryParams['termFields'] = ObjectSerializer::toQueryValue($term_fields);
        }
        // query params
        if ($culture !== null) {
            $queryParams['culture'] = ObjectSerializer::toQueryValue($culture);
        }
        // query params
        if ($is_canceled !== null) {
            $queryParams['isCanceled'] = ObjectSerializer::toQueryValue($is_canceled);
        }
        // query params
        if ($is_confirmed !== null) {
            $queryParams['isConfirmed'] = ObjectSerializer::toQueryValue($is_confirmed);
        }
        // query params
        if ($return_occurences_of_recurring_agenda_items !== null) {
            $queryParams['returnOccurencesOfRecurringAgendaItems'] = ObjectSerializer::toQueryValue($return_occurences_of_recurring_agenda_items);
        }
        // query params
        if ($agenda_item_id !== null) {
            $queryParams['agendaItemId'] = ObjectSerializer::toQueryValue($agenda_item_id);
        }
        // query params
        if (is_array($agenda_item_ids)) {
            $queryParams['agendaItemIds'] = $agenda_item_ids;
        } else
        if ($agenda_item_ids !== null) {
            $queryParams['agendaItemIds'] = ObjectSerializer::toQueryValue($agenda_item_ids);
        }
        // query params
        if ($filter_by_active !== null) {
            $queryParams['filterByActive'] = ObjectSerializer::toQueryValue($filter_by_active);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }

        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation agendaItemsUndelete
     *
     * Undelete selected agendaItem
     *
     * @param  \Swagger\Client\Model\UndeleteRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AgendaItemsSingleItemResponse
     */
    public function agendaItemsUndelete($request, $real_estate_agency_id)
    {
        list($response) = $this->agendaItemsUndeleteWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation agendaItemsUndeleteWithHttpInfo
     *
     * Undelete selected agendaItem
     *
     * @param  \Swagger\Client\Model\UndeleteRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AgendaItemsSingleItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function agendaItemsUndeleteWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsUndeleteRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AgendaItemsSingleItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation agendaItemsUndeleteAsync
     *
     * Undelete selected agendaItem
     *
     * @param  \Swagger\Client\Model\UndeleteRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsUndeleteAsync($request, $real_estate_agency_id)
    {
        return $this->agendaItemsUndeleteAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation agendaItemsUndeleteAsyncWithHttpInfo
     *
     * Undelete selected agendaItem
     *
     * @param  \Swagger\Client\Model\UndeleteRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function agendaItemsUndeleteAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\AgendaItemsSingleItemResponse';
        $request = $this->agendaItemsUndeleteRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'agendaItemsUndelete'
     *
     * @param  \Swagger\Client\Model\UndeleteRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function agendaItemsUndeleteRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling agendaItemsUndelete'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling agendaItemsUndelete'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/AgendaItems/Undelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
