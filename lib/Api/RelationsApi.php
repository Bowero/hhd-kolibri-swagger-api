<?php
/**
 * RelationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * RelationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation relationsExport
     *
     * Search for relations and export result to Excel.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function relationsExport($request, $real_estate_agency_id)
    {
        $this->relationsExportWithHttpInfo($request, $real_estate_agency_id);
    }

    /**
     * Operation relationsExportWithHttpInfo
     *
     * Search for relations and export result to Excel.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function relationsExportWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '';
        $request = $this->relationsExportRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation relationsExportAsync
     *
     * Search for relations and export result to Excel.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relationsExportAsync($request, $real_estate_agency_id)
    {
        return $this->relationsExportAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation relationsExportAsyncWithHttpInfo
     *
     * Search for relations and export result to Excel.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relationsExportAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '';
        $request = $this->relationsExportRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'relationsExport'
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function relationsExportRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling relationsExport'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling relationsExport'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Relations/Export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation relationsSearch
     *
     * Search for relations.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request request (required)
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RelationsSearchResponse
     */
    public function relationsSearch($request, $real_estate_agency_id)
    {
        list($response) = $this->relationsSearchWithHttpInfo($request, $real_estate_agency_id);
        return $response;
    }

    /**
     * Operation relationsSearchWithHttpInfo
     *
     * Search for relations.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RelationsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function relationsSearchWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\RelationsSearchResponse';
        $request = $this->relationsSearchRequest($request, $real_estate_agency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RelationsSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation relationsSearchAsync
     *
     * Search for relations.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relationsSearchAsync($request, $real_estate_agency_id)
    {
        return $this->relationsSearchAsyncWithHttpInfo($request, $real_estate_agency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation relationsSearchAsyncWithHttpInfo
     *
     * Search for relations.
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relationsSearchAsyncWithHttpInfo($request, $real_estate_agency_id)
    {
        $returnType = '\Swagger\Client\Model\RelationsSearchResponse';
        $request = $this->relationsSearchRequest($request, $real_estate_agency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'relationsSearch'
     *
     * @param  \Swagger\Client\Model\RelationsSearchRequest $request (required)
     * @param  string $real_estate_agency_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function relationsSearchRequest($request, $real_estate_agency_id)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling relationsSearch'
            );
        }
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling relationsSearch'
            );
        }

        $resourcePath = '/v3/{RealEstateAgencyId}/Relations/Search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation relationsSearchAndExport
     *
     * Search for relations and export result to Excel.
     *
     * @param  string $real_estate_agency_id real_estate_agency_id (required)
     * @param  string[] $filter_by_relation_group_ids Filter by selected relation group id&#39;s. (optional)
     * @param  \Swagger\Client\Model\RelationType[] $filter_by_relation_types Filter by selected relation types. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the relations. (optional)
     * @param  bool $include_back_office_employees Include back office employees if FilterByRelationTypes contains employees. (optional, default to false)
     * @param  string $order_by Order the results by the indicated relation field. (optional)
     * @param  string $relation_id Search by a specific relation Id. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\RelationTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  \DateTime $min_date_time_created Filter by items created at or after the minimum datetime created. (optional)
     * @param  \DateTime $max_date_time_created Filter by items created at or before the given maximum datetime created. (optional)
     * @param  \DateTime $min_date_time_modified Filter by items created at or after the minimum datetime modified. (optional)
     * @param  \DateTime $max_date_time_modified Filter by items modified at or before the given maximum datetime modified. (optional)
     * @param  string[] $email_addresses Filter by email address for relations. Multiple email addresses can be specified, all relations with any matching email address will be returned. (optional)
     * @param  string[] $relation_ids Search by specific task Ids. Used to return/refresh one search result. (optional)
     * @param  string $phone_number phone_number (optional)
     * @param  bool $has_phone_number has_phone_number (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function relationsSearchAndExport($real_estate_agency_id, $filter_by_relation_group_ids = null, $filter_by_relation_types = null, $include_statistics = null, $include_back_office_employees = 'false', $order_by = null, $relation_id = null, $term_fields = null, $culture = null, $min_date_time_created = null, $max_date_time_created = null, $min_date_time_modified = null, $max_date_time_modified = null, $email_addresses = null, $relation_ids = null, $phone_number = null, $has_phone_number = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $this->relationsSearchAndExportWithHttpInfo($real_estate_agency_id, $filter_by_relation_group_ids, $filter_by_relation_types, $include_statistics, $include_back_office_employees, $order_by, $relation_id, $term_fields, $culture, $min_date_time_created, $max_date_time_created, $min_date_time_modified, $max_date_time_modified, $email_addresses, $relation_ids, $phone_number, $has_phone_number, $filter_by_active, $order, $skip, $take, $term);
    }

    /**
     * Operation relationsSearchAndExportWithHttpInfo
     *
     * Search for relations and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $filter_by_relation_group_ids Filter by selected relation group id&#39;s. (optional)
     * @param  \Swagger\Client\Model\RelationType[] $filter_by_relation_types Filter by selected relation types. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the relations. (optional)
     * @param  bool $include_back_office_employees Include back office employees if FilterByRelationTypes contains employees. (optional, default to false)
     * @param  string $order_by Order the results by the indicated relation field. (optional)
     * @param  string $relation_id Search by a specific relation Id. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\RelationTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  \DateTime $min_date_time_created Filter by items created at or after the minimum datetime created. (optional)
     * @param  \DateTime $max_date_time_created Filter by items created at or before the given maximum datetime created. (optional)
     * @param  \DateTime $min_date_time_modified Filter by items created at or after the minimum datetime modified. (optional)
     * @param  \DateTime $max_date_time_modified Filter by items modified at or before the given maximum datetime modified. (optional)
     * @param  string[] $email_addresses Filter by email address for relations. Multiple email addresses can be specified, all relations with any matching email address will be returned. (optional)
     * @param  string[] $relation_ids Search by specific task Ids. Used to return/refresh one search result. (optional)
     * @param  string $phone_number (optional)
     * @param  bool $has_phone_number (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function relationsSearchAndExportWithHttpInfo($real_estate_agency_id, $filter_by_relation_group_ids = null, $filter_by_relation_types = null, $include_statistics = null, $include_back_office_employees = 'false', $order_by = null, $relation_id = null, $term_fields = null, $culture = null, $min_date_time_created = null, $max_date_time_created = null, $min_date_time_modified = null, $max_date_time_modified = null, $email_addresses = null, $relation_ids = null, $phone_number = null, $has_phone_number = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $returnType = '';
        $request = $this->relationsSearchAndExportRequest($real_estate_agency_id, $filter_by_relation_group_ids, $filter_by_relation_types, $include_statistics, $include_back_office_employees, $order_by, $relation_id, $term_fields, $culture, $min_date_time_created, $max_date_time_created, $min_date_time_modified, $max_date_time_modified, $email_addresses, $relation_ids, $phone_number, $has_phone_number, $filter_by_active, $order, $skip, $take, $term);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HttpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation relationsSearchAndExportAsync
     *
     * Search for relations and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $filter_by_relation_group_ids Filter by selected relation group id&#39;s. (optional)
     * @param  \Swagger\Client\Model\RelationType[] $filter_by_relation_types Filter by selected relation types. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the relations. (optional)
     * @param  bool $include_back_office_employees Include back office employees if FilterByRelationTypes contains employees. (optional, default to false)
     * @param  string $order_by Order the results by the indicated relation field. (optional)
     * @param  string $relation_id Search by a specific relation Id. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\RelationTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  \DateTime $min_date_time_created Filter by items created at or after the minimum datetime created. (optional)
     * @param  \DateTime $max_date_time_created Filter by items created at or before the given maximum datetime created. (optional)
     * @param  \DateTime $min_date_time_modified Filter by items created at or after the minimum datetime modified. (optional)
     * @param  \DateTime $max_date_time_modified Filter by items modified at or before the given maximum datetime modified. (optional)
     * @param  string[] $email_addresses Filter by email address for relations. Multiple email addresses can be specified, all relations with any matching email address will be returned. (optional)
     * @param  string[] $relation_ids Search by specific task Ids. Used to return/refresh one search result. (optional)
     * @param  string $phone_number (optional)
     * @param  bool $has_phone_number (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relationsSearchAndExportAsync($real_estate_agency_id, $filter_by_relation_group_ids = null, $filter_by_relation_types = null, $include_statistics = null, $include_back_office_employees = 'false', $order_by = null, $relation_id = null, $term_fields = null, $culture = null, $min_date_time_created = null, $max_date_time_created = null, $min_date_time_modified = null, $max_date_time_modified = null, $email_addresses = null, $relation_ids = null, $phone_number = null, $has_phone_number = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        return $this->relationsSearchAndExportAsyncWithHttpInfo($real_estate_agency_id, $filter_by_relation_group_ids, $filter_by_relation_types, $include_statistics, $include_back_office_employees, $order_by, $relation_id, $term_fields, $culture, $min_date_time_created, $max_date_time_created, $min_date_time_modified, $max_date_time_modified, $email_addresses, $relation_ids, $phone_number, $has_phone_number, $filter_by_active, $order, $skip, $take, $term)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation relationsSearchAndExportAsyncWithHttpInfo
     *
     * Search for relations and export result to Excel.
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $filter_by_relation_group_ids Filter by selected relation group id&#39;s. (optional)
     * @param  \Swagger\Client\Model\RelationType[] $filter_by_relation_types Filter by selected relation types. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the relations. (optional)
     * @param  bool $include_back_office_employees Include back office employees if FilterByRelationTypes contains employees. (optional, default to false)
     * @param  string $order_by Order the results by the indicated relation field. (optional)
     * @param  string $relation_id Search by a specific relation Id. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\RelationTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  \DateTime $min_date_time_created Filter by items created at or after the minimum datetime created. (optional)
     * @param  \DateTime $max_date_time_created Filter by items created at or before the given maximum datetime created. (optional)
     * @param  \DateTime $min_date_time_modified Filter by items created at or after the minimum datetime modified. (optional)
     * @param  \DateTime $max_date_time_modified Filter by items modified at or before the given maximum datetime modified. (optional)
     * @param  string[] $email_addresses Filter by email address for relations. Multiple email addresses can be specified, all relations with any matching email address will be returned. (optional)
     * @param  string[] $relation_ids Search by specific task Ids. Used to return/refresh one search result. (optional)
     * @param  string $phone_number (optional)
     * @param  bool $has_phone_number (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relationsSearchAndExportAsyncWithHttpInfo($real_estate_agency_id, $filter_by_relation_group_ids = null, $filter_by_relation_types = null, $include_statistics = null, $include_back_office_employees = 'false', $order_by = null, $relation_id = null, $term_fields = null, $culture = null, $min_date_time_created = null, $max_date_time_created = null, $min_date_time_modified = null, $max_date_time_modified = null, $email_addresses = null, $relation_ids = null, $phone_number = null, $has_phone_number = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        $returnType = '';
        $request = $this->relationsSearchAndExportRequest($real_estate_agency_id, $filter_by_relation_group_ids, $filter_by_relation_types, $include_statistics, $include_back_office_employees, $order_by, $relation_id, $term_fields, $culture, $min_date_time_created, $max_date_time_created, $min_date_time_modified, $max_date_time_modified, $email_addresses, $relation_ids, $phone_number, $has_phone_number, $filter_by_active, $order, $skip, $take, $term);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'relationsSearchAndExport'
     *
     * @param  string $real_estate_agency_id (required)
     * @param  string[] $filter_by_relation_group_ids Filter by selected relation group id&#39;s. (optional)
     * @param  \Swagger\Client\Model\RelationType[] $filter_by_relation_types Filter by selected relation types. (optional)
     * @param  bool $include_statistics Return statistics, like lists of unique localities of the relations. (optional)
     * @param  bool $include_back_office_employees Include back office employees if FilterByRelationTypes contains employees. (optional, default to false)
     * @param  string $order_by Order the results by the indicated relation field. (optional)
     * @param  string $relation_id Search by a specific relation Id. Used to return/refresh one search result. (optional)
     * @param  \Swagger\Client\Model\RelationTermField[] $term_fields Search for given text (Term) indicated by the fields in the TermFields list. Required in case &#39;Term&#39; is given. (optional)
     * @param  string $culture The culture name in the format languagecode2-country/regioncode2. Available cultures: \&quot;nl-NL\&quot; and \&quot;en-GB\&quot;. If no or an unsupported culture is given the default culture is used (\&quot;nl-NL\&quot;). (optional)
     * @param  \DateTime $min_date_time_created Filter by items created at or after the minimum datetime created. (optional)
     * @param  \DateTime $max_date_time_created Filter by items created at or before the given maximum datetime created. (optional)
     * @param  \DateTime $min_date_time_modified Filter by items created at or after the minimum datetime modified. (optional)
     * @param  \DateTime $max_date_time_modified Filter by items modified at or before the given maximum datetime modified. (optional)
     * @param  string[] $email_addresses Filter by email address for relations. Multiple email addresses can be specified, all relations with any matching email address will be returned. (optional)
     * @param  string[] $relation_ids Search by specific task Ids. Used to return/refresh one search result. (optional)
     * @param  string $phone_number (optional)
     * @param  bool $has_phone_number (optional)
     * @param  string $filter_by_active Show archived or active items. Default: &#39;ActiveOnly&#39;: show active items. (optional)
     * @param  string $order Order search results ascending or descending. (optional)
     * @param  int $skip Number of results to skip. (optional)
     * @param  int $take Number of results to return. If a value higher than 100 is provided, it is set to 100. (optional)
     * @param  string $term Search by given text term in the fields indicated by TermFields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function relationsSearchAndExportRequest($real_estate_agency_id, $filter_by_relation_group_ids = null, $filter_by_relation_types = null, $include_statistics = null, $include_back_office_employees = 'false', $order_by = null, $relation_id = null, $term_fields = null, $culture = null, $min_date_time_created = null, $max_date_time_created = null, $min_date_time_modified = null, $max_date_time_modified = null, $email_addresses = null, $relation_ids = null, $phone_number = null, $has_phone_number = null, $filter_by_active = null, $order = null, $skip = null, $take = null, $term = null)
    {
        // verify the required parameter 'real_estate_agency_id' is set
        if ($real_estate_agency_id === null || (is_array($real_estate_agency_id) && count($real_estate_agency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $real_estate_agency_id when calling relationsSearchAndExport'
            );
        }
        if ($culture !== null && strlen($culture) > 5) {
            throw new \InvalidArgumentException('invalid length for "$culture" when calling RelationsApi.relationsSearchAndExport, must be smaller than or equal to 5.');
        }
        if ($culture !== null && strlen($culture) < 0) {
            throw new \InvalidArgumentException('invalid length for "$culture" when calling RelationsApi.relationsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($skip !== null && $skip > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling RelationsApi.relationsSearchAndExport, must be smaller than or equal to 2147483647.');
        }
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling RelationsApi.relationsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($take !== null && $take > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling RelationsApi.relationsSearchAndExport, must be smaller than or equal to 2147483647.');
        }
        if ($take !== null && $take < 0) {
            throw new \InvalidArgumentException('invalid value for "$take" when calling RelationsApi.relationsSearchAndExport, must be bigger than or equal to 0.');
        }

        if ($term !== null && strlen($term) > 50) {
            throw new \InvalidArgumentException('invalid length for "$term" when calling RelationsApi.relationsSearchAndExport, must be smaller than or equal to 50.');
        }
        if ($term !== null && strlen($term) < 0) {
            throw new \InvalidArgumentException('invalid length for "$term" when calling RelationsApi.relationsSearchAndExport, must be bigger than or equal to 0.');
        }


        $resourcePath = '/v3/{RealEstateAgencyId}/Relations/SearchAndExport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_by_relation_group_ids)) {
            $queryParams['filterByRelationGroupIds'] = $filter_by_relation_group_ids;
        } else
        if ($filter_by_relation_group_ids !== null) {
            $queryParams['filterByRelationGroupIds'] = ObjectSerializer::toQueryValue($filter_by_relation_group_ids);
        }
        // query params
        if (is_array($filter_by_relation_types)) {
            $queryParams['filterByRelationTypes'] = $filter_by_relation_types;
        } else
        if ($filter_by_relation_types !== null) {
            $queryParams['filterByRelationTypes'] = ObjectSerializer::toQueryValue($filter_by_relation_types);
        }
        // query params
        if ($include_statistics !== null) {
            $queryParams['includeStatistics'] = ObjectSerializer::toQueryValue($include_statistics);
        }
        // query params
        if ($include_back_office_employees !== null) {
            $queryParams['includeBackOfficeEmployees'] = ObjectSerializer::toQueryValue($include_back_office_employees);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($relation_id !== null) {
            $queryParams['relationId'] = ObjectSerializer::toQueryValue($relation_id);
        }
        // query params
        if (is_array($term_fields)) {
            $queryParams['termFields'] = $term_fields;
        } else
        if ($term_fields !== null) {
            $queryParams['termFields'] = ObjectSerializer::toQueryValue($term_fields);
        }
        // query params
        if ($culture !== null) {
            $queryParams['culture'] = ObjectSerializer::toQueryValue($culture);
        }
        // query params
        if ($min_date_time_created !== null) {
            $queryParams['minDateTimeCreated'] = ObjectSerializer::toQueryValue($min_date_time_created);
        }
        // query params
        if ($max_date_time_created !== null) {
            $queryParams['maxDateTimeCreated'] = ObjectSerializer::toQueryValue($max_date_time_created);
        }
        // query params
        if ($min_date_time_modified !== null) {
            $queryParams['minDateTimeModified'] = ObjectSerializer::toQueryValue($min_date_time_modified);
        }
        // query params
        if ($max_date_time_modified !== null) {
            $queryParams['maxDateTimeModified'] = ObjectSerializer::toQueryValue($max_date_time_modified);
        }
        // query params
        if (is_array($email_addresses)) {
            $queryParams['emailAddresses'] = $email_addresses;
        } else
        if ($email_addresses !== null) {
            $queryParams['emailAddresses'] = ObjectSerializer::toQueryValue($email_addresses);
        }
        // query params
        if (is_array($relation_ids)) {
            $queryParams['relationIds'] = $relation_ids;
        } else
        if ($relation_ids !== null) {
            $queryParams['relationIds'] = ObjectSerializer::toQueryValue($relation_ids);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['phoneNumber'] = ObjectSerializer::toQueryValue($phone_number);
        }
        // query params
        if ($has_phone_number !== null) {
            $queryParams['hasPhoneNumber'] = ObjectSerializer::toQueryValue($has_phone_number);
        }
        // query params
        if ($filter_by_active !== null) {
            $queryParams['filterByActive'] = ObjectSerializer::toQueryValue($filter_by_active);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }

        // path params
        if ($real_estate_agency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RealEstateAgencyId' . '}',
                ObjectSerializer::toPathValue($real_estate_agency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
