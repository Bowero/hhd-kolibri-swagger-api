<?php
/**
 * ObjectAssignmentsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Web API Swagger specification Kolibri24 API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1.778.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * ObjectAssignmentsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ObjectAssignmentsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for objectAssignmentsArchive
     *
     * .
     *
     */
    public function testObjectAssignmentsArchive()
    {
    }

    /**
     * Test case for objectAssignmentsClone
     *
     * Clone an existing objectAssignment..
     *
     */
    public function testObjectAssignmentsClone()
    {
    }

    /**
     * Test case for objectAssignmentsDefineNew
     *
     * Defines a new objectAssignment instance, without saving it..
     *
     */
    public function testObjectAssignmentsDefineNew()
    {
    }

    /**
     * Test case for objectAssignmentsDefineNewFromObjectType
     *
     * Defines a new objectAssignment instance from an objectTypeAssignment, without saving it..
     *
     */
    public function testObjectAssignmentsDefineNewFromObjectType()
    {
    }

    /**
     * Test case for objectAssignmentsDelete
     *
     * Delete selected objectAssignment.
     *
     */
    public function testObjectAssignmentsDelete()
    {
    }

    /**
     * Test case for objectAssignmentsLinkRelation
     *
     * Link a relation to the specified object assignments network..
     *
     */
    public function testObjectAssignmentsLinkRelation()
    {
    }

    /**
     * Test case for objectAssignmentsMakeVersionOf
     *
     * Bundle assignments and make Source Assignment an new version of the Target Assignment..
     *
     */
    public function testObjectAssignmentsMakeVersionOf()
    {
    }

    /**
     * Test case for objectAssignmentsRead
     *
     * Read a single objectAssignment..
     *
     */
    public function testObjectAssignmentsRead()
    {
    }

    /**
     * Test case for objectAssignmentsSave
     *
     * Save given objectAssignment.
     *
     */
    public function testObjectAssignmentsSave()
    {
    }

    /**
     * Test case for objectAssignmentsUnarchive
     *
     * .
     *
     */
    public function testObjectAssignmentsUnarchive()
    {
    }

    /**
     * Test case for objectAssignmentsUndelete
     *
     * Undelete selected objectAssignment.
     *
     */
    public function testObjectAssignmentsUndelete()
    {
    }

    /**
     * Test case for objectAssignmentsUnlinkRelation
     *
     * Unlink a relation from the specified object assignments network..
     *
     */
    public function testObjectAssignmentsUnlinkRelation()
    {
    }

    /**
     * Test case for objectAssignmentsUpdateAvailability
     *
     * Update objectAssignment availability..
     *
     */
    public function testObjectAssignmentsUpdateAvailability()
    {
    }
}
